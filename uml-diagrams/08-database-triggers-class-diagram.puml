@startuml
!theme toy

' Enums
enum TriggerType {
    BEFORE_SAVE
    AFTER_SAVE
    BEFORE_DELETE
    AFTER_DELETE
    BEFORE_FIND
    AFTER_FIND
}

enum TriggerCategory {
    VALIDATION
    BUSINESS_LOGIC
    AUDIT
    NOTIFICATION
    INTEGRATION
    SECURITY
    ANALYTICS
}

' Interfaces/Types
interface TriggerMetadata {
    +name: string
    +className: string
    +type: TriggerType
    +category: TriggerCategory
    +description: string
    +version: string
    +priority: number
    +enabled: boolean
    +organizationScoped: boolean
    +conditions?: TriggerCondition[]
    +dependencies?: string[]
    +performance: PerformanceConfig
    +audit: AuditConfig
    +error: ErrorConfig
}

interface TriggerCondition {
    +field: string
    +operator: 'equals' | 'not_equals' | 'changed' | 'exists' | 'not_exists'
    +value?: any
}

interface PerformanceConfig {
    +timeout: number
    +async: boolean
    +batchSize?: number
    +rateLimit?: { requests: number; window: number; }
}

interface AuditConfig {
    +logLevel: 'none' | 'basic' | 'detailed' | 'comprehensive'
    +includeData: boolean
    +includeChanges: boolean
    +retentionDays: number
}

interface ErrorConfig {
    +retryPolicy: {
        maxRetries: number;
        backoffMultiplier: number;
        maxBackoffTime: number;
    }
    +fallbackAction: 'ignore' | 'log' | 'throw'
    +notificationThreshold: number
}

interface TriggerRequest
interface TriggerResponse
class AuditService
class ValidationService
class NotificationService
class PerformanceService
class Parse_Object
class Parse_Query
class Parse_User
class Parse_Error

' BaseTrigger Abstract Class
abstract class BaseTrigger {
    protected auditService: AuditService
    protected validationService: ValidationService
    protected notificationService: NotificationService
    protected performanceService: PerformanceService
    protected metadata: TriggerMetadata

    +constructor(metadata: TriggerMetadata)
    +execute(request: TriggerRequest): Promise<TriggerResponse>
    #abstract executeTriggerLogic(request: TriggerRequest): Promise<any>
    #abstract shouldExecute(request: TriggerRequest): Promise<boolean>
    #validateOrganizationContext(request: TriggerRequest): Promise<void>
    #shouldExecute(request: TriggerRequest): Promise<boolean>
    -evaluateCondition(condition: TriggerCondition, request: TriggerRequest): Promise<boolean>
    #handleError(error: any, request: TriggerRequest, auditContext: any): Promise<boolean>
    -retryExecution(request: TriggerRequest, auditContext: any): Promise<TriggerResponse>
    -handleFinalError(error: any): TriggerResponse
    #createAuditContext(request: TriggerRequest): any
    #delay(ms: number): Promise<void>
    #notifyError(error: any, context: any): Promise<void>
}

' Concrete Trigger Example
class UserValidationTrigger {
    +constructor()
    #executeTriggerLogic(request: TriggerRequest): Promise<any>
    #shouldExecute(request: TriggerRequest): Promise<boolean>
    -validateRequiredFields(user: Parse_User, isNew: boolean): Promise<void>
    -validateDataFormats(user: Parse_User): Promise<void>
    -validateBusinessRules(user: Parse_User, isNew: boolean): Promise<void>
    -setComputedFields(user: Parse_User, isNew: boolean): Promise<void>
    -getProcessedFields(user: Parse_User): string[]
    -isValidEmail(email: string): boolean
    -isValidPhone(phone: string): boolean
    -isValidUsername(username: string): boolean
    -checkTotalUserCount(organizationId: string): Promise<number>
}

' Relationships

TriggerMetadata --> TriggerType
TriggerMetadata --> TriggerCategory
TriggerMetadata *-- TriggerCondition
TriggerMetadata *-- PerformanceConfig
TriggerMetadata *-- AuditConfig
TriggerMetadata *-- ErrorConfig

BaseTrigger *-- TriggerMetadata
BaseTrigger ..> TriggerRequest
BaseTrigger ..> TriggerResponse
BaseTrigger ..> AuditService
BaseTrigger ..> ValidationService
BaseTrigger ..> NotificationService
BaseTrigger ..> PerformanceService
BaseTrigger ..> Parse_Object
BaseTrigger ..> Parse_Query
BaseTrigger ..> Parse_User

UserValidationTrigger --|> BaseTrigger
UserValidationTrigger ..> Parse_User
UserValidationTrigger ..> Parse_Query
UserValidationTrigger ..> Parse_Error

@enduml