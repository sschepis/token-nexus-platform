@startuml
!theme toy

' Enums
enum IntegrationType {
    REST_API
    GRAPHQL_API
    WEBHOOK
    BLOCKCHAIN_RPC
    DATABASE
    MESSAGE_QUEUE
    FILE_STORAGE
    AUTHENTICATION
    PAYMENT
    NOTIFICATION
    ANALYTICS
    AI_SERVICE
}

enum IntegrationScope {
    SYSTEM
    ORGANIZATION
    USER
    APPLICATION
}

enum IntegrationSecurity {
    PUBLIC
    AUTHENTICATED
    PRIVATE
}

enum IntegrationReliability {
    CRITICAL
    HIGH
    MEDIUM
    LOW
}

enum AuthenticationType {
    NONE
    API_KEY
    OAUTH2
    BASIC
    CUSTOM
}

enum RateLimitStrategy {
    TOKEN_BUCKET
    LEAKY_BUCKET
    FIXED_WINDOW
    SLIDING_WINDOW
}

enum BackoffStrategy {
    FIXED
    EXPONENTIAL
    LINEAR
}

enum CacheStrategy {
    LRU
    LFU
    FIFO
    NO_CACHE
}

' Interfaces/Types
interface IntegrationMetadata {
    +id: string
    +name: string
    +type: IntegrationType
    +scope: IntegrationScope
    +security: IntegrationSecurity
    +reliability: IntegrationReliability
    +description: string
    +version: string
    +baseUrl: string
    +authentication: AuthenticationConfig
    +rateLimit: RateLimitConfig
    +retry: RetryConfig
    +timeout: TimeoutConfig
    +caching: CachingConfig
    +monitoring: MonitoringConfig
    +transformation: TransformationConfig
    +validation: ValidationConfig
    +tags: string[]
    +dependencies: string[]
    +healthCheck: HealthCheckConfig
}

interface AuthenticationConfig {
    +type: AuthenticationType
    +credentials: CredentialConfig
    +refreshable: boolean
    +expirationHandling: ExpirationHandling
}

interface RateLimitConfig {
    +enabled: boolean
    +requests: number
    +window: number
    +burst: number
    +strategy: RateLimitStrategy
}

interface RetryConfig {
    +enabled: boolean
    +maxAttempts: number
    +backoffStrategy: BackoffStrategy
    +initialDelay: number
    +maxDelay: number
    +backoffMultiplier?: number
}

interface TimeoutConfig {
    +connect: number
    +request: number
    +response: number
}

interface CachingConfig {
    +enabled: boolean
    +ttl: number
    +strategy: CacheStrategy
    +keyPattern: string
    +invalidationRules: InvalidationRule[]
}

interface MonitoringConfig {
    +enabled: boolean
    +metrics: MetricConfig[]
    +alerts: AlertConfig[]
    +logging: LoggingConfig
}

interface TransformationConfig {
    +request: TransformationRule[]
    +response: TransformationRule[]
    +errorMapping: ErrorMappingRule[]
}

interface ValidationConfig {
    +request: ValidationRule[]
    +response: ValidationRule[]
    +strict: boolean
}

interface HealthCheckConfig {
    +enabled: boolean
    +endpoint: string
    +interval: number
    +timeout: number
    +healthyThreshold: number
    +unhealthyThreshold: number
}

interface IntegrationRequest
interface IntegrationResponse
interface IntegrationContext
interface CredentialConfig
interface ExpirationHandling
interface InvalidationRule
interface MetricConfig
interface AlertConfig
interface LoggingConfig
interface TransformationRule
interface ValidationRule
interface HttpClient
interface RateLimiter
interface GoogleMapsIntegration
interface SlackIntegration
interface SalesforceCRMIntegration

class AuthenticationService
class RateLimiterService
class CacheService
class MonitoringService
class ValidationService
class TransformationService
class IntegrationError
class RateLimitError

' IntegrationManager Class
class IntegrationManager {
    -integrations: Map<string, IntegrationMetadata>
    -clients: Map<string, HttpClient>
    -rateLimiters: Map<string, RateLimiter>
    
    -authService: AuthenticationService
    -cacheService: CacheService
    -monitoringService: MonitoringService
    -validationService: ValidationService
    -transformationService: TransformationService

    +constructor()
    +registerIntegration(metadata: IntegrationMetadata): void
    +execute<T = any>(integrationId: string, request: IntegrationRequest, context?: IntegrationContext): Promise<IntegrationResponse<T>>
    +executeBatch<T = any>(requests: BatchIntegrationRequest[]): Promise<BatchIntegrationResponse<T>>
    -getIntegrationMetadata(integrationId: string): IntegrationMetadata
    -validateIntegrationMetadata(metadata: IntegrationMetadata): void
    -initializeClient(metadata: IntegrationMetadata): void
    -initializeRateLimiter(metadata: IntegrationMetadata): void
    -startHealthMonitoring(metadata: IntegrationMetadata): void
    -checkHealth(metadata: IntegrationMetadata): Promise<void>
    -getClient(integrationId: string): HttpClient
    -validateRequest(metadata: IntegrationMetadata, request: IntegrationRequest): Promise<void>
    -getCachedResponse<T>(metadata: IntegrationMetadata, request: IntegrationRequest, context?: IntegrationContext): Promise<IntegrationResponse<T> | null>
    -checkRateLimit(metadata: IntegrationMetadata, context?: IntegrationContext): Promise<void>
    -authenticateRequest(metadata: IntegrationMetadata, request: IntegrationRequest, context?: IntegrationContext): Promise<IntegrationRequest>
    -transformRequest(metadata: IntegrationMetadata, request: IntegrationRequest): Promise<IntegrationRequest>
    -executeRequest<T>(metadata: IntegrationMetadata, request: IntegrationRequest, context?: IntegrationContext): Promise<IntegrationResponse<T>>
    -transformResponse<T>(metadata: IntegrationMetadata, response: IntegrationResponse<T>): Promise<IntegrationResponse<T>>
    -validateResponse<T>(metadata: IntegrationMetadata, response: IntegrationResponse<T>): Promise<void>
    -cacheResponse<T>(metadata: IntegrationMetadata, request: IntegrationRequest, response: IntegrationResponse<T>, context?: IntegrationContext): Promise<void>
    -recordMetrics(metadata: IntegrationMetadata, status: string, duration: number, error?: any): void
    -handleError<T>(metadata: IntegrationMetadata, error: any, request: IntegrationRequest, context?: IntegrationContext): Promise<Error>
    -isRetryableError(metadata: IntegrationMetadata, error: Error): boolean
    -calculateBackoffDelay(strategy: BackoffStrategy, attempt: number): number
    -sleep(ms: number): Promise<void>
    -getCredentials(metadata: IntegrationMetadata, context?: IntegrationContext): Promise<CredentialConfig>
    -getOAuth2Token(metadata: IntegrationMetadata, credentials: CredentialConfig, context?: IntegrationContext): Promise<string>
    -applyCustomAuthentication(metadata: IntegrationMetadata, request: IntegrationRequest, credentials: CredentialConfig): Promise<IntegrationRequest>
    -generateRateLimitKey(metadata: IntegrationMetadata, context?: IntegrationContext): string
    -generateCacheKey(metadata: IntegrationMetadata, request: IntegrationRequest, context?: IntegrationContext): string
    -groupRequestsByIntegration(requests: BatchIntegrationRequest[]): Map<string, BatchIntegrationRequest[]>
    -chunkArray<T>(array: T[], chunkSize: number): T[][]
}

' Concrete Integrations
class GoogleMapsIntegration {
    +constructor(manager: IntegrationManager)
    +searchPlaces(query: string): Promise<any>
    +getDirections(origin: string, destination: string): Promise<any>
}

class SlackIntegration {
    +constructor(manager: IntegrationManager)
    +sendMessage(channel: string, message: string): Promise<any>
    +createChannel(name: string): Promise<any>
}

class SalesforceCRMIntegration {
    +constructor(manager: IntegrationManager)
    +createLead(leadData: any): Promise<any>
    +updateLeadStatus(leadId: string, status: string): Promise<any>
}


' Relationships

IntegrationManager "1" *-- "N" IntegrationMetadata
IntegrationManager --> AuthenticationService
IntegrationManager --> RateLimiterService
IntegrationManager --> CacheService
IntegrationManager --> MonitoringService
IntegrationManager --> ValidationService
IntegrationManager --> TransformationService

IntegrationMetadata --> IntegrationType
IntegrationMetadata --> IntegrationScope
IntegrationMetadata --> IntegrationSecurity
IntegrationMetadata --> IntegrationReliability
IntegrationMetadata *-- AuthenticationConfig
IntegrationMetadata *-- RateLimitConfig
IntegrationMetadata *-- RetryConfig
IntegrationMetadata *-- TimeoutConfig
IntegrationMetadata *-- CachingConfig
IntegrationMetadata *-- MonitoringConfig
IntegrationMetadata *-- TransformationConfig
IntegrationMetadata *-- ValidationConfig
IntegrationMetadata *-- HealthCheckConfig

AuthenticationConfig --> AuthenticationType
RateLimitConfig --> RateLimitStrategy
RetryConfig --> BackoffStrategy
CachingConfig --> CacheStrategy

GoogleMapsIntegration --> IntegrationManager
SlackIntegration --> IntegrationManager
SalesforceCRMIntegration --> IntegrationManager

IntegrationError --|> Error
RateLimitError --|> Error

@enduml