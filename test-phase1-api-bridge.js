/**
 * Phase 1 API Bridge Test Script
 * Tests the critical API bridge functions to ensure they work correctly
 */

const Parse = require('parse/node');

// Configure Parse (you'll need to update these with your actual credentials)
Parse.initialize('your-app-id', 'your-js-key');
Parse.serverURL = 'http://localhost:1337/parse';

async function testAPIBridge() {
  console.log('üß™ Testing Phase 1 API Bridge Functions...\n');

  try {
    // Test 1: fetchAppDefinitions
    console.log('1Ô∏è‚É£ Testing fetchAppDefinitions...');
    const appDefinitions = await Parse.Cloud.run('fetchAppDefinitions', {
      category: 'all',
      search: ''
    });
    console.log(`‚úÖ fetchAppDefinitions: Found ${appDefinitions.length} app definitions`);

    // Test 2: fetchOrgAppInstallations (requires authenticated user)
    console.log('\n2Ô∏è‚É£ Testing fetchOrgAppInstallations...');
    try {
      const installations = await Parse.Cloud.run('fetchOrgAppInstallations', {});
      console.log(`‚úÖ fetchOrgAppInstallations: Found ${installations.length} installations`);
    } catch (error) {
      if (error.code === Parse.Error.INVALID_SESSION_TOKEN) {
        console.log('‚ö†Ô∏è fetchOrgAppInstallations: Requires authentication (expected)');
      } else {
        throw error;
      }
    }

    // Test 3: Check if installApp function exists
    console.log('\n3Ô∏è‚É£ Testing installApp function availability...');
    try {
      await Parse.Cloud.run('installApp', {});
    } catch (error) {
      if (error.code === Parse.Error.INVALID_SESSION_TOKEN || 
          error.code === Parse.Error.INVALID_JSON) {
        console.log('‚úÖ installApp: Function exists and validates parameters');
      } else {
        throw error;
      }
    }

    // Test 4: Check if uninstallApp function exists
    console.log('\n4Ô∏è‚É£ Testing uninstallApp function availability...');
    try {
      await Parse.Cloud.run('uninstallApp', {});
    } catch (error) {
      if (error.code === Parse.Error.INVALID_SESSION_TOKEN || 
          error.code === Parse.Error.INVALID_JSON) {
        console.log('‚úÖ uninstallApp: Function exists and validates parameters');
      } else {
        throw error;
      }
    }

    // Test 5: Check if updateAppSettings function exists
    console.log('\n5Ô∏è‚É£ Testing updateAppSettings function availability...');
    try {
      await Parse.Cloud.run('updateAppSettings', {});
    } catch (error) {
      if (error.code === Parse.Error.INVALID_SESSION_TOKEN || 
          error.code === Parse.Error.INVALID_JSON) {
        console.log('‚úÖ updateAppSettings: Function exists and validates parameters');
      } else {
        throw error;
      }
    }

    // Test 6: Check if getAppInstallationDetails function exists
    console.log('\n6Ô∏è‚É£ Testing getAppInstallationDetails function availability...');
    try {
      await Parse.Cloud.run('getAppInstallationDetails', {});
    } catch (error) {
      if (error.code === Parse.Error.INVALID_SESSION_TOKEN || 
          error.code === Parse.Error.INVALID_JSON) {
        console.log('‚úÖ getAppInstallationDetails: Function exists and validates parameters');
      } else {
        throw error;
      }
    }

    console.log('\nüéâ Phase 1 API Bridge Test Complete!');
    console.log('\nüìã Summary:');
    console.log('‚úÖ All required cloud functions are registered');
    console.log('‚úÖ Parameter validation is working');
    console.log('‚úÖ Authentication checks are in place');
    console.log('‚úÖ API bridge is ready for frontend integration');

  } catch (error) {
    console.error('‚ùå Test failed:', error);
    process.exit(1);
  }
}

// Run the test
if (require.main === module) {
  testAPIBridge();
}

module.exports = { testAPIBridge };