{
  "address": "0x97ecF7f1188b5471f8257D82a8Bc38F361Dc28C9",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "trustedIssuer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "identity",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "claimTopic",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "claim",
          "type": "bytes"
        }
      ],
      "name": "ClaimAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "trustedIssuer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "identity",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "claimTopic",
          "type": "uint256"
        }
      ],
      "name": "ClaimRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "trustedIssuer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "identity",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "claimTopics",
          "type": "uint256[]"
        }
      ],
      "name": "ClaimsRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "trustedIssuer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "identity",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "claims",
          "type": "uint256[]"
        }
      ],
      "name": "ClaimsSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "ContractAddressesSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "trustedIssuer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IIdentity",
          "name": "identity",
          "type": "address"
        }
      ],
      "name": "IdentityAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "trustedIssuer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "identity",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "country",
          "type": "uint16"
        }
      ],
      "name": "IdentityCountryUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "trustedIssuer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IIdentity",
          "name": "identity",
          "type": "address"
        }
      ],
      "name": "IdentityRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "trustedIssuer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "walletAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "onchainID",
          "type": "bytes32"
        }
      ],
      "name": "WalletLinked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "trustedIssuer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "walletAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "onchainID",
          "type": "bytes32"
        }
      ],
      "name": "WalletUnlinked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_claimTopic",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_claim",
          "type": "bytes"
        }
      ],
      "name": "addClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "contract IIdentity",
          "name": "identityData",
          "type": "address"
        }
      ],
      "name": "addIdentity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_addresses",
          "type": "address[]"
        },
        {
          "internalType": "contract IIdentity[]",
          "name": "identityDatas",
          "type": "address[]"
        }
      ],
      "name": "batchAddIdentity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_userAddress",
          "type": "address"
        }
      ],
      "name": "contains",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_userAddress",
          "type": "address"
        }
      ],
      "name": "containsAddress",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_claimTopic",
          "type": "uint256"
        }
      ],
      "name": "getClaim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "getClaims",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRegistryUsers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_claimTopic",
          "type": "uint256"
        }
      ],
      "name": "hasClaim",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_userAddress",
          "type": "address"
        }
      ],
      "name": "identity",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_registryUser",
          "type": "address"
        }
      ],
      "name": "isRegistryUser",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isVerified",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_claimTopic",
          "type": "uint256"
        }
      ],
      "name": "removeClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_identity",
          "type": "address"
        }
      ],
      "name": "removeIdentity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_claims",
          "type": "uint256[]"
        }
      ],
      "name": "setClaims",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_claims",
          "type": "uint256[]"
        }
      ],
      "name": "unsetClaims",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2c2649ae6b9cc452bd2a69736bb8c9e0c4f7a5ac5eb4cf099a8823d526bcec20",
  "receipt": {
    "to": null,
    "from": "0x9508f0Da19eC1C52D9C52611e4433159492bb93b",
    "contractAddress": "0x97ecF7f1188b5471f8257D82a8Bc38F361Dc28C9",
    "transactionIndex": 7,
    "gasUsed": "1483072",
    "logsBloom": "0x
    "blockHash": "0x0e863af05a7acdf7d0f0f02058ef0c3ed1a33054dde61bdd180a8f36e589643b",
    "transactionHash": "0x2c2649ae6b9cc452bd2a69736bb8c9e0c4f7a5ac5eb4cf099a8823d526bcec20",
    "logs": [],
    "blockNumber": 26013713,
    "cumulativeGasUsed": "1768445",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "e39248fcba6c46a8a0b49ab62402d196",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trustedIssuer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"identity\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"claimTopic\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"claim\",\"type\":\"bytes\"}],\"name\":\"ClaimAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trustedIssuer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"identity\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"claimTopic\",\"type\":\"uint256\"}],\"name\":\"ClaimRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trustedIssuer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"identity\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"claimTopics\",\"type\":\"uint256[]\"}],\"name\":\"ClaimsRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trustedIssuer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"identity\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"claims\",\"type\":\"uint256[]\"}],\"name\":\"ClaimsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ContractAddressesSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trustedIssuer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IIdentity\",\"name\":\"identity\",\"type\":\"address\"}],\"name\":\"IdentityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trustedIssuer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"identity\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"country\",\"type\":\"uint16\"}],\"name\":\"IdentityCountryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trustedIssuer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IIdentity\",\"name\":\"identity\",\"type\":\"address\"}],\"name\":\"IdentityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trustedIssuer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"onchainID\",\"type\":\"bytes32\"}],\"name\":\"WalletLinked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trustedIssuer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"onchainID\",\"type\":\"bytes32\"}],\"name\":\"WalletUnlinked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_claimTopic\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_claim\",\"type\":\"bytes\"}],\"name\":\"addClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"contract IIdentity\",\"name\":\"identityData\",\"type\":\"address\"}],\"name\":\"addIdentity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"contract IIdentity[]\",\"name\":\"identityDatas\",\"type\":\"address[]\"}],\"name\":\"batchAddIdentity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"contains\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"containsAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_claimTopic\",\"type\":\"uint256\"}],\"name\":\"getClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getClaims\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRegistryUsers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_claimTopic\",\"type\":\"uint256\"}],\"name\":\"hasClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"identity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registryUser\",\"type\":\"address\"}],\"name\":\"isRegistryUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isVerified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_claimTopic\",\"type\":\"uint256\"}],\"name\":\"removeClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_identity\",\"type\":\"address\"}],\"name\":\"removeIdentity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_claims\",\"type\":\"uint256[]\"}],\"name\":\"setClaims\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_claims\",\"type\":\"uint256[]\"}],\"name\":\"unsetClaims\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is implemented as a diamond facet following the EIP-2535 Diamond Standard.      It provides functionality for managing digital identities and their associated claims.      The identity system follows a claims-based model where trusted issuers can make      verifiable claims about identities. The contract enforces permissions so that only      authorized issuers can manage specific claim types.      Key functionalities include:      - Adding and removing identities to/from the registry      - Managing claims (attestations) about identities      - Verifying identity status and claim ownership      - Access control for trusted issuers      All state is stored via the diamond storage pattern in IdentitySystemStorage.\",\"events\":{\"ContractAddressesSet()\":{\"details\":\"Emitted when contract addresses are configured\"}},\"kind\":\"dev\",\"methods\":{\"addIdentity(address,address)\":{\"custom:access\":\"Restricted to trusted issuers (via isTrustedIssuer modifier)\",\"custom:event\":\"Emits IdentityAdded event upon successful registration\",\"details\":\"Registers a new identity in the system, associating the provided      address with an identity contract. This operation can only be performed      by approved trusted issuers. The function checks that the address is valid      and that no identity is already registered for the given address.\",\"params\":{\"_address\":\"The address of the user who will own the identity\",\"identityData\":\"The IIdentity contract instance representing the identity\"}},\"batchAddIdentity(address[],address[])\":{\"details\":\"this function can only be called by a trusted issuer\",\"params\":{\"_addresses\":\"array of addresses of the identities\",\"identityDatas\":\"array of addresses of the identity data contracts\"}},\"constructor\":{\"details\":\"Empty constructor as initialization happens through the diamond\"},\"contains(address)\":{\"params\":{\"_userAddress\":\"address of the identity user\"},\"returns\":{\"_0\":\"bool\"}},\"getRegistryUsers()\":{\"returns\":{\"_0\":\"array of addresses of the users\"}},\"identity(address)\":{\"params\":{\"_userAddress\":\"address of the identity user\"},\"returns\":{\"_0\":\"identityData address of the identity data contract\"}},\"isRegistryUser(address)\":{\"params\":{\"_registryUser\":\"address of the registry user\"},\"returns\":{\"_0\":\"bool\"}},\"isVerified(address)\":{\"params\":{\"_address\":\"address of the identity user or identity contract\"},\"returns\":{\"_0\":\"bool\"}},\"removeIdentity(address)\":{\"custom:access\":\"Restricted to trusted issuers (via isTrustedIssuer modifier)\",\"custom:event\":\"Emits IdentityRemoved event upon successful removal\",\"details\":\"Deletes an identity from the system, removing all its associated data      and mappings. This operation can only be performed by trusted issuers.      The function performs several cleanup steps:      1. Removes the identity from the identities mapping      2. Updates the owner mapping      3. Removes the identity from the identityOwners array (using swap and pop)\",\"params\":{\"_identity\":\"The address of the identity to remove\"}}},\"title\":\"IdentityRegistryFacet\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addIdentity(address,address)\":{\"notice\":\"Adds a new identity to the registry\"},\"batchAddIdentity(address[],address[])\":{\"notice\":\"batch add identities to the registry\"},\"contains(address)\":{\"notice\":\"does an identity exist\"},\"getRegistryUsers()\":{\"notice\":\"get the users of the registry\"},\"identity(address)\":{\"notice\":\"get the identity data contract address of an identity\"},\"isRegistryUser(address)\":{\"notice\":\"is the user a registry user\"},\"isVerified(address)\":{\"notice\":\"is an identity verified\"},\"removeIdentity(address)\":{\"notice\":\"Removes an identity from the registry\"}},\"notice\":\"Manages a decentralized identity registry with claim verification capabilities\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/IdentityRegistryFacet.sol\":\"IdentityRegistryFacet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":11},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../token/ERC721/IERC721.sol\\\";\\n\",\"keccak256\":\"0xc4d7ebf63eb2f6bf3fee1b6c0ee775efa9f31b4843a5511d07eea147e212932d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721Receiver} from \\\"../token/ERC721/IERC721Receiver.sol\\\";\\n\",\"keccak256\":\"0x12808acc0c2cbc0b9068755711fd79483b4f002e850d25e0e72e735765b6cd99\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0x4ea01544758fd2c7045961904686bfe232d2220a04ecaa2d6b08dac17827febf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC-721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC-721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5dc63d1c6a12fe1b17793e1745877b2fcbe1964c3edfd0a482fac21ca8f18261\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC-721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC-721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xb5afb8e8eebc4d1c6404df2f5e1e6d2c3d24fd01e5dfc855314951ecfaae462d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Errors} from \\\"./Errors.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert Errors.InsufficientBalance(address(this).balance, amount);\\n        }\\n\\n        (bool success, bytes memory returndata) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            _revert(returndata);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {Errors.FailedCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert Errors.InsufficientBalance(address(this).balance, value);\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\\n     * of an unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {Errors.FailedCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            assembly (\\\"memory-safe\\\") {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaaa1d17c1129b127a4a401db2fbd72960e2671474be3d08cae71ccdc42f7624c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of common custom errors used in multiple contracts\\n *\\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\\n * It is recommended to avoid relying on the error API for critical functionality.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Errors {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedCall();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error FailedDeployment();\\n\\n    /**\\n     * @dev A necessary precompile is missing.\\n     */\\n    error MissingPrecompile(address);\\n}\\n\",\"keccak256\":\"0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"contracts/facets/IdentityRegistryFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IIdentityRegistry.sol\\\";\\nimport \\\"../identity/IdentityStorage.sol\\\";\\nimport \\\"../utilities/Modifiers.sol\\\";\\n\\nimport { IIdentityRegistry, IIdentity } from \\\"../interfaces/IIdentityRegistry.sol\\\";\\n\\n/**\\n * @title IdentityRegistryFacet\\n * @notice Manages a decentralized identity registry with claim verification capabilities\\n * @dev This contract is implemented as a diamond facet following the EIP-2535 Diamond Standard.\\n *      It provides functionality for managing digital identities and their associated claims.\\n *      The identity system follows a claims-based model where trusted issuers can make\\n *      verifiable claims about identities. The contract enforces permissions so that only\\n *      authorized issuers can manage specific claim types.\\n *\\n *      Key functionalities include:\\n *      - Adding and removing identities to/from the registry\\n *      - Managing claims (attestations) about identities\\n *      - Verifying identity status and claim ownership\\n *      - Access control for trusted issuers\\n *\\n *      All state is stored via the diamond storage pattern in IdentitySystemStorage.\\n */\\ncontract IdentityRegistryFacet is IIdentityRegistry, Modifiers {\\n\\n    using IdentitySystemStorage for IdentitySystemStorage.IdentitySystem;\\n\\n    /**\\n     * @dev Emitted when contract addresses are configured\\n     */\\n    event ContractAddressesSet();\\n\\n    /**\\n     * @notice Restricts function access to trusted issuers only\\n     * @dev A trusted issuer is an address that has been approved to issue and manage\\n     *      claims within the identity system. This is a basic authorization check\\n     *      that does not validate claim topic permissions.\\n     */\\n    modifier isTrustedIssuer() {\\n        IdentitySystemStorage.IdentitySystem storage _storage = IdentitySystemStorage.diamondStorage();\\n        require(_storage.isTrustedIssuer(msg.sender), \\\"Not trusted issuer\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Restricts function access to issuers trusted for a specific claim topic\\n     * @dev Ensures the caller is not only a trusted issuer but also specifically\\n     *      authorized to issue or manage claims of the specified topic. This provides\\n     *      a more granular level of access control.\\n     * @param _claimTopic The specific claim topic that requires authorization\\n     */\\n    modifier isTrustedIssuerForClaimTopic(uint256 _claimTopic) {\\n        IdentitySystemStorage.IdentitySystem storage _storage = IdentitySystemStorage.diamondStorage();\\n        require(_storage.isTrustedIssuer(msg.sender), \\\"Not a trusted issuer\\\");\\n        require(_storage.hasTrustedIssuerClaimTopic(msg.sender, _claimTopic), \\\"Issuer not authorized for claim topic\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Restricts function access to issuers trusted for multiple claim topics\\n     * @dev Ensures the caller is authorized to issue or manage claims for all the\\n     *      specified topics. If the caller is not authorized for even one topic,\\n     *      the entire operation will be rejected.\\n     * @param _claimTopics Array of claim topics that require authorization\\n     */\\n    modifier isTrustedIssuerForClaimTopics(uint256[] memory _claimTopics) {\\n        IdentitySystemStorage.IdentitySystem storage _storage = IdentitySystemStorage.diamondStorage();\\n        for (uint256 i = 0; i < _claimTopics.length; i++) {\\n            require(_storage.hasTrustedIssuerClaimTopic(msg.sender, _claimTopics[i]), \\\"Issuer not authorized for claim topic\\\");\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @dev Empty constructor as initialization happens through the diamond\\n     */\\n    constructor() {}\\n\\n    /**\\n     * @notice Validates that a user address is registered and associated with an identity\\n     * @dev Internal validation helper that checks both for zero addresses and\\n     *      whether the address is linked to a valid identity in the registry\\n     * @param _userAddress The user address to validate\\n     */\\n    function _validateUserAddress(address _userAddress) internal view {\\n        require(_userAddress != address(0), \\\"User address cannot be zero\\\");\\n        IdentitySystemStorage.IdentitySystem storage _storage = IdentitySystemStorage.diamondStorage();\\n        require(_storage._getIdentity(_userAddress) != address(0), \\\"User address not associated with an identity\\\");\\n    }\\n\\n    /**\\n     * @notice Resolves an address to its associated identity address\\n     * @dev If the address is registered in the identity system, returns the associated\\n     *      identity address. Otherwise, returns the input address itself. This is useful\\n     *      for functions that can accept either a user address or a direct identity address.\\n     * @param _address The address to resolve (user address or identity address)\\n     * @return The resolved identity address\\n     */\\n    function _getIdentityAddress(address _address) internal view returns (address) {\\n        IdentitySystemStorage.IdentitySystem storage _storage = IdentitySystemStorage.diamondStorage();\\n        address identityAddress = _storage._getIdentity(_address);\\n        return identityAddress != address(0) ? identityAddress : _address;\\n    }\\n\\n    /**\\n     * @notice Adds a new identity to the registry (internal implementation)\\n     * @dev Internal function that handles the actual logic of adding an identity.\\n     *      This function is called by both addIdentity and batchAddIdentity.\\n     *      It performs the necessary storage updates and emits the appropriate event.\\n     * @param _issuer The address of the trusted issuer adding the identity\\n     * @param _address The address of the user who owns the identity\\n     * @param identityData The IIdentity contract instance representing the identity\\n     */\\n    function _addIdentity(address _issuer, address _address, IIdentity identityData) internal {\\n        IdentitySystemStorage.IdentitySystem storage _storage = IdentitySystemStorage.diamondStorage();\\n        require(_storage.identities[_address] == address(0), \\\"Identity already exists\\\");\\n        _storage.identities[_address] = address(identityData);\\n        _storage.identityOwners.push(_address);\\n        _storage.identityOwnersMap[address(identityData)] = _address;\\n        emit IdentityAdded(_issuer, _address, identityData);\\n    }\\n\\n    /**\\n     * @notice Adds a new identity to the registry\\n     * @dev Registers a new identity in the system, associating the provided\\n     *      address with an identity contract. This operation can only be performed\\n     *      by approved trusted issuers. The function checks that the address is valid\\n     *      and that no identity is already registered for the given address.\\n     *\\n     * @param _address The address of the user who will own the identity\\n     * @param identityData The IIdentity contract instance representing the identity\\n     * @custom:access Restricted to trusted issuers (via isTrustedIssuer modifier)\\n     * @custom:event Emits IdentityAdded event upon successful registration\\n     */\\n    function addIdentity(address _address, IIdentity identityData) external override isTrustedIssuer {\\n        require(_address != address(0), \\\"Invalid identity address\\\");\\n        _addIdentity(msg.sender, _address, identityData);\\n    }\\n\\n    /**\\n     * @notice Removes an identity from the registry\\n     * @dev Deletes an identity from the system, removing all its associated data\\n     *      and mappings. This operation can only be performed by trusted issuers.\\n     *      The function performs several cleanup steps:\\n     *      1. Removes the identity from the identities mapping\\n     *      2. Updates the owner mapping\\n     *      3. Removes the identity from the identityOwners array (using swap and pop)\\n     *\\n     * @param _identity The address of the identity to remove\\n     * @custom:access Restricted to trusted issuers (via isTrustedIssuer modifier)\\n     * @custom:event Emits IdentityRemoved event upon successful removal\\n     */\\n    function removeIdentity(address _identity) external override isTrustedIssuer {\\n        IdentitySystemStorage.IdentitySystem storage _storage = IdentitySystemStorage.diamondStorage();\\n        require(_storage.identities[_identity] != address(0), \\\"Identity does not exist\\\");\\n        \\n        // Find the owner of this identity and update mapping\\n        address owner = _storage.identityOwnersMap[_identity];\\n        if (owner != address(0)) {\\n            delete _storage.identityOwnersMap[_identity];\\n        }\\n        \\n        // Remove from identities mapping\\n        delete _storage.identities[_identity];\\n        \\n        // Remove from identityOwners array using swap and pop\\n        for (uint256 i = 0; i < _storage.identityOwners.length; i++) {\\n            if (_storage.identityOwners[i] == _identity) {\\n                // Swap with the last element\\n                address lastIdentity = _storage.identityOwners[_storage.identityOwners.length - 1];\\n                _storage.identityOwners[i] = lastIdentity;\\n                \\n                // Update the mapping for the swapped element\\n                if (i < _storage.identityOwners.length - 1) {\\n                    // Only update the map if we actually moved an element\\n                    // (i.e., we're not removing the last element)\\n                    _storage.identityOwnersMap[lastIdentity] = owner;\\n                }\\n                \\n                // Remove the last element\\n                _storage.identityOwners.pop();\\n                break;\\n            }\\n        }\\n        \\n        emit IdentityRemoved(msg.sender, _identity, IIdentity(_identity));\\n    }\\n\\n    /// @notice get the identity data contract address of an identity\\n    /// @param _userAddress address of the identity user\\n    /// @return identityData address of the identity data contract\\n    function identity(address _userAddress) external view override returns (address) {\\n        IdentitySystemStorage.IdentitySystem storage _storage = IdentitySystemStorage.diamondStorage();\\n        return _storage._getIdentity(_userAddress);\\n    }\\n\\n    /// @notice batch add identities to the registry\\n    /// @param _addresses array of addresses of the identities\\n    /// @param identityDatas array of addresses of the identity data contracts\\n    /// @dev this function can only be called by a trusted issuer\\n    function batchAddIdentity(address[] calldata _addresses, IIdentity[] calldata identityDatas) external override isTrustedIssuer {\\n        require(_addresses.length == identityDatas.length, \\\"Arrays length mismatch\\\");\\n        for (uint256 i = 0; i < _addresses.length; i++) {\\n            _addIdentity(msg.sender, _addresses[i], identityDatas[i]);\\n        }\\n    }\\n\\n    function addClaim(address _address, uint256 _claimTopic, bytes calldata _claim) external override isTrustedIssuerForClaimTopic(_claimTopic) {\\n        IdentitySystemStorage.IdentitySystem storage _storage = IdentitySystemStorage.diamondStorage();\\n        address idObj = _getIdentityAddress(_address);\\n        require(_storage.getIdentityOwner(idObj) != address(0), \\\"Identity does not exist\\\");\\n        require(_storage.claims[idObj][_claimTopic] == 0, \\\"Claim already exists\\\");\\n        _storage.claims[idObj][_claimTopic] = _claimTopic;\\n        _storage.claimList[idObj].push(_claimTopic);\\n        emit ClaimAdded(msg.sender, idObj, _claimTopic, _claim);\\n    }\\n\\n    function setClaims(address _address, uint256[] memory _claims) external override isTrustedIssuerForClaimTopics(_claims) {\\n        IdentitySystemStorage.IdentitySystem storage _storage = IdentitySystemStorage.diamondStorage();\\n        address idObj = _getIdentityAddress(_address);\\n        require(_storage.getIdentityOwner(idObj) != address(0), \\\"Identity does not exist\\\");\\n        for (uint256 i = 0; i < _claims.length; i++) {\\n            require(_storage.claims[idObj][_claims[i]] == 0, \\\"Claim already exists\\\");\\n            for(uint256 j = 0; j < _storage.topicList.length; j++) {\\n                if (_storage.topicList[j] == _claims[i]) {\\n                    _storage.claims[idObj][_claims[i]] = _claims[i];\\n                    _storage.claimList[idObj].push(_claims[i]);\\n                    emit ClaimAdded(msg.sender, idObj, _claims[i], \\\"\\\");\\n                }\\n            }\\n        }\\n        emit ClaimsSet(msg.sender, idObj, _claims);\\n    }\\n\\n    function unsetClaims(address _address, uint256[] memory _claims) external override isTrustedIssuerForClaimTopics(_claims) {\\n        IdentitySystemStorage.IdentitySystem storage _storage = IdentitySystemStorage.diamondStorage();\\n        address idObj = _getIdentityAddress(_address);\\n        require(_storage.getIdentityOwner(idObj) != address(0), \\\"Identity does not exist\\\");\\n\\n        uint256[] storage claimList = _storage.claimList[idObj];\\n        uint256[] memory removedClaims = new uint256[](_claims.length);\\n        uint256 removedCount = 0;\\n\\n        for (uint256 i = 0; i < _claims.length; i++) {\\n            uint256 claimToRemove = _claims[i];\\n            for (uint256 j = 0; j < claimList.length; j++) {\\n                if (claimList[j] == claimToRemove) {\\n                    // Move the last element to the position of the element to be removed\\n                    claimList[j] = claimList[claimList.length - 1];\\n                    // Remove the last element\\n                    claimList.pop();\\n\\n                    // If you need to modify _storage.claims as well:\\n                    delete _storage.claims[idObj][claimToRemove];\\n\\n                    removedClaims[removedCount] = claimToRemove;\\n                    removedCount++;\\n\\n                    // Decrement j to recheck the current position, which now contains a new element\\n                    j--;\\n                    break;\\n                }\\n            }\\n        }\\n\\n        // Resize removedClaims array to actual number of removed claims\\n        assembly {\\n            mstore(removedClaims, removedCount)\\n        }\\n\\n        emit ClaimsRemoved(msg.sender, idObj, removedClaims);\\n    }\\n\\n    function removeClaim(address _address, uint256 _claimTopic) external override isTrustedIssuerForClaimTopic(_claimTopic) {\\n        IdentitySystemStorage.IdentitySystem storage _storage = IdentitySystemStorage.diamondStorage();\\n        address idObj = _getIdentityAddress(_address);\\n        require(_storage.getIdentityOwner(idObj) != address(0), \\\"Identity does not exist\\\");\\n        require(idObj != msg.sender, \\\"Cannot set claims for self\\\");\\n        \\n        uint256[] storage claimList = _storage.claimList[idObj];\\n        for (uint256 i = 0; i < claimList.length; i++) {\\n            if (claimList[i] == _claimTopic) {\\n                // Move the last element to the position of the element to be removed\\n                claimList[i] = claimList[claimList.length - 1];\\n                // Remove the last element\\n                claimList.pop();\\n                \\n                // If you need to modify _storage.claims as well:\\n                delete _storage.claims[idObj][_claimTopic];\\n                \\n                emit ClaimRemoved(msg.sender, idObj, _claimTopic);\\n                return;\\n            }\\n        }\\n        \\n        revert(\\\"Claim does not exist\\\");\\n    }\\n\\n    /// @notice does an identity exist\\n    /// @param _userAddress address of the identity user\\n    /// @return bool\\n    function contains(address _userAddress) external view override returns (bool) {\\n        IdentitySystemStorage.IdentitySystem storage _storage = IdentitySystemStorage.diamondStorage();\\n        return _storage._getIdentity(_userAddress) != address(0);\\n    }\\n\\n    function containsAddress(address _userAddress) external view returns (bool) {\\n        IdentitySystemStorage.IdentitySystem storage _storage = IdentitySystemStorage.diamondStorage();\\n        return _storage._getIdentity(_userAddress) != address(0);\\n    }\\n\\n    /// @notice is an identity verified\\n    /// @param _address address of the identity user or identity contract\\n    /// @return bool\\n    function isVerified(address _address) external view override returns (bool) {\\n        IdentitySystemStorage.IdentitySystem storage _storage = IdentitySystemStorage.diamondStorage();\\n        return _storage._getIdentity(_address) != address(0);\\n    }\\n\\n    /// @notice get the users of the registry\\n    /// @return array of addresses of the users\\n    function getRegistryUsers() external view override returns (address[] memory) {\\n        IdentitySystemStorage.IdentitySystem storage _storage = IdentitySystemStorage.diamondStorage();\\n        return _storage.identityOwners;\\n    }\\n\\n    /// @notice is the user a registry user\\n    /// @param _registryUser address of the registry user\\n    /// @return bool\\n    function isRegistryUser(address _registryUser) external view override returns (bool) {\\n        IdentitySystemStorage.IdentitySystem storage _storage = IdentitySystemStorage.diamondStorage();\\n        return _storage._getIdentity(_registryUser) != address(0);\\n    }\\n\\n    function getClaims(address _address) external view override returns (uint256[] memory) {\\n        IdentitySystemStorage.IdentitySystem storage _storage = IdentitySystemStorage.diamondStorage();\\n        address idObj = _getIdentityAddress(_address);\\n        return _storage.claimList[idObj];\\n    }\\n\\n    function getClaim(address _address, uint256 _claimTopic) external view override returns (uint256) {\\n        IdentitySystemStorage.IdentitySystem storage _storage = IdentitySystemStorage.diamondStorage();\\n        address idObj = _getIdentityAddress(_address);\\n        return _storage.claims[idObj][_claimTopic];\\n    }\\n\\n    function hasClaim(address _address, uint256 _claimTopic) external view override returns (bool) {\\n        IdentitySystemStorage.IdentitySystem storage _storage = IdentitySystemStorage.diamondStorage();\\n        address idObj = _getIdentityAddress(_address);\\n        for (uint256 i = 0; i < _storage.claimList[idObj].length; i++) {\\n            if (_storage.claimList[idObj][i] == _claimTopic) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n}\\n\",\"keccak256\":\"0x6c83fe5fa8f88eef3ef7d84dc5b1440798fec27321825356501f9cf2952cb15f\",\"license\":\"MIT\"},\"contracts/identity/IdentityStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IERC721A.sol\\\";\\nimport {TrustedIssuer} from \\\"../interfaces/ITrustedIssuersRegistry.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC721.sol\\\";\\nimport {IIdentity} from \\\"../interfaces/IIdentity.sol\\\";\\nimport {Claim} from \\\"../interfaces/IClaim.sol\\\";\\nimport \\\"../interfaces/IMarketplace.sol\\\";\\nimport {MultiSaleStorage} from \\\"../interfaces/IMultiSale.sol\\\";\\nimport \\\"../libraries/TradeDealLib.sol\\\";\\nimport \\\"../libraries/FeeDistributorLib.sol\\\"; // Add import for FeeDistributorLib\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nlibrary IdentitySystemStorage {\\n    using IdentitySystemStorage for IdentitySystemStorage.IdentitySystem;\\n    using Address for address;\\nbytes32 internal constant MULTISALE_STORAGE_POSITION =\\n        keccak256(\\\"diamond.nextblock.bitgem.app.MultiSaleStorage.storage\\\");\\n\\n    function multiSaleStorage()\\n        internal\\n        pure\\n        returns (MultiSaleStorage storage ds)\\n    {\\n        bytes32 position = MULTISALE_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    // CollateralStorage struct definition\\n    struct CollateralStorage {\\n        address nft;\\n        address invoicePool;\\n        address vabb;\\n        address usdcPool;\\n        address interest;\\n        uint256 interestRate;\\n        uint256 collateralToInterestRatio;\\n    }\\n\\n    error ApprovalCallerNotOwnerNorApproved();\\n    error ApprovalQueryForNonexistentToken();\\n    error ApproveToCaller();\\n    error ApprovalToCurrentOwner();\\n    error BalanceQueryForZeroAddress();\\n    error MintedQueryForZeroAddress();\\n    error BurnedQueryForZeroAddress();\\n    error AuxQueryForZeroAddress();\\n    error MintToZeroAddress();\\n    error MintZeroQuantity();\\n    error OwnerIndexOutOfBounds();\\n    error OwnerQueryForNonexistentToken();\\n    error TokenIndexOutOfBounds();\\n    error TransferCallerNotOwnerNorApproved();\\n    error TransferFromIncorrectOwner();\\n    error TransferToNonERC721ReceiverImplementer();\\n    error TransferToZeroAddress();\\n    error URIQueryForNonexistentToken();\\n\\n    struct IdentitySystem {\\n        // ERC721A storage\\n        ERC721AContract erc721Contract;\\n        // TrustedIssuer storage\\n        mapping(address => TrustedIssuer) trustedIssuers;\\n        address[] trustedIssuerAddresses;\\n        mapping(address => mapping(uint256 => bool)) trustedIssuerClaimTopics;\\n        mapping(address => uint256[]) trustedIssuerClaimTopicsList;\\n        mapping(uint256 => bool) topics;\\n        uint256[] topicList;\\n        // Identity storage\\n        mapping(address => address) identities;\\n        mapping(address => address) identityOwnersMap;\\n        address[] identityOwners;\\n        // Claim storage\\n        mapping(address => mapping(uint256 => uint256)) claims;\\n        mapping(address => uint256[]) claimList;\\n        // Claim storage\\n        mapping(uint256 => Claim) tokenClaims;\\n        Claim[] tokenClaimList;\\n        // ERC721Permissioned storage\\n        address delegatedMinter;\\n        mapping(uint256 => bool) frozen;\\n\\n        uint256 itemIds;\\n        uint256 itemsSold;\\n        mapping(uint256 => MarketItem) idToMarketItem;\\n        mapping(uint256 => bool) idToListed;\\n        MarketItem[] items;\\n\\n        // Merkle proof tracking for MultiSale\\n        mapping(bytes32 => bool) usedMerkleLeaves;\\n        \\n        // Collateral storage\\n        CollateralStorage collateralStorage;\\n        \\n        // Trade Deal storage\\n        TradeDealLib.TradeDealStorage tradeDealStorage;\\n\\n        // Fee Distributor storage\\n        FeeDistributorLib.FeeDistributorStorage feeDistributorStorage;\\n    }\\n\\n    bytes32 constant IDENTITY_SYSTEM_STORAGE_POSITION =\\n        keccak256(\\\"diamond.identity.system.storage\\\");\\n\\n    function diamondStorage()\\n        internal\\n        pure\\n        returns (IdentitySystemStorage.IdentitySystem storage ds)\\n    {\\n        bytes32 position = IDENTITY_SYSTEM_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    function _tokenExists(\\n        IdentitySystem storage self,\\n        uint256 _tokenId\\n    ) internal view returns (bool) {\\n        return self.erc721Contract._ownerships[_tokenId].addr != address(0);\\n    }\\n\\n    function _getIdentity(\\n        IdentitySystem storage self,\\n        address _userAddress\\n    ) internal view returns (address addr) {\\n        return self.identities[_userAddress];\\n    }\\n\\n    function getIdentityOwner(\\n        IdentitySystem storage self,\\n        address _identity\\n    ) internal view returns (address) {\\n        return self.identityOwnersMap[_identity];\\n    }\\n\\n    function isIdentityAddress(\\n        IdentitySystem storage self,\\n        address _identity\\n    ) internal view returns (bool) {\\n        return self.identityOwnersMap[_identity] != address(0);\\n    }\\n\\n    function isRegistered(\\n        IdentitySystem storage self,\\n        address _userAddress\\n    ) internal view returns (bool) {\\n        return self.identities[_userAddress] != address(0);\\n    }\\n\\n    function isIdentityOwner(\\n        IdentitySystem storage self,\\n        address _userAddress\\n    ) internal view returns (bool) {\\n        return\\n            self.identityOwnersMap[self.identities[_userAddress]] ==\\n            _userAddress;\\n    }\\n\\n    // trusted issuer\\n\\n    function isTrustedIssuer(\\n        IdentitySystem storage self,\\n        address _issuer\\n    ) internal view returns (bool) {\\n        return self.trustedIssuers[_issuer].claimIssuer != address(0);\\n    }\\n\\n    function addTrustedIssuer(\\n        IdentitySystem storage self,\\n        address _trustedIssuer,\\n        uint[] calldata _claimTopics\\n    ) internal {\\n        self.trustedIssuers[_trustedIssuer] = TrustedIssuer({\\n            claimIssuer: _trustedIssuer,\\n            claimTopics: _claimTopics\\n        });\\n        self.trustedIssuerAddresses.push(_trustedIssuer);\\n    }\\n\\n    function removeTrustedIssuer(\\n        IdentitySystem storage self,\\n        address _trustedIssuer\\n    ) internal {\\n        delete self.trustedIssuers[_trustedIssuer];\\n        for (uint256 i = 0; i < self.trustedIssuerAddresses.length; i++) {\\n            if (self.trustedIssuerAddresses[i] == _trustedIssuer) {\\n                self.trustedIssuerAddresses[i] = self.trustedIssuerAddresses[\\n                    self.trustedIssuerAddresses.length - 1\\n                ];\\n                self.trustedIssuerAddresses.pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n    // claim topics\\n\\n    function addClaimTopic(\\n        IdentitySystem storage self,\\n        uint256 _claimTopic\\n    ) internal {\\n        self.topics[_claimTopic] = true;\\n        self.topicList.push(_claimTopic);\\n    }\\n\\n    function removeClaimTopic(\\n        IdentitySystem storage self,\\n        uint256 _claimTopic\\n    ) internal {\\n        delete self.topics[_claimTopic];\\n        for (uint256 i = 0; i < self.topicList.length; i++) {\\n            if (self.topicList[i] == _claimTopic) {\\n                self.topicList[i] = self.topicList[self.topicList.length - 1];\\n                self.topicList.pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n    function getClaimTopics(\\n        IdentitySystem storage self\\n    ) internal view returns (uint256[] memory) {\\n        return self.topicList;\\n    }\\n\\n    function hasClaimTopic(\\n        IdentitySystem storage self,\\n        uint256 _claimTopic\\n    ) internal view returns (bool) {\\n        return self.topics[_claimTopic];\\n    }\\n\\n    // trusted issuer / claim topics\\n\\n    function updateIssuerClaimTopics(\\n        IdentitySystem storage self,\\n        address _trustedIssuer,\\n        uint[] calldata _claimTopics\\n    ) internal {\\n        self.trustedIssuers[_trustedIssuer].claimTopics = _claimTopics;\\n        for (\\n            uint256 i = 0;\\n            i < self.trustedIssuerClaimTopicsList[_trustedIssuer].length;\\n            i++\\n        ) {\\n            delete self.trustedIssuerClaimTopics[_trustedIssuer][\\n                self.trustedIssuerClaimTopicsList[_trustedIssuer][i]\\n            ];\\n        }\\n    }\\n\\n    function addTrustedIssuerClaimTopic(\\n        IdentitySystem storage self,\\n        address _issuer,\\n        uint _claimTopic\\n    ) internal {\\n        self.trustedIssuerClaimTopics[_issuer][_claimTopic] = true;\\n        self.trustedIssuerClaimTopicsList[_issuer].push(_claimTopic);\\n    }\\n\\n    function removeTrustedIssuerClaimTopic(\\n        IdentitySystem storage self,\\n        address _issuer,\\n        uint _claimTopic\\n    ) internal {\\n        delete self.trustedIssuerClaimTopics[_issuer][_claimTopic];\\n        for (\\n            uint256 i = 0;\\n            i < self.trustedIssuerClaimTopicsList[_issuer].length;\\n            i++\\n        ) {\\n            if (self.trustedIssuerClaimTopicsList[_issuer][i] == _claimTopic) {\\n                self.trustedIssuerClaimTopicsList[_issuer][i] = self\\n                    .trustedIssuerClaimTopicsList[_issuer][\\n                        self.trustedIssuerClaimTopicsList[_issuer].length - 1\\n                    ];\\n                self.trustedIssuerClaimTopicsList[_issuer].pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n    modifier isTrustedIssuerForClaimTopic(uint256 _claimTopic) {\\n        IdentitySystem storage _storage = IdentitySystemStorage.diamondStorage();\\n        require(_storage.isTrustedIssuer(msg.sender), \\\"Not a trusted issuer\\\");\\n        require(\\n            _storage.hasTrustedIssuerClaimTopic(msg.sender, _claimTopic),\\n            \\\"Issuer not authorized for claim topic\\\"\\n        );\\n        _;\\n    }\\n\\n    function hasTrustedIssuerClaimTopic(\\n        IdentitySystem storage self,\\n        address _issuer,\\n        uint256 _claimTopic\\n    ) internal view returns (bool) {\\n        if (!self.isTrustedIssuer(_issuer)) return false;\\n        uint256[] storage claimTopics = self\\n            .trustedIssuers[_issuer]\\n            .claimTopics;\\n        for (uint256 i = 0; i < claimTopics.length; i++) {\\n            if (claimTopics[i] == _claimTopic) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function addIdentity(\\n        IdentitySystem storage self,\\n        address _userAddress,\\n        address _identity\\n    ) internal {\\n        self.identities[_userAddress] = _identity;\\n        self.identityOwners.push(_userAddress);\\n        self.identityOwnersMap[_identity] = _userAddress;\\n    }\\n\\n    function removeIdentity(\\n        IdentitySystem storage self,\\n        address _userAddress\\n    ) internal {\\n        address identityAddress = self.identities[_userAddress]; // Capture identity address before deletion\\n        delete self.identities[_userAddress];\\n        for (uint256 i = 0; i < self.identityOwners.length; i++) {\\n            if (self.identityOwners[i] == _userAddress) {\\n                self.identityOwners[i] = self.identityOwners[\\n                    self.identityOwners.length - 1\\n                ];\\n                self.identityOwners.pop();\\n                self.identityOwnersMap[identityAddress] = address(0); // Use captured identityAddress\\n                break;\\n            }\\n        }\\n    }\\n\\n    function hasIdentity(\\n        IdentitySystem storage self,\\n        address _userAddress\\n    ) internal view returns (bool) {\\n        address identity = self.identities[_userAddress];\\n        return identity != address(0);\\n    }\\n\\n    function hasClaims(\\n        IdentitySystem storage self,\\n        address _userAddress\\n    ) internal view returns (bool) {\\n        return self.identities[_userAddress] != address(0);\\n    }\\n\\n    function isVerified(\\n        IdentitySystem storage self,\\n        address _userAddress\\n    ) internal view returns (bool) {\\n        return hasIdentity(self, _userAddress) && hasClaims(self, _userAddress);\\n    }\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(\\n        IdentitySystem storage self,\\n        address msgSender,\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data,\\n        bool safe\\n    ) internal {\\n        // Overflows are incredibly unrealistic.\\n        // balance or numberMinted overflow if current value of either + quantity > 1.8e19 (2**64) - 1\\n        // updatedIndex overflows if _currentIndex + quantity > 1.2e77 (2**256) - 1\\n        uint256 startTokenId = self.erc721Contract._currentIndex;\\n        if (to == address(0)) revert MintToZeroAddress();\\n        if (quantity == 0) revert MintZeroQuantity();\\n\\n        self._beforeTokenTransfer(address(0), to, startTokenId, true);\\n\\n        unchecked {\\n            self.erc721Contract._addressData[to].balance += uint64(quantity);\\n            self.erc721Contract._addressData[to].numberMinted += uint64(quantity);\\n\\n            self.erc721Contract._ownerships[startTokenId].addr = to;\\n            self.erc721Contract._ownerships[startTokenId].startTimestamp = uint64(\\n                block.timestamp\\n            );\\n\\n            uint256 updatedIndex = startTokenId;\\n\\n            // log quantity\\n\\n            for (uint256 i; i < quantity; i++) {\\n                emit Transfer(address(0), to, updatedIndex);\\n                if (\\n                    safe &&\\n                    !_checkOnERC721Received(\\n                        msgSender,\\n                        address(0),\\n                        to,\\n                        updatedIndex,\\n                        _data\\n                    )\\n                ) {\\n                    revert TransferToNonERC721ReceiverImplementer();\\n                }\\n                self.erc721Contract._currentIndex = updatedIndex + 1;\\n                updatedIndex++;\\n                self._addTokenToAllTokensEnumeration(updatedIndex); // Add this line\\n            }\\n        }\\n\\n        _afterTokenTransfer(self, address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(\\n        IdentitySystem storage self,\\n        address owner\\n    ) internal view returns (uint256) {\\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\\n        return uint256(self.erc721Contract._addressData[owner].balance);\\n    }\\n\\n    /**\\n     * Returns the number of tokens minted by `owner`.\\n     */\\n    function _numberMinted(\\n        IdentitySystem storage self,\\n        address owner\\n    ) internal view returns (uint256) {\\n        if (owner == address(0)) revert MintedQueryForZeroAddress();\\n        return uint256(self.erc721Contract._addressData[owner].numberMinted);\\n    }\\n\\n    /**\\n     * Returns the number of tokens burned by or on behalf of `owner`.\\n     */\\n    function _numberBurned(\\n        IdentitySystem storage self,\\n        address owner\\n    ) internal view returns (uint256) {\\n        if (owner == address(0)) revert BurnedQueryForZeroAddress();\\n        return uint256(self.erc721Contract._addressData[owner].numberBurned);\\n    }\\n\\n    /**\\n     * Returns the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\\n     */\\n    function _getAux(\\n        IdentitySystem storage self,\\n        address owner\\n    ) internal view returns (uint64) {\\n        if (owner == address(0)) revert AuxQueryForZeroAddress();\\n        return self.erc721Contract._addressData[owner].aux;\\n    }\\n\\n    /**\\n     * Sets the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\\n     * If there are multiple variables, please pack them into a uint64.\\n     */\\n    function _setAux(\\n        IdentitySystem storage self,\\n        address owner,\\n        uint64 aux\\n    ) internal {\\n        if (owner == address(0)) revert AuxQueryForZeroAddress();\\n        self.erc721Contract._addressData[owner].aux = aux;\\n    }\\n\\n    function ownershipOf(\\n        IdentitySystem storage self,\\n        uint256 tokenId\\n    ) internal view returns (TokenOwnership memory) {\\n        uint256 curr = tokenId;\\n        unchecked {\\n            if (curr < self.erc721Contract._currentIndex) {\\n                TokenOwnership memory ownership = self.erc721Contract._ownerships[curr];\\n                if (!ownership.burned) {\\n                    if (ownership.addr != address(0)) {\\n                        return ownership;\\n                    }\\n                    // Invariant:\\n                    // There will always be an ownership that has an address and is not burned\\n                    // before an ownership that does not have an address and is not burned.\\n                    // Hence, curr will not underflow.\\n                    while (true) {\\n                        curr--;\\n                        ownership = self.erc721Contract._ownerships[curr];\\n                        if (ownership.addr != address(0)) {\\n                            return ownership;\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        revert OwnerQueryForNonexistentToken();\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     */\\n    function _exists(\\n        IdentitySystem storage self,\\n        uint256 tokenId\\n    ) internal view returns (bool) {\\n        return\\n            tokenId < self.erc721Contract._currentIndex && !self.erc721Contract._ownerships[tokenId].burned;\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(\\n        IdentitySystem storage self,\\n        uint256 tokenId\\n    ) internal view returns (address) {\\n        if (!_exists(self, tokenId)) revert ApprovalQueryForNonexistentToken();\\n        return self.erc721Contract._tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(\\n        IdentitySystem storage self,\\n        address sender,\\n        address operator,\\n        bool approved\\n    ) internal {\\n        self.erc721Contract._operatorApprovals[sender][operator] = approved;\\n        emit ApprovalForAll(sender, operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(\\n        IdentitySystem storage self,\\n        address owner,\\n        address operator\\n    ) internal view returns (bool) {\\n        return self.erc721Contract._operatorApprovals[owner][operator];\\n    }\\n\\n    function currentIndex(\\n        IdentitySystem storage self\\n    ) internal view returns (uint256) {\\n        return self.erc721Contract._currentIndex;\\n    }\\n    \\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        IdentitySystem storage self,\\n        address msgSender,\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bool _force\\n    ) internal {\\n        TokenOwnership memory prevOwnership = self.ownershipOf(tokenId);\\n\\n        bool isApprovedOrOwner = (msgSender == prevOwnership.addr ||\\n            self.isApprovedForAll(prevOwnership.addr, msgSender) ||\\n            self.getApproved(tokenId) == msgSender);\\n\\n        if (!isApprovedOrOwner && !_force)\\n            revert TransferCallerNotOwnerNorApproved();\\n        if (prevOwnership.addr != from && !_force) revert TransferFromIncorrectOwner();\\n        if (to == address(0)) revert TransferToZeroAddress();\\n\\n        self._beforeTokenTransfer(from, to, tokenId, _force);\\n\\n        if (from == address(0)) {\\n            self._addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            self._removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            self._removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            self._addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n\\n        // Clear approvals from the previous owner\\n        self._approve(address(0), tokenId, prevOwnership.addr);\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\\n        unchecked {\\n            self.erc721Contract._addressData[from].balance -= 1;\\n            self.erc721Contract._addressData[to].balance += 1;\\n\\n            self.erc721Contract._ownerships[tokenId].addr = to;\\n            self.erc721Contract._ownerships[tokenId].startTimestamp = uint64(block.timestamp);\\n\\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\n            uint256 nextTokenId = tokenId + 1;\\n            if (self.erc721Contract._ownerships[nextTokenId].addr == address(0)) {\\n                // This will suffice for checking _exists(nextTokenId),\\n                // as a burned slot cannot contain the zero address.\\n                if (nextTokenId < self.erc721Contract._currentIndex) {\\n                    self.erc721Contract._ownerships[nextTokenId].addr = prevOwnership.addr;\\n                    self.erc721Contract._ownerships[nextTokenId].startTimestamp = prevOwnership\\n                        .startTimestamp;\\n                }\\n            }\\n        }\\n        \\n        emit Transfer(from, to, tokenId);\\n        _afterTokenTransfer(self, from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(IdentitySystem storage self, address from, uint256 tokenId) internal {\\n        self._beforeTokenTransfer(from, address(0), tokenId, true);\\n\\n        // Clear approvals from the previous owner\\n        _approve(self, address(0), tokenId, from);\\n\\n        self._removeTokenFromOwnerEnumeration(from, tokenId);\\n        self._removeTokenFromAllTokensEnumeration(tokenId);\\n\\n        unchecked {\\n            self.erc721Contract._addressData[from].balance -= 1;\\n            self.erc721Contract._addressData[from].numberBurned += 1;\\n\\n            // Keep track of who burned the token, and the timestamp of burning.\\n            self.erc721Contract._ownerships[tokenId].addr = from;\\n            self.erc721Contract._ownerships[tokenId].startTimestamp = uint64(block.timestamp);\\n            self.erc721Contract._ownerships[tokenId].burned = true;\\n\\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the burn initiator owns it.\\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\n            uint256 nextTokenId = tokenId + 1;\\n            if (self.erc721Contract._ownerships[nextTokenId].addr == address(0)) {\\n                // This will suffice for checking _exists(nextTokenId),\\n                // as a burned slot cannot contain the zero address.\\n                if (nextTokenId < self.erc721Contract._currentIndex) {\\n                    self.erc721Contract._ownerships[nextTokenId].addr = from;\\n                    self.erc721Contract._ownerships[nextTokenId].startTimestamp = self.erc721Contract._ownerships[tokenId].startTimestamp;\\n                }\\n            }\\n        }\\n        emit Transfer(from, address(0), tokenId);\\n        _afterTokenTransfer(self, from, address(0), tokenId, 1);\\n\\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\\n        unchecked {\\n            self.erc721Contract._burnCounter++;\\n        }\\n    }\\n\\n    function exists(IdentitySystem storage self, uint256 tokenId) internal view returns (bool) {\\n        return _exists(self, tokenId);\\n    }\\n\\n\\n    function setTokenClaimTopics(IdentitySystem storage self, uint256 tokenId, uint256[] memory claimTopics) internal {\\n        require(self.exists(tokenId), \\\"ERC721: token does not exist\\\");\\n        for (uint256 i = 0; i < claimTopics.length; i++) {\\n            self.tokenClaims[tokenId] = Claim({\\n                topic: claimTopics[i],\\n                scheme: 0,\\n                issuer: address(this),\\n                signature: \\\"\\\",\\n                data: \\\"\\\",\\n                uri: \\\"\\\"\\n            });\\n        }\\n    }\\n\\n    function getTokenClaimTopics(uint256 tokenId) public view returns (Claim[] memory) {\\n        IdentitySystemStorage.IdentitySystem storage identitySystem = IdentitySystemStorage.diamondStorage();\\n        require(identitySystem._exists(tokenId), \\\"ERC721: token does not exist\\\");\\n        Claim[] memory claimTopics = new Claim[](identitySystem.tokenClaimList.length);\\n        for (uint256 i = 0; i < identitySystem.tokenClaimList.length; i++) {\\n            claimTopics[i] = identitySystem.tokenClaims[tokenId];\\n        }\\n        return claimTopics;\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(\\n        IdentitySystem storage self,\\n        address to,\\n        uint256 tokenId,\\n        address owner\\n    ) internal {\\n        self.erc721Contract._tokenApprovals[tokenId] = to;\\n        emit Approval(owner, to, tokenId);\\n    }\\n\\n    function _ownerOf(\\n        IdentitySystem storage self,\\n        uint256 tokenId\\n    ) internal view returns (address) {\\n        return ownershipOf(self, tokenId).addr;\\n    }\\n\\n    function _isContract(\\n        address account\\n    ) internal view returns (bool) {\\n        // According to EIP-1052, an address is a contract if it has code.\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address msgSender,\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal returns (bool) {\\n        if (_isContract(to)) {\\n            try\\n                IERC721Receiver(to).onERC721Received(\\n                    msgSender,\\n                    from,\\n                    tokenId,\\n                    _data\\n                )\\n            returns (bytes4 retval) {\\n                return retval == IERC721Receiver(to).onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert TransferToNonERC721ReceiverImplementer();\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    function tokensOfOwner(\\n        IdentitySystem storage self,\\n        address owner\\n    ) internal view returns (uint256[] memory) {\\n        require(owner != address(0), \\\"IdentityStorage: owner query for zero address\\\");\\n        \\n        uint256 ownerTokenCount = IERC721(address(this)).balanceOf(owner);\\n        if (ownerTokenCount == 0) {\\n            // Return an empty array\\n            return new uint256[](0);\\n        }\\n        \\n        uint256[] memory tokens = new uint256[](ownerTokenCount);\\n        for (uint256 i = 0; i < ownerTokenCount; i++) {\\n            tokens[i] = self.erc721Contract._ownedTokens[owner][i];\\n        }\\n        \\n        return tokens;\\n    }\\n\\n    function tokenOfOwnerByIndex(\\n        IdentitySystem storage self,\\n        address owner, \\n        uint256 index) internal view returns (uint256) {\\n        require(index < IERC721(address(this)).balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return self.erc721Contract._ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply(\\n        IdentitySystem storage self\\n    ) internal view returns (uint256) {\\n        return self.erc721Contract._allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(\\n        IdentitySystem storage self,\\n        uint256 index\\n    ) internal view returns (uint256) {\\n        require(index < totalSupply(self), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return self.erc721Contract._allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(\\n        IdentitySystem storage self,\\n        address to, \\n        uint256 tokenId) internal {\\n        uint256 length = IERC721(address(this)).balanceOf(to);\\n        self.erc721Contract._ownedTokens[to][length] = tokenId;\\n        self.erc721Contract._ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(\\n        IdentitySystem storage self,\\n        uint256 tokenId) internal {\\n        self.erc721Contract._allTokensIndex[tokenId] = self.erc721Contract._allTokens.length + 1;\\n        self.erc721Contract._allTokens.push(tokenId);\\n    }\\n\\n    function _getIdentityAddress(IdentitySystem storage self, address _address) internal view returns (address) {\\n        address identityAddress = self._getIdentity(_address);\\n        return identityAddress != address(0) ? identityAddress : _address;\\n    }\\n\\n    function _hasClaim(IdentitySystem storage self, address _address, uint256 _claimTopic) internal view returns (bool) {\\n        address idObj = self._getIdentityAddress(_address);\\n        for (uint256 i = 0; i < self.claimList[idObj].length; i++) {\\n            if (self.claimList[idObj][i] == _claimTopic) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(\\n        IdentitySystem storage self,\\n        address from,\\n        uint256 tokenId\\n    ) internal {\\n        // address owner = IERC721(address(this)).ownerOf(tokenId);\\n        address thisAddress = address(this);\\n\\n\\n        // require(owner == thisAddress, \\\"ERC721: transfer of token that is not own\\\");\\n        uint256 lastTokenIndex = IERC721(thisAddress).balanceOf(from) - 1; \\n        uint256 tokenIndex = self.erc721Contract._ownedTokensIndex[tokenId];\\n\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = self.erc721Contract._ownedTokens[from][lastTokenIndex];\\n\\n            self.erc721Contract._ownedTokens[from][tokenIndex] = lastTokenId;\\n            self.erc721Contract._ownedTokensIndex[lastTokenId] = tokenIndex;\\n        }\\n\\n        delete self.erc721Contract._ownedTokensIndex[tokenId];\\n        delete self.erc721Contract._ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(\\n        IdentitySystem storage self,\\n        uint256 tokenId\\n    ) internal {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n        uint256 lastTokenIndex = self.erc721Contract._allTokens.length - 1;\\n        uint256 tokenIndex = self.erc721Contract._allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = self.erc721Contract._allTokens[lastTokenIndex];\\n\\n        self.erc721Contract._allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        self.erc721Contract._allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete self.erc721Contract._allTokensIndex[tokenId];\\n        self.erc721Contract._allTokens.pop();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\\n     * And also called before burning one token.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n\\n    function _beforeTokenTransfer(\\n        IdentitySystem storage self,\\n        address from,\\n        address to,\\n        uint256,\\n        bool force\\n    ) internal view {\\n        // Allow transfers from or to the contract itself without additional checks\\n        if(force) return;\\n\\n        bool hasCommonClaim = false;\\n        uint256 claimType = 1; // Start from claim type 1\\n\\n        while (!hasCommonClaim) {\\n            bool hasFromClaim = self._hasClaim(from, claimType) ||\\n                from == address(this);\\n            if (hasFromClaim && self._hasClaim(to, claimType)) {\\n                hasCommonClaim = true;\\n            } else {\\n                claimType++;\\n                if (claimType == 0) {\\n                    // Overflow, we've checked all possible claim types\\n                    break;\\n                }\\n            }\\n        }\\n\\n        require(\\n            hasCommonClaim,\\n            \\\"ERC721: sender and receiver do not have a common claim\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\\n     * minting.\\n     * And also called after one token has been burned.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` has been minted for `to`.\\n     * - When `to` is zero, `tokenId` has been burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _afterTokenTransfer(\\n        IdentitySystem storage self,\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal {}\\n}\\n\",\"keccak256\":\"0xf50b66d8939e5f8a880230069fbf66473febd2f7b5566201913a9fce3f5b2042\",\"license\":\"MIT\"},\"contracts/interfaces/IAttribute.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.6;\\r\\n\\r\\nenum AttributeType {\\r\\n    Unknown,\\r\\n    String ,\\r\\n    Bytes32,\\r\\n    Uint256,\\r\\n    Uint8,\\r\\n    Uint256Array,\\r\\n    Uint8Array\\r\\n}\\r\\n\\r\\nstruct Attribute {\\r\\n    string key;\\r\\n    AttributeType attributeType;\\r\\n    string value;\\r\\n}\\r\\n\\r\\n// attribute storage\\r\\nstruct AttributeContract {\\r\\n    mapping(uint256 => bool)  burnedIds;\\r\\n    mapping(uint256 => mapping(string => Attribute))  attributes;\\r\\n    mapping(uint256 => string[]) attributeKeys;\\r\\n    mapping(uint256 =>  mapping(string => uint256)) attributeKeysIndexes;\\r\\n}\\r\\n\\r\\n\\r\\n/// @notice a pool of tokens that users can deposit into and withdraw from\\r\\ninterface IAttribute {\\r\\n    /// @notice get an attribute for a tokenid keyed by string\\r\\n    function getAttribute(\\r\\n        uint256 id,\\r\\n        string memory key\\r\\n    ) external view returns (Attribute calldata _attrib);\\r\\n}\\r\\n\",\"keccak256\":\"0x120f4f33b8c5026e047bbff0e64c0316d5f4e2a0822ca49f40d01fba9e9a4aa4\",\"license\":\"MIT\"},\"contracts/interfaces/IClaim.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nstruct Claim {\\n    uint256 topic;\\n    uint256 scheme;\\n    address issuer;\\n    bytes signature;\\n    bytes data;\\n    string uri;\\n}\",\"keccak256\":\"0xb104f9f6208a657a595ec893c71f3393e192919b918f51ebd8727ecdffdaadc8\",\"license\":\"MIT\"},\"contracts/interfaces/IClaimIssuer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IIdentity.sol\\\";\\n\\nstruct Claim {\\n    uint256 topic;\\n    uint256 scheme;\\n    address issuer;\\n    bytes signature;\\n    bytes data;\\n    string uri;\\n    bool isRemoved;\\n}\\n\\ninterface IClaimIssuer is IIdentity {\\n\\n    event ClaimRevoked(bytes indexed signature);\\n\\n    function revokeClaim(bytes32 _claimId, address _identity) external returns(bool);\\n    function revokeClaimBySignature(bytes calldata signature) external;\\n    function isClaimRevoked(bytes calldata _sig) external view returns (bool);\\n    function isClaimValid(\\n        IIdentity _identity,\\n        uint256 claimTopic,\\n        bytes calldata sig,\\n        bytes calldata data)\\n    external view returns (bool);\\n    function getRecoveredAddress(bytes calldata sig, bytes32 dataHash) external pure returns (address);\\n    \\n}\",\"keccak256\":\"0xf94927c44289cafe7442ff3e69f6949f3f97ab784a27b0b5d79f3757da7f1dd8\",\"license\":\"MIT\"},\"contracts/interfaces/ICollateral.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ICollateral {\\n    function mint(address to, uint256 amount) external;\\n    function burn(address from, uint256 amount) external;\\n    function balanceOf(address account) external view returns (uint256);\\n    function totalSupply() external view returns (uint256);\\n    function transfer(address to, uint256 amount) external returns (bool);\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x8afcc7f0c7188519cb18758992c886817e4bd330bc30f887edb72258f080a079\",\"license\":\"MIT\"},\"contracts/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.6;\\r\\n\\r\\n/******************************************************************************\\\\\\r\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\r\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\r\\n/******************************************************************************/\\r\\n\\r\\ninterface IDiamondCut {\\r\\n    enum FacetCutAction {Add, Replace, Remove}\\r\\n    // Add=0, Replace=1, Remove=2\\r\\n\\r\\n    struct FacetCut {\\r\\n        address facetAddress;\\r\\n        FacetCutAction action;\\r\\n        bytes4[] functionSelectors;\\r\\n    }\\r\\n\\r\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\r\\n    ///         a function with delegatecall\\r\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\r\\n    /// @param _init The address of the contract or facet to execute _calldata\\r\\n    /// @param _calldata A function call, including function selector and arguments\\r\\n    ///                  _calldata is executed with delegatecall on _init\\r\\n    function diamondCut(\\r\\n        FacetCut[] calldata _diamondCut,\\r\\n        address _init,\\r\\n        bytes calldata _calldata\\r\\n    ) external;\\r\\n    \\r\\n    /// @notice Propose an upgrade to be executed after the timelock period\\r\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\r\\n    /// @param _init The address of the contract or facet to execute _calldata\\r\\n    /// @param _calldata A function call, including function selector and arguments\\r\\n    function proposeDiamondCut(\\r\\n        FacetCut[] calldata _diamondCut,\\r\\n        address _init,\\r\\n        bytes calldata _calldata\\r\\n    ) external;\\r\\n    \\r\\n    /// @notice Execute a previously proposed upgrade after the timelock period\\r\\n    function executeDiamondCut() external;\\r\\n    \\r\\n    /// @notice Cancel a proposed upgrade\\r\\n    function cancelDiamondCut() external;\\r\\n\\r\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\r\\n    event DiamondCutProposed(address indexed proposer, uint256 indexed proposalTime, uint256 executionTime);\\r\\n    event DiamondCutCancelled(address indexed canceller);\\r\\n}\\r\\n\",\"keccak256\":\"0x340a039f0dd63cf19bc669551feec28879457d8b741711ef3513168d620f11bc\",\"license\":\"MIT\"},\"contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\ninterface IERC165 {\\n    /// @notice Query if a contract implements an interface\\n    /// @param interfaceId The interface identifier, as specified in ERC-165\\n    /// @dev Interface identification is specified in ERC-165. This function\\n    ///  uses less than 30,000 gas.\\n    /// @return `true` if the contract implements `interfaceID` and\\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x65006dc04090531acd9805684a1f27252b8abb0c1990fcf0ba8db33f50791a0d\",\"license\":\"MIT\"},\"contracts/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\n/// @title ERC-173 Contract Ownership Standard\\n///  Note: the ERC-165 identifier for this interface is 0x7f5828d0\\n/* is ERC165 */\\ninterface IERC173 {\\n    /// @dev This emits when ownership of a contract changes.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Get the address of the owner\\n    /// @return owner_ The address of the owner.\\n    function owner() external view returns (address owner_);\\n\\n    /// @notice Set the address of the new owner of the contract\\n    /// @dev Set _newOwner to address(0) to renounce any ownership.\\n    /// @param _newOwner The address of the new owner of the contract\\n    function transferOwnership(address _newOwner) external;\\n}\\n\",\"keccak256\":\"0x84fe28f479bf96f1819514dd8493ae15955eda0dbabcbb5f24c3c935075a31d4\",\"license\":\"MIT\"},\"contracts/interfaces/IERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\n/* solhint-disable indent */\\n\\n// Compiler will pack this into a single 256bit word.\\nstruct TokenOwnership {\\n    address addr; // The address of the owner.\\n    uint64 startTimestamp; // Keeps track of the start time of ownership with minimal overhead for tokenomics.\\n    bool burned; // Whether the token has been burned.\\n}\\n\\n// Compiler will pack this into a single 256bit word.\\nstruct AddressData {\\n    \\n    uint64 balance; // Realistically, 2**64-1 is more than enough.\\n    uint64 numberMinted; // Keeps track of mint count with minimal overhead for tokenomics.\\n    uint64 numberBurned; // Keeps track of burn count with minimal overhead for tokenomics.\\n    // For miscellaneous variable(s) pertaining to the address\\n    // (e.g. number of whitelist mint slots used).\\n    // If there are multiple variables, please pack them into a uint64.\\n    uint64 aux;\\n}\\n\\nstruct ERC721AContract {\\n    // The tokenId of the next token to be minted.\\n    uint256 _currentIndex;\\n\\n    // The number of tokens burned.\\n    uint256 _burnCounter;\\n\\n    // Token name\\n    string _name;\\n\\n    // Token symbol\\n    string _symbol;\\n\\n    // the base uri\\n    string __uri;\\n\\n    // Mapping from token ID to ownership details\\n    // An empty struct value does not necessarily mean the token is unowned. See ownershipOf implementation for details.\\n    mapping(uint256 => TokenOwnership) _ownerships;\\n\\n    // Mapping owner address to address data\\n    mapping(address => AddressData) _addressData;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) _operatorApprovals;\\n    \\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) _allTokensIndex;\\n}\\n\\n/// @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\nevent Approval(\\n    address indexed owner,\\n    address indexed approved,\\n    uint256 indexed tokenId\\n);\\n\\n/// @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\nevent ApprovalForAll(\\n    address indexed owner,\\n    address indexed operator,\\n    bool approved\\n);\\n\\n/**\\n * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n */\\nevent Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\",\"keccak256\":\"0x440b25b3f001e44dd0effadc01c479e08957c9f432900aea0f6637dea8fb8129\",\"license\":\"MIT\"},\"contracts/interfaces/IERC721Permissioned.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\ninterface IERC721Permissioned {\\n\\n    event TransferForced(address indexed from, address indexed to, uint256 indexed tokenId);\\n    event DelegatedMinterSet(address indexed newDelegatedMinter);\\n    event Mint(address indexed to, uint256 indexed tokenId);\\n    event Burn(address indexed from, uint256 indexed tokenId);\\n    event Freeze(address indexed from, uint256 indexed tokenId);\\n    event FreezeBatch(address indexed from, uint256[] tokenIds);\\n    event Release(address indexed from, uint256 indexed tokenId);\\n\\n    // force a transfer from the user to the to address irrepective of registry\\n    // TODO: Does this mean that the transfer will go even if both addresses aren't\\n    //      registered? If so, this is a security issue.\\n    function forcedTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _amount,\\n        bytes calldata _data\\n    ) external returns (bool);\\n\\n    function setDelegatedMinter(address _newDelegatedMinter) external returns (bool);\\n    function delegatedMinter() external view returns (address);\\n\\n    function mint(address _to, bytes calldata data) external returns (uint256);\\n    function burn(uint256 _tokenId) external returns (bool);\\n\\n    function freeze(uint256 tokenID) external;\\n    function release(uint256 tokenID) external;\\n\\n}\\n\",\"keccak256\":\"0xb3f9c69ddfc01e8fb43822dbab1c213a7719ae09f1edc0bbdd5def2f85dc469d\",\"license\":\"MIT\"},\"contracts/interfaces/IERC734.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport { IERC165 } from \\\"./IERC165.sol\\\";\\n\\ninterface IERC734 is IERC165 {\\n    // events\\n    event KeyAdded(bytes32 indexed key, uint256 indexed purpose, uint256 indexed keyType);\\n    event KeyRemoved(bytes32 indexed key, uint256 indexed purpose, uint256 indexed keyType);\\n    event ExecutionRequested(\\n        uint256 indexed executionId,\\n        address indexed to,\\n        uint256 indexed value,\\n        bytes data\\n    );\\n    event Executed(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\\n    event ExecutionFailed(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\\n    event Approved(uint256 indexed executionId, bool approved);\\n\\n    // functions\\n    // setters\\n    function addKey(bytes32 _key, uint256 _purpose, uint256 _keyType) external;\\n    function removeKey(bytes32 _key, uint256 _purpose) external;\\n    function approve(uint256 _id, bool _approve) external;\\n\\n    // getters\\n    function getKey(bytes32 _key) external view returns(uint256[] memory purposes, uint256 keyType, bytes32 key);\\n    function getKeyPurposes(bytes32 _key) external view returns(uint256[] memory);\\n    function getKeysByPurpose(uint256 _purpose) external view returns(bytes32[] memory);\\n    function getExecution(uint256 _id) external view returns(address to, uint256 value, bytes memory data, bool approved, uint256 executionType);\\n}\\n\",\"keccak256\":\"0xa1bbf071037ac2d697a9134e90ac01a4ca93b206d15283182d8d01f7edda46c0\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IERC735.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\ninterface IERC735 {\\n    event ClaimRequested(uint256 indexed claimRequestId, uint256 indexed topic, uint256 scheme, address indexed issuer, bytes signature, bytes data, string uri);\\n    event ClaimAdded(bytes32 indexed claimId, uint256 indexed topic, uint256 scheme, address indexed issuer, bytes signature, bytes data, string uri);\\n    event ClaimRemoved(bytes32 indexed claimId, uint256 indexed topic, uint256 scheme, address indexed issuer, bytes signature, bytes data, string uri);\\n    event ClaimChanged(bytes32 indexed claimId, uint256 indexed topic, uint256 scheme, address indexed issuer, bytes signature, bytes data, string uri);\\n\\n    function getClaim(bytes32 _claimId) external returns(uint256 topic, uint256 scheme, address issuer, bytes memory signature, bytes memory data, string memory uri);\\n    function getClaimIdsByTopic(uint256 _topic) external returns(bytes32[] memory claimIds);\\n    function addClaim(\\n        uint256 _topic, \\n        uint256 _scheme, \\n        address _issuer, \\n        bytes memory _signature, \\n        bytes memory _data, \\n        string memory _uri) external returns (uint256 claimRequestId);\\n    function changeClaim(bytes32 _claimId, uint256 _topic, uint256 _scheme, address _issuer, bytes memory _signature, bytes memory _data, string memory _uri) external returns (bool success);\\n    function removeClaim(bytes32 _claimId) external returns (bool success);\\n}\\n\\n/*\\nHow IdentityRegistry works:\\n\\n1. User creates an Identity contract\\n2. User calls IdentityRegistry.addIdentity(address _identity, IIdentity identityData)\\n3. IdentityRegistry emits IdentityAdded(address indexed _address, IIdentity identity)\\n4. IdentityRegistry emits ClaimAdded(address indexed identity, uint256 indexed claimTopic, bytes claim)\\n5. IdentityRegistry emits WalletLinked(address indexed walletAddress, bytes32 indexed onchainID)\\n\\n*/\",\"keccak256\":\"0xd9696a4c45abd2c8e0cc7cd8f02bd18612d0dcb0c573c928ab225de624c01d92\",\"license\":\"MIT\"},\"contracts/interfaces/IFeeDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IFeeDistributor\\n * @dev Interface for a fee distribution system.\\n */\\ninterface IFeeDistributor {\\n    /**\\n     * @notice Sets the addresses that will receive fees and their corresponding weights.\\n     * @dev Weights determine the proportion of fees each receiver gets.\\n     * @param _feeReceivers Array of addresses to receive fees.\\n     * @param _feeWeights Array of weights corresponding to each receiver. Must sum to a specific value (e.g., 10000 for basis points).\\n     */\\n    function setFeeReceivers(\\n        address[] calldata _feeReceivers,\\n        uint256[] calldata _feeWeights\\n    ) external;\\n\\n    /**\\n     * @notice Gets the current fee receivers and their weights.\\n     * @return feeReceivers Array of addresses currently set to receive fees.\\n     * @return feeWeights Array of weights corresponding to each receiver.\\n     */\\n    function getFeeReceivers()\\n        external\\n        view\\n        returns (\\n            address[] memory feeReceivers,\\n            uint256[] memory feeWeights\\n        );\\n\\n    /**\\n     * @notice Calculates the adjusted principal amount and individual fee amounts based on the total principal.\\n     * @dev This function is view-only and does not perform any state changes or transfers.\\n     * @param principalAmount The total amount before fee deduction.\\n     * @return adjustedAmount The principal amount remaining after deducting total fees.\\n     * @return feeAmounts Array of individual fee amounts calculated for each receiver.\\n     */\\n    function calculateAmounts(uint256 principalAmount) \\n        external\\n        view\\n        returns (\\n            uint256 adjustedAmount,\\n            uint256[] memory feeAmounts\\n        );\\n\\n    /**\\n     * @notice Distributes a principal amount, sending calculated fees to receivers and the adjusted amount to the principal receiver.\\n     * @dev Requires the contract to hold sufficient funds (e.g., USDC) to perform the transfers.\\n     * @param principalAmountReceiver The address to receive the adjusted principal amount.\\n     * @param _principalAmount The total amount to be distributed.\\n     * @return adjustedAmountReceiver The address that received the adjusted principal amount.\\n     * @return adjustedAmount The adjusted principal amount transferred.\\n     * @return feeReceivers The addresses that received the fee amounts.\\n     * @return feeAmounts The individual fee amounts transferred.\\n     */\\n    function distributeAmounts(\\n        address principalAmountReceiver,\\n        uint256 _principalAmount\\n    ) external returns (\\n        address adjustedAmountReceiver,\\n        uint256 adjustedAmount,\\n        address[] memory feeReceivers,\\n        uint256[] memory feeAmounts\\n    );\\n\\n    /**\\n     * @dev Emitted when the fee receivers and weights are updated.\\n     * @param feeReceivers The new array of fee receiver addresses.\\n     * @param feeWeights The new array of corresponding fee weights.\\n     */\\n    event FeeReceiversSet(\\n        address[] feeReceivers,\\n        uint256[] feeWeights\\n    );\\n\\n    /**\\n     * @dev Emitted when principal and fee amounts are successfully distributed.\\n     * @param principalAmountReceiver The address that received the adjusted principal amount.\\n     * @param principalAmount The original principal amount before fee deduction.\\n     * @param adjustedAmountReceiver The address that received the adjusted principal amount (same as principalAmountReceiver).\\n     * @param adjustedAmount The adjusted principal amount transferred.\\n     * @param feeReceivers The addresses that received the fee amounts.\\n     * @param feeAmounts The individual fee amounts transferred.\\n     */\\n    event AmountsDistributed(\\n        address principalAmountReceiver,\\n        uint256 principalAmount,\\n        address adjustedAmountReceiver,\\n        uint256 adjustedAmount,\\n        address[] feeReceivers,\\n        uint256[] feeAmounts\\n    );\\n\\n    /**\\n     * @dev Emitted when the Fee Distributor is initialized.\\n     * @param distributionToken The address of the ERC20 token set for distribution.\\n     * @param totalWeightBasis The basis used for calculating fee weights (e.g., 10000).\\n     */\\n    event FeeDistributorInitialized(\\n        address indexed distributionToken,\\n        uint256 totalWeightBasis\\n    );\\n}\",\"keccak256\":\"0x39f54a07e1e1a958b94e58c96b1bd287f3b7bedf40f310b1c1bd5e678297524e\",\"license\":\"MIT\"},\"contracts/interfaces/IIdentity.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IERC734 } from \\\"./IERC734.sol\\\";\\nimport { IERC735 } from \\\"./IERC735.sol\\\";\\n\\ninterface IIdentity is IERC734, IERC735 {\\n    function isVerified() external view returns (bool);\\n    function getClaimTopics() external view returns (uint256[] memory);\\n}\",\"keccak256\":\"0x3441179ea9b419fccd103fa16dad25300acb771897159f124aeb816d93552044\",\"license\":\"MIT\"},\"contracts/interfaces/IIdentityRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport { IIdentity } from \\\"./IIdentity.sol\\\";\\n\\ninterface IIdentityRegistry {\\n    // events\\n    event IdentityAdded(address trustedIssuer, address indexed _address, IIdentity identity);\\n    event IdentityRemoved(address trustedIssuer, address indexed _address, IIdentity identity);\\n    event IdentityCountryUpdated(address trustedIssuer, address indexed identity, uint16 indexed country);\\n\\n    event ClaimAdded(address trustedIssuer, address indexed identity, uint256 indexed claimTopic, bytes claim);\\n    event ClaimsSet(address trustedIssuer, address indexed identity, uint256[] claims);\\n    event ClaimsRemoved(address trustedIssuer, address indexed identity, uint256[] claimTopics);\\n    event ClaimRemoved(address trustedIssuer, address indexed identity, uint256 indexed claimTopic);\\n    event WalletLinked(address trustedIssuer, address indexed walletAddress, bytes32 indexed onchainID);\\n    event WalletUnlinked(address trustedIssuer, address indexed walletAddress, bytes32 indexed onchainID);\\n\\n    // functions\\n    function addIdentity(address _identity, IIdentity identityData) external;\\n    function batchAddIdentity(address[] calldata _identities, IIdentity[] calldata identityDatas) external;\\n    function removeIdentity(address _identity) external;\\n    function addClaim(address _identity, uint256 _claimTopic, bytes calldata _claim) external;\\n    function setClaims(address _identity, uint256[] memory _claims) external;\\n    function unsetClaims(address _identity, uint256[] memory _claims) external;\\n    function removeClaim(address _identity, uint256 _claimTopic) external;\\n\\n    // registry consultation\\n    function contains(address _userAddress) external view returns (bool);\\n    function isVerified(address _userAddress) external view returns (bool);\\n    function identity(address _userAddress) external view returns (address);\\n\\n    // getters\\n    function getRegistryUsers() external view returns (address[] memory);\\n    function isRegistryUser(address _registryUser) external view returns(bool);\\n    function getClaims(address _registryUser) external view returns(uint256[] memory);\\n    function getClaim(address _registryUser, uint256 _claimTopic) external view returns(uint256);\\n    function hasClaim(address _registryUser, uint256 _claimTopic) external view returns(bool);\\n}\\n\",\"keccak256\":\"0xd795c1adc57fa1011dab07c73bbcad0b30e69da0f72ff91c53b31dbc53ee10df\",\"license\":\"MIT\"},\"contracts/interfaces/IInterest.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IInterest {\\n    function mint(address to, uint256 amount) external;\\n    function burn(address from, uint256 amount) external;\\n    function balanceOf(address account) external view returns (uint256);\\n    function totalSupply() external view returns (uint256);\\n    function transfer(address to, uint256 amount) external returns (bool);\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n}\",\"keccak256\":\"0xce6ebdd709be14678830dee979477aa31a8979db931234af2a0f003fd5939e78\",\"license\":\"MIT\"},\"contracts/interfaces/IMarketplace.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Structure defining a fee receiver for marketplace sales\\n * @param receiver The address that will receive the fee\\n * @param sharePerMillion The fee share in parts per million (e.g., 10,000 = 1%)\\n */\\nstruct FeeReceiver {\\n    address payable receiver;\\n    uint256 sharePerMillion;\\n}\\n\\nstruct MarketItem {\\n    address nftContract;\\n    uint256 tokenId;\\n    address seller;\\n    address owner;\\n    uint256 price;\\n    bool sold;\\n    address receiver;\\n    address paymentToken;\\n}\\n\\ninterface IMarketplace {\\n\\n    event Bids(uint256 indexed itemId, address bidder, uint256 amount);\\n    event Sales(address indexed tokenAddress, uint256 indexed tokenId, address indexed owner);\\n\\n    event Listings(\\n        address indexed nftContract,\\n        uint256 indexed tokenId,\\n        address seller,\\n        address receiver,\\n        address owner,\\n        uint256 price,\\n        bool sold,\\n        address paymentToken\\n    );\\n    event Delisted(uint256 indexed itemId);\\n\\n    function listItem(\\n        address nftContract,\\n        address payable receiver,\\n        uint256 tokenId,\\n        uint256 price,\\n        bool transferNFT,\\n        address paymentToken\\n    ) external payable;\\n\\n    function delistItem(address nftContract, uint256 itemId) external;\\n\\n    function purchaseItem(address nftContract, uint256 itemId) external payable;\\n\\n    function fetchItems() external view returns (MarketItem[] memory);\\n\\n    function fetchItem(address nftContract, uint256 tokenId) external view returns (MarketItem memory);\\n\\n    function getMarketplaceFeeReceivers() external view returns (FeeReceiver[] memory);\\n}\\n\",\"keccak256\":\"0xb28f5b53929ab41630e8f9447f98e1b8f60d488b13f8b1605beb2a0c9874dd4c\",\"license\":\"MIT\"},\"contracts/interfaces/IMultiSale.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { TokenType } from \\\"./IToken.sol\\\";\\nimport { VariablePriceContract } from \\\"./IVariablePrice.sol\\\";\\nimport { Attribute } from \\\"./IAttribute.sol\\\";\\n\\n/// @Nnotice the payment type for the token\\nenum PaymentType {\\n    Ether,\\n    ERC20\\n}\\n\\n/// @notice the multisale purchase\\nstruct MultiSalePurchase {\\n    uint256 multiSaleId;\\n    address purchaser;\\n    address receiver;\\n    uint256 quantity;\\n}\\n    \\n/// @notice the merkle proof for the token sale\\nstruct MultiSaleProof {\\n    uint256 leaf;\\n    uint256 total;\\n    bytes32[] merkleProof;\\n    bytes data;\\n}\\n\\nenum PaymentMethod {\\n    Native, // Payment with the native currency (e.g., ETH)\\n    ERC20 // Payment with an ERC20 token\\n}\\n\\n/// @notice the settings for the token sale,\\nstruct MultiSaleSettings {\\n\\n    TokenType tokenType; // the type of token being sold\\n    address token; // the token being sold\\n    uint256 tokenHash; // the token hash being sold. set to 0 to autocreate hash\\n\\n    uint256 whitelistHash; // the whitelist hash. set to 0 for owhitelist\\n    bool whitelistOnly; // if true, only whitelisted addresses can purchase\\n\\n    PaymentMethod paymentMethod; // New field to indicate payment method\\n    address paymentToken; // New field to store the ERC20 token address for payments\\n\\n    // owner and payee\\n    address owner; // the owner of the contract\\n    address payee; // the payee of the co ntract\\n\\n    string symbol; // the symbol of the token\\n    string name; // the name of the token\\n    string description; // the description of the token\\n\\n    // open state\\n    bool openState; // open or closed\\n    uint256 startTime; // block number when the sale starts\\n    uint256 endTime; // block number when the sale ends\\n\\n    // quantitiesp\\n    uint256 maxQuantity; // max number of tokens that can be sold\\n    uint256 maxQuantityPerSale; // max number of tokens that can be sold per sale\\n    uint256 minQuantityPerSale; // min number of tokens that can be sold per sale\\n    uint256 maxQuantityPerAccount; // max number of tokens that can be sold per account\\n\\n    PaymentType paymentType; // the type of payment that is being used\\n    address tokenAddress; // the address of the payment token, if payment type is TOKEN\\n\\n    uint256 nextSaleId; // the next sale id\\n    VariablePriceContract price; // the variable prices\\n\\n}\\n\\n/// @notice the multi sale contract\\nstruct MultiSaleContract {\\n    MultiSaleSettings settings;\\n\\n    uint256 nonce;\\n    uint256 totalPurchased;\\n        \\n    mapping(address => uint256) purchased;\\n    mapping(uint256 => uint256) _redeemedData;\\n    mapping(address => uint256) _redeemedDataQuantities;\\n    mapping(address => uint256) _totalDataQuantities;\\n    mapping(address => uint256) _accountQuantities;\\n}\\n\\n/// @notice the multi sale storage\\nstruct MultiSaleStorage {\\n    // the nonce\\n    uint256 tsnonce;\\n    mapping(uint256 => MultiSaleContract) _tokenSales; // token sale settings\\n    uint256[] _tokenSaleIds;\\n}\\n\\n\\ninterface IMultiSale {\\n\\n    // @notice emitted when a token sale is created\\n    event MultiSaleCreated(uint256 indexed tokenSaleId, MultiSaleSettings settings);\\n\\n    /// @notice emitted when a token is opened\\n    event MultiSaleOpen (uint256 indexed tokenSaleId, MultiSaleSettings tokenSale);\\n\\n    /// @notice emitted when a token is opened\\n    event MultiSaleClosed (uint256 indexed tokenSaleId);\\n\\n    /// @notice emitted when a token is opened\\n    event MultiSaleSold (uint256 indexed tokenSaleId, address indexed purchaser, uint256[] tokenIds, bytes data);\\n\\n    // token settings were updated\\n    event MultiSaleUpdated (uint256 indexed tokenSaleId, MultiSaleSettings tokenSale );\\n\\n}\\n\",\"keccak256\":\"0xeb1a19c763e9231081622d432eb5ee0e44f5e233b1c1b796d2be5830311553d5\",\"license\":\"MIT\"},\"contracts/interfaces/IToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\n/// @notice the definition for a token.\\r\\nstruct TokenDefinition {\\r\\n    address token;\\r\\n    string name;\\r\\n    string symbol;\\r\\n    string description;\\r\\n    uint256 totalSupply;\\r\\n    string imageName;\\r\\n    string[] imagePalette;\\r\\n    string externalUrl;\\r\\n}\\r\\n\\r\\nenum TokenType {\\r\\n    ERC20,\\r\\n    ERC721,\\r\\n    ERC1155\\r\\n}\",\"keccak256\":\"0x994fc2b4019b0b7faf4fe5cd7e39934be73edb915c7205e3285c58cd4db3516b\",\"license\":\"MIT\"},\"contracts/interfaces/ITrustedIssuersRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IClaimIssuer } from \\\"./IClaimIssuer.sol\\\";\\n\\nstruct TrustedIssuer {\\n    address claimIssuer;\\n    uint[] claimTopics;\\n}\\n\\ninterface ITrustedIssuersRegistry {\\n\\n    // events\\n    event TrustedIssuerAdded(address indexed trustedIssuer, uint[] claimTopics);\\n    event TrustedIssuerRemoved(address indexed trustedIssuer);\\n    event ClaimTopicsUpdated(address indexed trustedIssuer, uint[] claimTopics);\\n\\n    // functions\\n    // setters\\n    function addTrustedIssuer(address _trustedIssuer, uint[] calldata _claimTopics) external;\\n    function removeTrustedIssuer(address _trustedIssuer) external;\\n    function updateIssuerClaimTopics(address _trustedIssuer, uint[] calldata _claimTopics) external;\\n\\n    // getters\\n    function getTrustedIssuer(address issuerAddress) external view returns (TrustedIssuer memory);\\n    function getTrustedIssuers() external view returns (TrustedIssuer[] memory);\\n    function isTrustedIssuer(address _issuer) external view returns(bool);\\n    function getTrustedIssuerClaimTopics(address _trustedIssuer) external view returns(uint[] memory);\\n    function hasTrustedIssuerClaimTopic(address _issuer, uint _claimTopic) external view returns(bool);\\n\\n}\",\"keccak256\":\"0xe614225074d3e906995b5730a4d70e0a97aeba0140ab4391e1e5968e8dca7a5d\",\"license\":\"MIT\"},\"contracts/interfaces/IUSDCPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IUSDCPool {\\n    function deposit(uint256 amount) external;\\n    function withdraw(uint256 amount) external;\\n    function getBalance() external view returns (uint256);\\n    function distributeInterest() external;\\n}\",\"keccak256\":\"0x3d9b699c7f3efbfc17865e076d0cab7a65243384876bda78cf19595256623b0c\",\"license\":\"MIT\"},\"contracts/interfaces/IVariablePrice.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\n\\n/// @notice DIctates how the price of the token is increased post every sale\\nenum PriceModifier {\\n    None,\\n    Fixed,\\n    Exponential,\\n    InverseLog\\n}\\n\\nstruct VariablePriceContract {\\n    // the price of the token\\n    uint256 price;\\n        // how the price is modified\\n    PriceModifier priceModifier;\\n    // only used if priceModifier is EXPONENTIAL or INVERSELOG or FIXED\\n    uint256 priceModifierFactor;\\n    // max price for the token\\n    uint256 maxPrice;\\n}\\n\\nstruct VariablePriceStorage {\\n    // the price of the token\\n    VariablePriceContract variablePrices;\\n}\\n\\n/// @notice common struct definitions for tokens\\ninterface IVariablePrice {\\n    /// @notice get the increased price of the token\\n    function getIncreasedPrice() external view returns (uint256);\\n\\n    /// @notice get the increased price of the token\\n    function getTokenPrice() external view returns (VariablePriceContract memory);\\n}\\n\",\"keccak256\":\"0x2adc5e468273b7c73536ee642f8be345fb3a1f9f713b3370d7d283a0d28d2b7d\",\"license\":\"MIT\"},\"contracts/libraries/AttributeLib.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC721.sol\\\";\\n\\nimport \\\"../interfaces/IAttribute.sol\\\";\\n\\nstruct AttributeStorage {\\n    AttributeContract attributes;\\n}\\n\\nlibrary AttributeLib {\\n    event AttributeSet(address indexed tokenAddress, uint256 tokenId, Attribute attribute);\\n    event AttributeRemoved(address indexed tokenAddress, uint256 tokenId, string attributeKey);\\n\\n    bytes32 internal constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.nextblock.bitgem.app.AttributeStorage.storage\\\");\\n\\n    function attributeStorage() internal pure returns (AttributeStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    /// @notice set an attribute for a tokenid keyed by string\\n    function _getAttribute(\\n        AttributeContract storage self,\\n        uint256 tokenId,\\n        string memory key\\n    ) internal view returns (Attribute memory) {\\n        require(self.burnedIds[tokenId] == false, \\\"Token has been burned\\\");\\n        return self.attributes[tokenId][key];\\n    }\\n\\n    /// @notice get a list of keys of attributes assigned to this tokenid\\n    function _getAttributeValues(\\n        uint256 id\\n    ) internal view returns (string[] memory) {\\n        AttributeContract storage ct = AttributeLib.attributeStorage().attributes;\\n        string[] memory keys = ct.attributeKeys[id];\\n        string[] memory values = new string[](keys.length);\\n        uint256 keysLength = keys.length;\\n        for (uint256 i = 0; i < keysLength; i++) {\\n            values[i] = ct.attributes[id][keys[i]].value;\\n        }\\n        return values;\\n    }\\n    \\n    /// @notice set an attribute to a tokenid keyed by string\\n    function _setAttribute(\\n        AttributeContract storage self,\\n        uint256 tokenId,\\n        Attribute memory attribute\\n    ) internal {\\n        require(self.burnedIds[tokenId] == false, \\\"Token has been burned\\\");\\n        if (self.attributeKeysIndexes[tokenId][attribute.key] == 0 \\n            && bytes(self.attributes[tokenId][attribute.key].value).length == 0) {\\n            self.attributeKeys[tokenId].push(attribute.key);\\n            self.attributeKeysIndexes[tokenId][attribute.key] = self.attributeKeys[tokenId].length - 1;\\n        }\\n        self.attributes[tokenId][attribute.key] = attribute;\\n    }\\n    \\n    /// @notice set multiple  attributes for the token\\n    function _setAttributes(\\n        AttributeContract storage self,\\n        uint256 tokenId, \\n        Attribute[] memory _attributes)\\n        internal\\n    {\\n        require(self.burnedIds[tokenId] == false, \\\"Token has been burned\\\");\\n        uint256 attributesLength = _attributes.length;\\n        for (uint256 i = 0; i < attributesLength; i++) {\\n            _setAttribute(self, tokenId, _attributes[i]);\\n        }\\n    }\\n\\n    /// @notice get a list of keys of attributes assigned to this tokenid\\n    function _getAttributeKeys(\\n        AttributeContract storage self,\\n        uint256 tokenId\\n    ) internal view returns (string[] memory) {\\n        require(self.burnedIds[tokenId] == false, \\\"Token has been burned\\\");\\n        return self.attributeKeys[tokenId];\\n    }\\n\\n    /// @notice remove the attribute for a tokenid keyed by string\\n    function _removeAttribute(\\n        AttributeContract storage self,\\n        uint256 tokenId,\\n        string memory key\\n    ) internal {\\n        require(self.burnedIds[tokenId] == false, \\\"Token has been burned\\\");\\n        delete self.attributes[tokenId][key];\\n        uint256 ndx = self.attributeKeysIndexes[tokenId][key];\\n        for (uint256 i = ndx; i < self.attributeKeys[tokenId].length - 1; i++) {\\n            self.attributeKeys[tokenId][i] = self.attributeKeys[tokenId][i + 1];\\n            self.attributeKeysIndexes[tokenId][self.attributeKeys[tokenId][i]] = i;\\n        }\\n        delete self.attributeKeys[tokenId][self.attributeKeys[tokenId].length - 1];\\n        emit AttributeRemoved(address(this), tokenId, key);\\n    }\\n\\n    // @notice set multiple attributes for the token\\n    function _burn(\\n        AttributeContract storage self,\\n        uint256 tokenId)\\n        internal\\n    {\\n        self.burnedIds[tokenId] = true;\\n    }\\n}\\n\",\"keccak256\":\"0xf17d7da2d3938a57bf46cd52df9153bec3151df14be018c65dde609cc1b1ad7a\",\"license\":\"MIT\"},\"contracts/libraries/FeeDistributorLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../identity/IdentityStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\nlibrary FeeDistributorLib {\\n    using SafeERC20 for IERC20;\\n\\n    // Storage struct for Fee Distributor settings\\n    struct FeeDistributorStorage {\\n        address[] feeReceivers;\\n        uint256[] feeWeights;\\n        uint256 totalWeightBasis; // e.g., 10000 for basis points\\n        address distributionToken; // Address of the ERC20 token to distribute (e.g., USDC)\\n    }\\n// --- Logic Functions (Implementations TBD) ---\\n    // --- Logic Functions (Implementations TBD) ---\\n\\n    /**\\n     * @notice Initializes the Fee Distributor settings. Should only be called once.\\n     * @param ds Diamond storage pointer.\\n     * @param _distributionToken Address of the ERC20 token to be distributed.\\n     * @param _totalWeightBasis The basis for fee weights (e.g., 10000 for basis points).\\n     */\\n    function _initializeFeeDistributor(\\n        IdentitySystemStorage.IdentitySystem storage ds,\\n        address _distributionToken,\\n        uint256 _totalWeightBasis\\n    ) internal {\\n        FeeDistributorStorage storage fds = ds.feeDistributorStorage;\\n        require(fds.distributionToken == address(0), \\\"FeeDistributor: Already initialized\\\");\\n        // Allow address(0) for native currency distribution\\n        require(_totalWeightBasis > 0, \\\"FeeDistributor: Basis must be positive\\\");\\n\\n        fds.distributionToken = _distributionToken;\\n        fds.totalWeightBasis = _totalWeightBasis;\\n    }\\n\\n    /**\\n     * @notice Sets the fee receivers and their weights.\\n     * @param ds Diamond storage pointer.\\n     * @param _feeReceivers Array of addresses to receive fees.\\n     * @param _feeWeights Array of weights corresponding to each receiver.\\n     */\\n    function _setFeeReceivers(\\n        IdentitySystemStorage.IdentitySystem storage ds,\\n        address[] memory _feeReceivers,\\n        uint256[] memory _feeWeights\\n    ) internal returns (address[] memory, uint256[] memory) {\\n        FeeDistributorStorage storage fds = ds.feeDistributorStorage;\\n        require(_feeReceivers.length == _feeWeights.length, \\\"FeeDistributor: Array lengths mismatch\\\");\\n        require(_feeReceivers.length > 0, \\\"FeeDistributor: Must provide at least one receiver\\\");\\n\\n        uint256 totalWeightSum = 0;\\n        for (uint i = 0; i < _feeReceivers.length; i++) {\\n            require(_feeReceivers[i] != address(0), \\\"FeeDistributor: Invalid receiver address\\\");\\n            require(_feeWeights[i] > 0, \\\"FeeDistributor: Weight must be positive\\\");\\n            totalWeightSum += _feeWeights[i];\\n        }\\n        require(totalWeightSum == fds.totalWeightBasis, \\\"FeeDistributor: Weights must sum to basis\\\");\\n\\n        fds.feeReceivers = _feeReceivers;\\n        fds.feeWeights = _feeWeights;\\n\\n        return (_feeReceivers, _feeWeights); // Return for event emission in facet\\n    }\\n\\n    /**\\n     * @notice Gets the current fee receivers and their weights.\\n     * @param ds Diamond storage pointer.\\n     * @return feeReceivers_ Array of addresses currently set to receive fees.\\n     * @return feeWeights_ Array of weights corresponding to each receiver.\\n     */\\n    function _getFeeReceivers(\\n        IdentitySystemStorage.IdentitySystem storage ds\\n    )\\n        internal\\n        view\\n        returns (\\n            address[] memory feeReceivers_,\\n            uint256[] memory feeWeights_\\n        )\\n    {\\n        FeeDistributorStorage storage fds = ds.feeDistributorStorage;\\n        return (fds.feeReceivers, fds.feeWeights);\\n    }\\n\\n    /**\\n     * @notice Calculates the adjusted principal amount and individual fee amounts.\\n     * @param ds Diamond storage pointer.\\n     * @param principalAmount The total amount before fee deduction.\\n     * @return adjustedAmount The principal amount remaining after deducting total fees.\\n     * @return feeAmounts Array of individual fee amounts calculated for each receiver.\\n     */\\n    function _calculateAmounts(\\n        IdentitySystemStorage.IdentitySystem storage ds,\\n        uint256 principalAmount\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256 adjustedAmount,\\n            uint256[] memory feeAmounts\\n        )\\n    {\\n        FeeDistributorStorage storage fds = ds.feeDistributorStorage;\\n        address[] memory receivers = fds.feeReceivers;\\n        uint256 numReceivers = receivers.length;\\n\\n        if (numReceivers == 0) {\\n            // No fee receivers configured, return full principal (pass-through)\\n            return (principalAmount, new uint256[](0));\\n        }\\n\\n        // If fee receivers are configured, then the basis must be initialized.\\n        require(fds.totalWeightBasis > 0, \\\"FeeDistributor: Not initialized or invalid basis\\\");\\n        uint256[] memory weights = fds.feeWeights; // Get weights only if needed\\n\\n        feeAmounts = new uint256[](numReceivers);\\n        uint256 totalFeeAmount = 0;\\n\\n        for (uint i = 0; i < numReceivers; i++) {\\n            // Calculate fee: (principalAmount * weight) / basis\\n            // Protect against overflow before division\\n            uint256 fee = (principalAmount * weights[i]) / fds.totalWeightBasis;\\n            feeAmounts[i] = fee;\\n            totalFeeAmount += fee;\\n        }\\n\\n        require(totalFeeAmount <= principalAmount, \\\"FeeDistributor: Total fees exceed principal\\\");\\n        adjustedAmount = principalAmount - totalFeeAmount;\\n\\n        return (adjustedAmount, feeAmounts);\\n    }\\n\\n    /**\\n     * @notice Distributes a principal amount after deducting fees.\\n     * @dev Can distribute either native currency (if distributionToken is address(0)) or a specified ERC20 token.\\n     * @dev Assumes the contract holds sufficient balance of the currency/token to distribute.\\n     * @param ds Diamond storage pointer.\\n     * @param self The address of the calling contract (the diamond) for native transfers.\\n     * @param principalAmountReceiver The address to receive the adjusted principal amount.\\n     * @param _principalAmount The total amount to be distributed.\\n     * @return adjustedAmountReceiver_ The address that received the adjusted principal amount.\\n     * @return adjustedAmount_ The adjusted principal amount transferred.\\n     * @return feeReceivers_ The addresses that received the fee amounts.\\n     * @return feeAmounts_ The individual fee amounts transferred.\\n     */\\n    function _distributeAmounts(\\n        IdentitySystemStorage.IdentitySystem storage ds,\\n        address self, // Address of the diamond/calling contract\\n        address principalAmountReceiver,\\n        uint256 _principalAmount\\n    ) internal returns (\\n        address adjustedAmountReceiver_,\\n        uint256 adjustedAmount_,\\n        address[] memory feeReceivers_,\\n        uint256[] memory feeAmounts_\\n    ) {\\n        FeeDistributorStorage storage fds = ds.feeDistributorStorage;\\n        // No require for token != address(0) anymore, as address(0) signifies native currency\\n        require(principalAmountReceiver != address(0), \\\"FeeDistributor: Invalid principal receiver\\\");\\n\\n        // Calculate amounts\\n        (uint256 adjustedAmount, uint256[] memory feeAmounts) = _calculateAmounts(ds, _principalAmount);\\n\\n        address[] memory receivers = fds.feeReceivers;\\n        bool isNative = fds.distributionToken == address(0);\\n\\n        if (isNative) {\\n            // Native currency distribution\\n            require(self.balance >= _principalAmount, \\\"FeeDistributor: Insufficient native balance\\\");\\n            // Transfer fees\\n            for (uint i = 0; i < receivers.length; i++) {\\n                if (feeAmounts[i] > 0) {\\n                    (bool success, ) = payable(receivers[i]).call{value: feeAmounts[i]}(\\\"\\\");\\n                    require(success, \\\"FeeDistributor: Native fee transfer failed\\\");\\n                }\\n            }\\n            // Transfer adjusted principal amount\\n            if (adjustedAmount > 0) {\\n                (bool success, ) = payable(principalAmountReceiver).call{value: adjustedAmount}(\\\"\\\");\\n                require(success, \\\"FeeDistributor: Native principal transfer failed\\\");\\n            }\\n        } else {\\n            // ERC20 token distribution\\n            IERC20 token = IERC20(fds.distributionToken);\\n            require(token.balanceOf(self) >= _principalAmount, \\\"FeeDistributor: Insufficient token balance\\\");\\n            // Transfer fees\\n            for (uint i = 0; i < receivers.length; i++) {\\n                if (feeAmounts[i] > 0) {\\n                    token.safeTransfer(receivers[i], feeAmounts[i]);\\n                }\\n            }\\n            // Transfer adjusted principal amount\\n            if (adjustedAmount > 0) {\\n                token.safeTransfer(principalAmountReceiver, adjustedAmount);\\n            }\\n        }\\n\\n        // Return values for event emission\\n        return (principalAmountReceiver, adjustedAmount, receivers, feeAmounts);\\n    }\\n\\n}\",\"keccak256\":\"0x44d1e392cbb9b8e3315b4d213b26f4ae05cabf43528d5b42d3e8f6dc08a606b4\",\"license\":\"MIT\"},\"contracts/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\nimport \\\"../interfaces/IERC173.sol\\\"; // for IERC173 interface\\nimport \\\"../interfaces/IDiamondCut.sol\\\";\\n\\n// Remember to add the loupe functions from DiamondLoupeFacet to the diamond.\\n// The loupe functions are required by the EIP2535 Diamonds standard\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    // Upgrade proposal struct for timelock functionality\\n    struct UpgradeProposal {\\n        IDiamondCut.FacetCut[] diamondCut;\\n        address initAddress;\\n        bytes initCalldata;\\n        uint256 proposalTime;\\n        bool exists;\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n        // Timelock for upgrades (in seconds)\\n        uint256 upgradeTimelock;\\n        // Storage for the current upgrade proposal\\n        UpgradeProposal upgradeProposal;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit IERC173.OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n    }\\n\\n    // Timelock constants\\n    uint256 constant DEFAULT_UPGRADE_TIMELOCK = 2 days;\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else {\\n                revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit IDiamondCut.DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);            \\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress != _facetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n            removeFunction(ds, oldFacetAddress, selector);\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(_facetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            removeFunction(ds, oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\n        enforceHasContractCode(_facetAddress, \\\"LibDiamondCut: New facet has no code\\\");\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n        ds.facetAddresses.push(_facetAddress);\\n    }    \\n\\n\\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n        // an immutable function is a function defined directly in a diamond\\n        require(_facetAddress != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            require(_calldata.length == 0, \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\");\\n        } else {\\n            require(_calldata.length > 0, \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\");\\n            if (_init != address(this)) {\\n                enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n\\n    // Initialize timelock settings for upgrade proposals\\n    function initializeUpgradeTimelock(uint256 _timelock) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        require(ds.upgradeTimelock == 0, \\\"LibDiamond: Timelock already initialized\\\");\\n        ds.upgradeTimelock = _timelock > 0 ? _timelock : DEFAULT_UPGRADE_TIMELOCK;\\n    }\\n\\n    // Propose a diamond cut to be executed after the timelock\\n    function proposeDiamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        require(!ds.upgradeProposal.exists, \\\"LibDiamond: Upgrade already proposed\\\");\\n        require(ds.upgradeTimelock > 0, \\\"LibDiamond: Timelock not initialized\\\");\\n        \\n        // Create a deep copy of the diamond cut to store in the proposal\\n        IDiamondCut.FacetCut[] memory diamondCutCopy = new IDiamondCut.FacetCut[](_diamondCut.length);\\n        for (uint256 i = 0; i < _diamondCut.length; i++) {\\n            diamondCutCopy[i] = _diamondCut[i];\\n            \\n            // Deep copy the function selectors array\\n            bytes4[] memory selectors = new bytes4[](_diamondCut[i].functionSelectors.length);\\n            for (uint256 j = 0; j < _diamondCut[i].functionSelectors.length; j++) {\\n                selectors[j] = _diamondCut[i].functionSelectors[j];\\n            }\\n            diamondCutCopy[i].functionSelectors = selectors;\\n        }\\n        \\n        // Store the proposal\\n        // Create empty array in storage first\\n        delete ds.upgradeProposal.diamondCut;\\n        \\n        // Manually copy each element and its nested arrays to storage\\n        for (uint256 i = 0; i < _diamondCut.length; i++) {\\n            // Create a new struct in storage by pushing an empty element first\\n            ds.upgradeProposal.diamondCut.push();\\n            \\n            // Now set the values for this element's fields\\n            ds.upgradeProposal.diamondCut[i].facetAddress = _diamondCut[i].facetAddress;\\n            ds.upgradeProposal.diamondCut[i].action = _diamondCut[i].action;\\n            \\n            // For the selectors array, we need to handle it separately\\n            // Clear any existing selectors to ensure clean state\\n            delete ds.upgradeProposal.diamondCut[i].functionSelectors;\\n            \\n            // Copy each selector individually\\n            for (uint256 j = 0; j < _diamondCut[i].functionSelectors.length; j++) {\\n                ds.upgradeProposal.diamondCut[i].functionSelectors.push(_diamondCut[i].functionSelectors[j]);\\n            }\\n        }\\n        ds.upgradeProposal.initAddress = _init;\\n        ds.upgradeProposal.initCalldata = _calldata;\\n        ds.upgradeProposal.proposalTime = block.timestamp;\\n        ds.upgradeProposal.exists = true;\\n        \\n        emit IDiamondCut.DiamondCutProposed(msg.sender, block.timestamp, block.timestamp + ds.upgradeTimelock);\\n    }\\n    \\n    // Execute a proposed diamond cut after the timelock period\\n    function executeDiamondCut() internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        require(ds.upgradeProposal.exists, \\\"LibDiamond: No upgrade proposal exists\\\");\\n        require(\\n            block.timestamp >= ds.upgradeProposal.proposalTime + ds.upgradeTimelock,\\n            \\\"LibDiamond: Timelock period not elapsed\\\"\\n        );\\n        \\n        // Execute the diamond cut\\n        diamondCut(\\n            ds.upgradeProposal.diamondCut,\\n            ds.upgradeProposal.initAddress,\\n            ds.upgradeProposal.initCalldata\\n        );\\n        \\n        // Reset the proposal\\n        delete ds.upgradeProposal;\\n    }\\n    \\n    // Cancel a proposed diamond cut\\n    function cancelDiamondCut() internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        require(ds.upgradeProposal.exists, \\\"LibDiamond: No upgrade proposal exists\\\");\\n        \\n        // Reset the proposal\\n        delete ds.upgradeProposal;\\n        \\n        emit IDiamondCut.DiamondCutCancelled(msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x2bb59ec15c5218cff473ba4ae9f480fd346c4f91aff5e7a1850e0ad29e51b31b\",\"license\":\"MIT\"},\"contracts/libraries/TradeDealLib.sol\":{\"content\":\" // SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"../identity/IdentityStorage.sol\\\";\\nimport \\\"../interfaces/ICollateral.sol\\\";\\nimport \\\"../interfaces/IInterest.sol\\\";\\nimport \\\"../interfaces/IUSDCPool.sol\\\";\\nimport \\\"../interfaces/IAttribute.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nusing SafeERC20 for IERC20;\\nimport \\\"../interfaces/IERC721Permissioned.sol\\\";\\nimport \\\"../interfaces/IFeeDistributor.sol\\\"; // Added for fee distribution\\nimport \\\"hardhat/console.sol\\\";\\nimport \\\"../libraries/LibDiamond.sol\\\";\\nimport \\\"../libraries/AttributeLib.sol\\\";\\n\\nimport {console} from \\\"hardhat/console.sol\\\";\\n\\nlibrary TradeDealLib {\\n    // These event declarations are temporary until we complete migration\\n    // They'll be removed once we've updated all functions to return event params\\n    // rather than emit events directly\\n    \\n    // Operation mode for trade deals\\n    enum OperationMode {\\n        CENTRALIZED,    // Contract owner manages all fund operations\\n        SELF_SERVICE,   // Borrowers can directly withdraw/repay funds\\n        HYBRID,         // Mixed model with configurable permissions\\n        CUSTOM          // Fine-grained permission configuration\\n    }\\n    \\n    // Roles for the role-based access control system\\n    enum Role {\\n        NONE,        // No special role (default)\\n        ADMIN,       // Full control over the trade deal\\n        LENDER,      // Can deposit funds and receive Collateral tokens\\n        BORROWER,    // Can deposit invoices and withdraw funds (in self-service)\\n        UNDERWRITER, // Can approve/reject deals, modify terms\\n        LIQUIDATOR   // Can liquidate collateral if terms are violated\\n    }\\n    \\n    // Permission bit flags for fine-grained control\\n    uint256 constant PERMISSION_DEPOSIT_FUNDS = 1;\\n    uint256 constant PERMISSION_WITHDRAW_FUNDS = 2;\\n    uint256 constant PERMISSION_DEPOSIT_COLLATERAL = 4;\\n    uint256 constant PERMISSION_WITHDRAW_COLLATERAL = 8;\\n    uint256 constant PERMISSION_DISTRIBUTE_INTEREST = 16;\\n    \\n    event TradeDealCreated(\\n        uint256 indexed tradeDealId,\\n        string name,\\n        string symbol,\\n        uint256 interestRate,\\n        uint256 collateralToInterestRatio,\\n        bool active,\\n        address nftAddress,\\n        address collateralAddress,\\n        address interestAddress,\\n        address usdcAddress\\n    );\\n    // Removed duplicate TradeDealUpdated event definition\\n    event TradeDealActivated(uint256 indexed tradeDealId);\\n    event TradeDealDeactivated(uint256 indexed tradeDealId);\\n    event TradeDealParticipantAdded(uint256 indexed tradeDealId, address indexed participant);\\n    event TradeDealParticipantRemoved(uint256 indexed tradeDealId, address indexed participant);\\n    event InvoiceDepositedToTradeDeal(uint256 indexed tradeDealId, uint256 indexed tokenId);\\n    event InvoiceWithdrawnFromTradeDeal(uint256 indexed tradeDealId, uint256 indexed tokenId);\\n    event USDCDepositedToTradeDeal(uint256 indexed tradeDealId, uint256 amount);\\n    event USDCWithdrawnFromTradeDeal(uint256 indexed tradeDealId, uint256 amount);\\n    event InterestDistributedForTradeDeal(uint256 indexed tradeDealId, uint256 totalInterest, uint256 invoicePoolInterest, uint256 interestInterest, uint256 interestTokensMinted);\\n    event TradeDealRequiredClaimTopicsSet(uint256 indexed tradeDealId, uint256[] claimTopics);\\n    // New events for enhanced functionality\\n    event TradeDealFullyFunded(uint256 indexed tradeDealId, uint256 fundingTarget);\\n    event TradeDealFundingWithdrawn(uint256 indexed tradeDealId, address indexed recipient, uint256 amount);\\n    event TradeDealRepaid(uint256 indexed tradeDealId, address indexed repayer, uint256 amount, bool fullyRepaid);\\n    event CollateralTokensRedeemed(uint256 indexed tradeDealId, address indexed redeemer, uint256 collateralAmount, uint256 usdcAmount);\\n    // Trade Deal data structure\\n    struct TradeDeal {\\n        uint256 id;\\n        string name;\\n        string symbol;           // Symbol for the trade deal, used for Collateral token\\n        uint256 interestRate;\\n        uint256 collateralToInterestRatio;\\n        bool active;\\n        uint256[] requiredClaimTopics; // Claim topics required for participation\\n        address collateralAddress;     // Address of the Collateral token contract for this trade deal\\n        address interestAddress;     // Address of the VABI token contract for this trade deal\\n        address usdcAddress;     // Address of the USDC token contract for this trade deal\\n        OperationMode operationMode; // Operation mode (CENTRALIZED or SELF_SERVICE)\\n    }\\n\\n    struct CollateralRedemptionResult {\\n        uint256 tradeDealId;\\n        address redeemer;\\n        uint256 collateralAmount;\\n        uint256 usdcAmount;\\n    }\\n    \\n    // Extended CollateralleStorage to support trade deals\\n    struct TradeDealStorage {\\n        // Trade deal tracking\\n        mapping(uint256 => TradeDeal) tradeDeals;\\n        uint256[] tradeDealIds;\\n        uint256 nextTradeDealId;\\n        \\n        // Per-trade deal mappings\\n        mapping(uint256 => uint256[]) tradeDealInvoices; // Trade deal ID => array of invoice token IDs\\n        mapping(uint256 => uint256) tradeDealUsdcBalances; // Trade deal ID => USDC balance\\n        mapping(uint256 => mapping(address => bool)) tradeDealParticipants; // Trade deal ID => user address => is participant\\n        mapping(uint256 => uint256[]) tradeDealRequiredClaimTopics; // Trade deal ID => array of required claim topics\\n        \\n        // Role-based access control\\n        mapping(uint256 => mapping(address => Role)) userRoles; // Trade deal ID => user address => role\\n        mapping(uint256 => mapping(address => uint256)) userPermissions; // Trade deal ID => user address => permissions\\n        \\n        // New fields for enhanced functionality\\n        mapping(uint256 => uint256) tradeDealFundingTargets; // Trade deal ID => funding target\\n        mapping(uint256 => bool) tradeDealFundingWithdrawn; // Trade deal ID => whether funding has been withdrawn\\n        mapping(uint256 => uint256) tradeDealRepaidAmounts; // Trade deal ID => amount repaid\\n        mapping(uint256 => uint256) tradeDealTotalDebt; // Trade deal ID => total debt (principal + interest)\\n        \\n        // Track original depositors of invoices\\n        mapping(uint256 => mapping(uint256 => address)) invoiceDepositors; // Trade deal ID => token ID => original depositor\\n    }\\n    \\n    // Return struct for createTradeDeal function\\n    struct CreateTradeDealResult {\\n        uint256 tradeDealId;\\n        string name;\\n        string symbol;\\n        uint256 interestRate;\\n        uint256 collateralToInterestRatio;\\n        bool active;\\n        address nftAddress;\\n        address collateralAddress;\\n        address interestAddress;\\n        address usdcAddress;\\n        bool hasClaimTopics;\\n        uint256[] requiredClaimTopics;\\n        OperationMode operationMode;\\n    }\\n    \\n    // Parameters struct for createTradeDeal function\\n    struct CreateTradeDealParams {\\n        string name;\\n        string symbol;\\n        uint256 interestRate;\\n        uint256 collateralToInterestRatio;\\n        uint256[] requiredClaimTopics;\\n        address collateralAddress;\\n        address interestAddress;\\n        address usdcAddress;\\n        OperationMode operationMode;\\n    }\\n    \\n    // Create a new trade deal\\n    function _createTradeDeal(\\n        CreateTradeDealParams memory params\\n    ) internal returns (CreateTradeDealResult memory) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        uint256 tradeDealId = tds.nextTradeDealId++;\\n        \\n        TradeDeal storage tradeDeal = tds.tradeDeals[tradeDealId];\\n        tradeDeal.id = tradeDealId;\\n        tradeDeal.name = params.name;\\n        tradeDeal.symbol = params.symbol;\\n        tradeDeal.interestRate = params.interestRate;\\n        tradeDeal.collateralToInterestRatio = params.collateralToInterestRatio;\\n        tradeDeal.active = true;\\n        \\n        // Check if we should use the CollateralTokenFactoryFacet to create a new Collateral token\\n        address collateralAddress = params.collateralAddress;\\n        if (collateralAddress == address(0)) {\\n            // Try to create a new Collateral token\\n            collateralAddress = _createOrGetCollateralToken(tradeDealId, params.symbol);\\n        }\\n        \\n        tradeDeal.collateralAddress = collateralAddress;\\n        tradeDeal.interestAddress = params.interestAddress;\\n        tradeDeal.usdcAddress = params.usdcAddress;\\n        tradeDeal.operationMode = params.operationMode;\\n        \\n        // Set required claim topics\\n        bool hasClaimTopics = params.requiredClaimTopics.length > 0;\\n        if (hasClaimTopics) {\\n            uint256 requiredClaimTopicsLength = params.requiredClaimTopics.length;\\n            for (uint256 i = 0; i < requiredClaimTopicsLength; i++) {\\n                tradeDeal.requiredClaimTopics.push(params.requiredClaimTopics[i]);\\n                tds.tradeDealRequiredClaimTopics[tradeDealId].push(params.requiredClaimTopics[i]);\\n            }\\n        }\\n        // Initialize repayment tracking - funding target will be set when an invoice is deposited\\n        tds.tradeDealFundingTargets[tradeDealId] = 0; // Will be set based on NFT totalAmount when invoice is deposited\\n        tds.tradeDealRepaidAmounts[tradeDealId] = 0;\\n        tds.tradeDealTotalDebt[tradeDealId] = 0; // Will be set when fully funded\\n        tds.tradeDealFundingWithdrawn[tradeDealId] = false;\\n        tds.tradeDealFundingWithdrawn[tradeDealId] = false;\\n        \\n        tds.tradeDealIds.push(tradeDealId);\\n        \\n        // Instead of emitting events, return the data needed for the facet to emit events\\n        CreateTradeDealResult memory result;\\n        result.tradeDealId = tradeDealId;\\n        result.name = params.name;\\n        result.symbol = params.symbol;\\n        result.interestRate = params.interestRate;\\n        result.collateralToInterestRatio = params.collateralToInterestRatio;\\n        result.active = true;\\n        result.nftAddress = address(0); // Use address(0) for nftAddress since we're using the Diamond's ERC721PermissionedTokenFacet\\n        result.collateralAddress = collateralAddress;\\n        result.interestAddress = params.interestAddress;\\n        result.usdcAddress = params.usdcAddress;\\n        result.hasClaimTopics = hasClaimTopics;\\n        result.requiredClaimTopics = params.requiredClaimTopics;\\n        result.operationMode = params.operationMode;\\n        \\n        return result;\\n    }\\n    // Return struct for updateTradeDeal function\\n    struct UpdateTradeDealResult {\\n        uint256 tradeDealId;\\n        string name;\\n        string symbol;\\n        uint256 interestRate;\\n        uint256 collateralToInterestRatio;\\n        bool active;\\n        address collateralAddress;\\n        address interestAddress;\\n        address usdcAddress;\\n    }\\n    \\n    // Update an existing trade deal\\n    // Update an existing trade deal\\n    function _updateTradeDeal(\\n        uint256 tradeDealId,\\n        string memory name,\\n        string memory symbol,\\n        uint256 interestRate,\\n        uint256 collateralToInterestRatio,\\n        address collateralAddress,\\n        address interestAddress,\\n        address usdcAddress\\n    ) internal returns (UpdateTradeDealResult memory) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        require(_tradeDealExists(tradeDealId), \\\"Trade deal does not exist\\\");\\n        \\n        TradeDeal storage tradeDeal = tds.tradeDeals[tradeDealId];\\n        tradeDeal.name = name;\\n        tradeDeal.symbol = symbol;\\n        tradeDeal.interestRate = interestRate;\\n        tradeDeal.collateralToInterestRatio = collateralToInterestRatio;\\n        tradeDeal.collateralAddress = collateralAddress;\\n        tradeDeal.interestAddress = interestAddress;\\n        tradeDeal.usdcAddress = usdcAddress;\\n        \\n        // Instead of emitting an event, return the data needed for the facet to emit the event\\n        UpdateTradeDealResult memory result;\\n        result.tradeDealId = tradeDealId;\\n        result.name = name;\\n        result.symbol = symbol;\\n        result.interestRate = interestRate;\\n        result.collateralToInterestRatio = collateralToInterestRatio;\\n        result.active = tradeDeal.active;\\n        result.collateralAddress = collateralAddress;\\n        result.interestAddress = interestAddress;\\n        result.usdcAddress = usdcAddress;\\n        \\n        return result;\\n    }\\n    \\n    // Return struct for activate/deactivate trade deal\\n    struct TradeDealStateChangeResult {\\n        uint256 tradeDealId;\\n    }\\n    \\n    // Activate a trade deal\\n    function _activateTradeDeal(uint256 tradeDealId) internal returns (TradeDealStateChangeResult memory) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        require(_tradeDealExists(tradeDealId), \\\"Trade deal does not exist\\\");\\n        \\n        tds.tradeDeals[tradeDealId].active = true;\\n        \\n        // Return result instead of emitting event\\n        TradeDealStateChangeResult memory result;\\n        result.tradeDealId = tradeDealId;\\n        return result;\\n    }\\n    \\n    // Deactivate a trade deal\\n    function _deactivateTradeDeal(uint256 tradeDealId) internal returns (TradeDealStateChangeResult memory) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        require(_tradeDealExists(tradeDealId), \\\"Trade deal does not exist\\\");\\n        \\n        tds.tradeDeals[tradeDealId].active = false;\\n        \\n        // Return result instead of emitting event\\n        TradeDealStateChangeResult memory result;\\n        result.tradeDealId = tradeDealId;\\n        return result;\\n    }\\n    \\n    // Check if a trade deal exists\\n    function _tradeDealExists(uint256 tradeDealId) internal view returns (bool) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        return tradeDealId < tds.nextTradeDealId && tds.tradeDeals[tradeDealId].id == tradeDealId;\\n    }\\n    \\n    // Get trade deal info\\n    function _getTradeDealInfo(uint256 tradeDealId) internal view returns (TradeDeal memory) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        require(_tradeDealExists(tradeDealId), \\\"Trade deal does not exist\\\");\\n        \\n        return tds.tradeDeals[tradeDealId];\\n    }\\n    \\n    // Get all trade deal IDs\\n    function _getAllTradeDealIds() internal view returns (uint256[] memory) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        return tds.tradeDealIds;\\n    }\\n    \\n    // Return struct for participant management functions\\n    struct TradeDealParticipantResult {\\n        uint256 tradeDealId;\\n        address participant;\\n    }\\n    \\n    // Participant management\\n    function _addTradeDealParticipant(uint256 tradeDealId, address participant) internal returns (TradeDealParticipantResult memory) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        require(_tradeDealExists(tradeDealId), \\\"Trade deal does not exist\\\");\\n        \\n        tds.tradeDealParticipants[tradeDealId][participant] = true;\\n        \\n        // Return result instead of emitting event\\n        TradeDealParticipantResult memory result;\\n        result.tradeDealId = tradeDealId;\\n        result.participant = participant;\\n        return result;\\n    }\\n    \\n    function _removeTradeDealParticipant(uint256 tradeDealId, address participant) internal returns (TradeDealParticipantResult memory) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        require(_tradeDealExists(tradeDealId), \\\"Trade deal does not exist\\\");\\n        \\n        tds.tradeDealParticipants[tradeDealId][participant] = false;\\n        \\n        // Return result instead of emitting event\\n        TradeDealParticipantResult memory result;\\n        result.tradeDealId = tradeDealId;\\n        result.participant = participant;\\n        return result;\\n    }\\n    \\n    function _isTradeDealParticipant(uint256 tradeDealId, address user) internal view returns (bool) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        require(_tradeDealExists(tradeDealId), \\\"Trade deal does not exist\\\");\\n        \\n        // First check if the user is explicitly added as a participant\\n        if (tds.tradeDealParticipants[tradeDealId][user]) {\\n            return true;\\n        }\\n        \\n        // If no required claim topics are set, only explicit participants are allowed\\n        if (tds.tradeDealRequiredClaimTopics[tradeDealId].length == 0) {\\n            return false;\\n        }\\n        \\n        // Check if the user has any of the required claim topics\\n        address identityAddress = ds.identities[user];\\n        if (identityAddress == address(0)) {\\n            return false; // User has no identity\\n        }\\n        \\n        // Get the user's claims\\n        uint256[] storage userClaims = ds.claimList[identityAddress];\\n        \\n        // Check if the user has any of the required claim topics\\n        uint256 requiredClaimTopicsLength = tds.tradeDealRequiredClaimTopics[tradeDealId].length;\\n        for (uint256 i = 0; i < requiredClaimTopicsLength; i++) {\\n            uint256 requiredClaimTopic = tds.tradeDealRequiredClaimTopics[tradeDealId][i];\\n            \\n            for (uint256 j = 0; j < userClaims.length; j++) {\\n                if (userClaims[j] == requiredClaimTopic) {\\n                    return true; // User has a required claim\\n                }\\n            }\\n        }\\n        \\n        return false; // User has no required claims\\n    }\\n    \\n    // Return struct for invoice management functions\\n    struct InvoiceActionResult {\\n        uint256 tradeDealId;\\n        uint256 tokenId;\\n    }\\n    \\n    // Invoice management for trade deals\\n    function _depositInvoiceToTradeDeal(uint256 tradeDealId, uint256 tokenId) internal returns (InvoiceActionResult memory) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        require(_tradeDealExists(tradeDealId), \\\"Trade deal does not exist\\\");\\n        require(tds.tradeDeals[tradeDealId].active, \\\"Trade deal is not active\\\");\\n        \\n        // Use the Diamond's ERC721PermissionedTokenFacet to transfer the NFT\\n        // This bypasses the need for approval\\n        bytes memory emptyData = \\\"\\\";\\n        IERC721Permissioned(address(this)).forcedTransfer(\\n            msg.sender,\\n            address(this),\\n            tokenId,\\n            emptyData\\n        );\\n        \\n        // Track the invoice in this trade deal\\n        tds.tradeDealInvoices[tradeDealId].push(tokenId);\\n        // Record the original depositor of this invoice\\n        tds.invoiceDepositors[tradeDealId][tokenId] = msg.sender;\\n        \\n        // Get the totalAmount from the NFT and set it as the funding target\\n        uint256 totalAmount = _getNFTInvoiceTotalAmount(tokenId);\\n        tds.tradeDealFundingTargets[tradeDealId] += totalAmount;\\n        \\n        // Return result instead of emitting event\\n        InvoiceActionResult memory result;\\n        result.tradeDealId = tradeDealId;\\n        result.tokenId = tokenId;\\n        return result;\\n    }\\n\\n    function _withdrawInvoiceFromTradeDeal(uint256 tradeDealId, uint256 tokenId) internal returns (InvoiceActionResult memory) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        require(_tradeDealExists(tradeDealId), \\\"Trade deal does not exist\\\");\\n        \\n        // Verify that the NFT is owned by this contract\\n        require(IERC721(address(this)).ownerOf(tokenId) == address(this), \\\"NFT not owned by this contract\\\");\\n        \\n        // Check if the caller is the original depositor of this invoice\\n        require(\\n            tds.invoiceDepositors[tradeDealId][tokenId] == msg.sender ||\\n            msg.sender == LibDiamond.contractOwner(),\\n            \\\"Only the original depositor or contract owner can withdraw this invoice\\\"\\n        );\\n        \\n        // Remove the invoice from this trade deal's tracking\\n        uint256[] storage invoices = tds.tradeDealInvoices[tradeDealId];\\n        bool found = false;\\n        uint256 invoicesLength = invoices.length;\\n        for (uint256 i = 0; i < invoicesLength; i++) {\\n            if (invoices[i] == tokenId) {\\n                // Remove by swapping with the last element and popping\\n                invoices[i] = invoices[invoices.length - 1];\\n                invoices.pop();\\n                found = true;\\n                break;\\n            }\\n        }\\n        \\n        require(found, \\\"Invoice not found in this trade deal\\\");\\n\\n        // *** FIX: Decrease funding target when invoice is withdrawn ***\\n        uint256 invoiceAmount = _getNFTInvoiceTotalAmount(tokenId);\\n        if (tds.tradeDealFundingTargets[tradeDealId] >= invoiceAmount) {\\n             tds.tradeDealFundingTargets[tradeDealId] -= invoiceAmount;\\n        } else {\\n            // Avoid underflow if target is somehow already less than amount (shouldn't happen)\\n            tds.tradeDealFundingTargets[tradeDealId] = 0;\\n        }\\n        // *** END FIX ***\\n\\n        // Use forcedTransfer to transfer the NFT back to the sender\\n        // This bypasses the need for approval\\n        bytes memory emptyData = \\\"\\\";\\n        IERC721Permissioned(address(this)).forcedTransfer(\\n            address(this),\\n            msg.sender,\\n            tokenId,\\n            emptyData\\n        );\\n\\n        // Clean up the depositor tracking\\n        delete tds.invoiceDepositors[tradeDealId][tokenId];\\n        \\n        // Return result instead of emitting event\\n        InvoiceActionResult memory result;\\n        result.tradeDealId = tradeDealId;\\n        result.tokenId = tokenId;\\n        return result;\\n    }\\n    \\n    // Return struct for USDC management functions\\n    struct USDCActionResult {\\n        uint256 tradeDealId;\\n        uint256 amount;\\n        bool isFullyFunded;\\n        uint256 fundingTarget;\\n    }\\n    \\n    // USDC management for trade deals\\n    function _depositUSDCToTradeDeal(uint256 tradeDealId, uint256 amount) internal returns (USDCActionResult memory) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        require(_tradeDealExists(tradeDealId), \\\"Trade deal does not exist\\\");\\n        require(tds.tradeDeals[tradeDealId].active, \\\"Trade deal is not active\\\");\\n        require(!tds.tradeDealFundingWithdrawn[tradeDealId], \\\"Funding already withdrawn\\\");\\n        \\n        TradeDeal storage tradeDeal = tds.tradeDeals[tradeDealId];\\n        require(tradeDeal.usdcAddress != address(0), \\\"Trade deal USDC address not set\\\");\\n        \\n        // Get funding target and current balance\\n        uint256 fundingTarget = tds.tradeDealFundingTargets[tradeDealId];\\n        uint256 currentBalance = tds.tradeDealUsdcBalances[tradeDealId];\\n        \\n        // If funding target exists, check that deposit won't exceed it\\n        if (fundingTarget > 0) {\\n            uint256 remainingToFund = fundingTarget > currentBalance ?\\n                fundingTarget - currentBalance : 0;\\n                \\n            require(amount <= remainingToFund, \\\"Amount exceeds remaining funding needed\\\");\\n        }\\n        \\n        // Log the depositor address and amount\\n        address depositor = msg.sender;\\n        \\n        // Use the USDC token's transferFrom method to transfer tokens from the sender to this contract\\n        IERC20(tradeDeal.usdcAddress).safeTransferFrom(depositor, address(this), amount);\\n        \\n        // Track the amount in this trade deal\\n        tds.tradeDealUsdcBalances[tradeDealId] += amount;\\n        \\n        // Explicitly add the depositor as a participant in the trade deal\\n        // This ensures they can receive Collateral tokens\\n        if (!_isTradeDealParticipant(tradeDealId, depositor)) {\\n            _addTradeDealParticipant(tradeDealId, depositor);\\n        }\\n        \\n        // If the trade deal has a Collateral token, mint Collateral tokens to the depositor\\n        if (tradeDeal.collateralAddress != address(0)) {\\n            // Get the Collateral token contract\\n            address collateralToken = tradeDeal.collateralAddress;\\n            \\n            // Force the trade deal to be active during minting\\n            bool wasActive = tradeDeal.active;\\n            tradeDeal.active = true;\\n            \\n            // Try to mint Collateral tokens to the depositor\\n            // We need to make sure the depositor is added as a participant first\\n            // This is done by the _addTradeDealParticipant call above\\n            \\n            // Adjust for the difference in decimals between USDC (6) and Collateral (18)\\n            // Multiply by 10^12 to convert from USDC decimals to Collateral decimals\\n            uint256 adjustedAmount = amount * 1000000000000; // 10^12\\n\\n            // Attempt to mint Collateral tokens; will revert if it fails\\n            ICollateral(collateralToken).mint(depositor, adjustedAmount);\\n            // *** END FIX ***\\n            \\n            // Restore the original active state\\n            tradeDeal.active = wasActive;\\n        }\\n        \\n        // Check if this deposit completes the funding\\n        if (fundingTarget > 0 && currentBalance + amount >= fundingTarget) {\\n            // Calculate total debt including interest\\n            uint256 interest = (fundingTarget * tradeDeal.interestRate) / 10000;\\n            tds.tradeDealTotalDebt[tradeDealId] = fundingTarget + interest;\\n            \\n            // Track if funding was completed for the result\\n        }\\n        \\n        // Return result instead of emitting events\\n        USDCActionResult memory result;\\n        result.tradeDealId = tradeDealId;\\n        result.amount = amount;\\n        result.isFullyFunded = (fundingTarget > 0 && currentBalance + amount >= fundingTarget);\\n        result.fundingTarget = fundingTarget;\\n        return result;\\n    }\\n    \\n    function _withdrawUSDCFromTradeDeal(uint256 tradeDealId, uint256 amount) internal returns (USDCActionResult memory) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        require(_tradeDealExists(tradeDealId), \\\"Trade deal does not exist\\\");\\n        require(tds.tradeDealUsdcBalances[tradeDealId] >= amount, \\\"Insufficient USDC balance in trade deal\\\");\\n        \\n        TradeDeal storage tradeDeal = tds.tradeDeals[tradeDealId];\\n        require(tradeDeal.usdcAddress != address(0), \\\"Trade deal USDC address not set\\\");\\n        \\n        // Use the USDC token's transfer method to transfer tokens from this contract to the sender\\n        require(IERC20(tradeDeal.usdcAddress).transfer(msg.sender, amount), \\\"USDC transfer failed\\\");\\n        \\n        // Update the amount in this trade deal\\n        tds.tradeDealUsdcBalances[tradeDealId] -= amount;\\n        \\n        // Return result instead of emitting event\\n        USDCActionResult memory result;\\n        result.tradeDealId = tradeDealId;\\n        result.amount = amount;\\n        result.isFullyFunded = false; // Not applicable for withdrawal\\n        result.fundingTarget = 0;     // Not applicable for withdrawal\\n        return result;\\n    }\\n    \\n    // Return struct for interest distribution\\n    struct InterestDistributionResult {\\n        uint256 tradeDealId;\\n        uint256 totalInterest;\\n        uint256 invoicePoolInterest;\\n        uint256 interestInterest;\\n        uint256 interestTokensMinted;\\n    }\\n    \\n    // Interest distribution for a specific trade deal\\n    // This function is kept for backward compatibility but is simplified to avoid VABI token complexity\\n    function _distributeInterestForTradeDeal(uint256 tradeDealId) internal view returns (InterestDistributionResult memory) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        require(_tradeDealExists(tradeDealId), \\\"Trade deal does not exist\\\");\\n        require(tds.tradeDeals[tradeDealId].active, \\\"Trade deal is not active\\\");\\n        \\n        // Note: Interest calculation is now handled during funding completion and repayment processes\\n        // This function is maintained for backward compatibility\\n        \\n        // We'll calculate interest but won't do anything with it\\n        TradeDeal storage tradeDeal = tds.tradeDeals[tradeDealId];\\n        uint256 balance = tds.tradeDealUsdcBalances[tradeDealId];\\n        uint256 interest = (balance * tradeDeal.interestRate) / 10000;\\n        \\n        // Return result instead of emitting event\\n        InterestDistributionResult memory result;\\n        result.tradeDealId = tradeDealId;\\n        result.totalInterest = interest;\\n        result.invoicePoolInterest = interest; // All interest goes to the trade deal now\\n        result.interestInterest = 0;               // No VABI interest\\n        result.interestTokensMinted = 0;           // No VABI tokens minted\\n        \\n        return result;\\n    }\\n    \\n    // Get USDC balance for a specific trade deal\\n    function _getUSDCBalanceForTradeDeal(uint256 tradeDealId) internal view returns (uint256) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        require(_tradeDealExists(tradeDealId), \\\"Trade deal does not exist\\\");\\n        \\n        return tds.tradeDealUsdcBalances[tradeDealId];\\n    }\\n    \\n    // Get invoice count for a specific trade deal\\n    function _getInvoiceCountForTradeDeal(uint256 tradeDealId) internal view returns (uint256) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        require(_tradeDealExists(tradeDealId), \\\"Trade deal does not exist\\\");\\n        \\n        return tds.tradeDealInvoices[tradeDealId].length;\\n    }\\n    \\n    // Get invoice token ID for a specific trade deal\\n    function _getInvoiceTokenIdForTradeDeal(uint256 tradeDealId, uint256 index) internal view returns (uint256) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        require(_tradeDealExists(tradeDealId), \\\"Trade deal does not exist\\\");\\n        require(index < tds.tradeDealInvoices[tradeDealId].length, \\\"Index out of bounds\\\");\\n        \\n        return tds.tradeDealInvoices[tradeDealId][index];\\n    }\\n    \\n    // Return struct for setting required claim topics\\n    struct ClaimTopicsResult {\\n        uint256 tradeDealId;\\n        uint256[] claimTopics;\\n    }\\n    \\n    // Set required claim topics for a trade deal\\n    function _setTradeDealRequiredClaimTopics(uint256 tradeDealId, uint256[] memory claimTopics) internal returns (ClaimTopicsResult memory) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        require(_tradeDealExists(tradeDealId), \\\"Trade deal does not exist\\\");\\n        \\n        // Clear existing claim topics\\n        delete tds.tradeDealRequiredClaimTopics[tradeDealId];\\n        delete tds.tradeDeals[tradeDealId].requiredClaimTopics;\\n        \\n        // Set new claim topics\\n        uint256 claimTopicsLength = claimTopics.length;\\n        for (uint256 i = 0; i < claimTopicsLength; i++) {\\n            tds.tradeDealRequiredClaimTopics[tradeDealId].push(claimTopics[i]);\\n            tds.tradeDeals[tradeDealId].requiredClaimTopics.push(claimTopics[i]);\\n        }\\n        \\n        // Return result instead of emitting event\\n        ClaimTopicsResult memory result;\\n        result.tradeDealId = tradeDealId;\\n        result.claimTopics = claimTopics;\\n        return result;\\n    }\\n    \\n    // Get required claim topics for a trade deal\\n    function _getTradeDealRequiredClaimTopics(uint256 tradeDealId) internal view returns (uint256[] memory) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        require(_tradeDealExists(tradeDealId), \\\"Trade deal does not exist\\\");\\n        \\n        return tds.tradeDealRequiredClaimTopics[tradeDealId];\\n    }\\n    \\n    // Check if a trade deal is fully funded\\n    function _isTradeDealFunded(uint256 tradeDealId) internal view returns (bool) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        require(_tradeDealExists(tradeDealId), \\\"Trade deal does not exist\\\");\\n        \\n        uint256 fundingTarget = tds.tradeDealFundingTargets[tradeDealId];\\n        if (fundingTarget == 0) {\\n            return false; // No funding target set\\n        }\\n        \\n        return tds.tradeDealUsdcBalances[tradeDealId] >= fundingTarget;\\n    }\\n    \\n    // Check if a trade deal is fully repaid\\n    function _isTradeDealRepaid(uint256 tradeDealId) internal view returns (bool) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        require(_tradeDealExists(tradeDealId), \\\"Trade deal does not exist\\\");\\n        \\n        uint256 totalDebt = tds.tradeDealTotalDebt[tradeDealId];\\n        if (totalDebt == 0) {\\n            return false; // No debt established yet\\n        }\\n        \\n        return tds.tradeDealRepaidAmounts[tradeDealId] >= totalDebt;\\n    }\\n    \\n    // Return struct for funding withdrawal\\n    struct FundingWithdrawalResult {\\n        uint256 tradeDealId;\\n        address recipient;\\n        uint256 amount;\\n    }\\n    \\n    // Allow fundees to withdraw USDC funding\\n    function _withdrawTradeDealFunding(uint256 tradeDealId, address borrowerAddress) internal returns (FundingWithdrawalResult memory) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        require(_tradeDealExists(tradeDealId), \\\"Trade deal does not exist\\\");\\n        require(tds.tradeDeals[tradeDealId].active, \\\"Trade deal is not active\\\");\\n        require(_isTradeDealFunded(tradeDealId), \\\"Trade deal is not fully funded\\\");\\n        require(!tds.tradeDealFundingWithdrawn[tradeDealId], \\\"Funding already withdrawn\\\");\\n        require(borrowerAddress != address(0), \\\"Borrower address cannot be zero\\\"); // Added check\\n        \\n        // Verify caller has deposited invoices as collateral\\n        uint256[] storage invoices = tds.tradeDealInvoices[tradeDealId];\\n        require(invoices.length > 0, \\\"No invoices deposited as collateral\\\");\\n        \\n        // Get token addresses\\n        TradeDeal storage tradeDeal = tds.tradeDeals[tradeDealId];\\n        address usdcToken = tradeDeal.usdcAddress;\\n        require(usdcToken != address(0), \\\"Trade deal USDC address not set\\\");\\n        \\n        // Get the funding amount\\n        uint256 fundingAmount = tds.tradeDealFundingTargets[tradeDealId];\\n        \\n        // Mark as withdrawn\\n        tds.tradeDealFundingWithdrawn[tradeDealId] = true;\\n        \\n        // Distribute USDC via FeeDistributor: fees to receivers, adjusted principal to borrower\\n        IFeeDistributor feeDistributor = IFeeDistributor(address(this));\\n        (address adjustedReceiver, uint256 adjustedAmount, , ) = feeDistributor.distributeAmounts(borrowerAddress, fundingAmount);\\n        require(adjustedReceiver == borrowerAddress, \\\"FeeDistributor: Adjusted amount sent to wrong receiver\\\");\\n        \\n        // Update USDC balance\\n        tds.tradeDealUsdcBalances[tradeDealId] -= fundingAmount;\\n        \\n        // Return result instead of emitting event\\n        FundingWithdrawalResult memory result;\\n        result.tradeDealId = tradeDealId;\\n        result.recipient = borrowerAddress; // Recipient is the borrower\\n        result.amount = adjustedAmount;    // Amount is the adjusted principal received\\n        return result;\\n    }\\n    \\n    // Return struct for debt repayment\\n    struct RepaymentResult {\\n        uint256 tradeDealId;\\n        address repayer;\\n        uint256 amount;\\n        bool fullyRepaid;\\n    }\\n    \\n    // Allow fundees to repay their debt\\n    function _repayTradeDeal(uint256 tradeDealId, uint256 amount) internal returns (RepaymentResult memory) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        require(_tradeDealExists(tradeDealId), \\\"Trade deal does not exist\\\");\\n        require(tds.tradeDeals[tradeDealId].active, \\\"Trade deal is not active\\\");\\n        require(tds.tradeDealFundingWithdrawn[tradeDealId], \\\"Funding not yet withdrawn\\\");\\n        \\n        // Calculate remaining debt\\n        uint256 totalDebt = tds.tradeDealTotalDebt[tradeDealId];\\n        uint256 repaidSoFar = tds.tradeDealRepaidAmounts[tradeDealId];\\n        uint256 remainingDebt = totalDebt > repaidSoFar ? totalDebt - repaidSoFar : 0;\\n        \\n        require(remainingDebt > 0, \\\"No remaining debt to repay\\\");\\n        require(amount <= remainingDebt, \\\"Amount exceeds remaining debt\\\");\\n        \\n        // Get USDC token\\n        TradeDeal storage tradeDeal = tds.tradeDeals[tradeDealId];\\n        address usdcToken = tradeDeal.usdcAddress;\\n        require(usdcToken != address(0), \\\"Trade deal USDC address not set\\\");\\n        \\n        // Transfer USDC from repayer to contract\\n        IERC20(usdcToken).safeTransferFrom(msg.sender, address(this), amount);\\n        \\n        // Update repaid amount\\n        tds.tradeDealRepaidAmounts[tradeDealId] += amount;\\n        \\n        // Update USDC balance\\n        tds.tradeDealUsdcBalances[tradeDealId] += amount;\\n        \\n        // Check if fully repaid\\n        bool fullyRepaid = (tds.tradeDealRepaidAmounts[tradeDealId] >= totalDebt);\\n        \\n        // Return result instead of emitting event\\n        RepaymentResult memory result;\\n        result.tradeDealId = tradeDealId;\\n        result.repayer = msg.sender;\\n        result.amount = amount;\\n        result.fullyRepaid = fullyRepaid;\\n        return result;\\n    }\\n\\n    function _repayTradeDealForBorrower(uint256 tradeDealId, address borrower, uint256 amount) internal returns (RepaymentResult memory) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        require(_tradeDealExists(tradeDealId), \\\"Trade deal does not exist\\\");\\n        require(tds.tradeDeals[tradeDealId].active, \\\"Trade deal is not active\\\");\\n        require(tds.tradeDealFundingWithdrawn[tradeDealId], \\\"Funding not yet withdrawn\\\");\\n        \\n        // Calculate remaining debt\\n        uint256 totalDebt = tds.tradeDealTotalDebt[tradeDealId];\\n        uint256 repaidSoFar = tds.tradeDealRepaidAmounts[tradeDealId];\\n        uint256 remainingDebt = totalDebt > repaidSoFar ? totalDebt - repaidSoFar : 0;\\n        \\n        require(remainingDebt > 0, \\\"No remaining debt to repay\\\");\\n        require(amount <= remainingDebt, \\\"Amount exceeds remaining debt\\\");\\n        \\n        // Get USDC token\\n        TradeDeal storage tradeDeal = tds.tradeDeals[tradeDealId];\\n        address usdcToken = tradeDeal.usdcAddress;\\n        require(usdcToken != address(0), \\\"Trade deal USDC address not set\\\");\\n        \\n        // Transfer USDC from borrower to contract\\n        IERC20(usdcToken).safeTransferFrom(msg.sender, address(this), amount);\\n        \\n        // Update repaid amount\\n        tds.tradeDealRepaidAmounts[tradeDealId] += amount;\\n        \\n        // Update USDC balance\\n        tds.tradeDealUsdcBalances[tradeDealId] += amount;\\n        \\n        // Check if fully repaid\\n        bool fullyRepaid = (tds.tradeDealRepaidAmounts[tradeDealId] >= totalDebt);\\n\\n        // Return result instead of emitting event\\n        RepaymentResult memory result;\\n        result.tradeDealId = tradeDealId;\\n        result.repayer = borrower;\\n        result.amount = amount;\\n        result.fullyRepaid = fullyRepaid;\\n    \\n        return result;\\n    }\\n    \\n    // Check if a user has a valid Collateral token balance for the trade deal\\n    function _hasCollateralTokenBalance(uint256 tradeDealId, address user, uint256 requiredAmount) internal view returns (bool) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        require(_tradeDealExists(tradeDealId), \\\"Trade deal does not exist\\\");\\n        \\n        TradeDeal storage tradeDeal = tds.tradeDeals[tradeDealId];\\n        address collateralToken = tradeDeal.collateralAddress;\\n        \\n        if (collateralToken == address(0)) return false;\\n        \\n        uint256 collateralBalance = ICollateral(collateralToken).balanceOf(user);\\n        return collateralBalance >= requiredAmount;\\n    }\\n    \\n    // Allow funders to redeem their Collateral tokens\\n    function _redeemCollateralTokens(uint256 tradeDealId, uint256 collateralAmount) internal returns (CollateralRedemptionResult memory) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        require(_tradeDealExists(tradeDealId), \\\"Trade deal does not exist\\\");\\n        require(_isTradeDealRepaid(tradeDealId), \\\"Trade deal not fully repaid\\\");\\n        \\n        // Get token addresses\\n        TradeDeal storage tradeDeal = tds.tradeDeals[tradeDealId];\\n        address collateralToken = tradeDeal.collateralAddress;\\n        address usdcToken = tradeDeal.usdcAddress;\\n        require(collateralToken != address(0), \\\"Collateral token address not set\\\");\\n        require(usdcToken != address(0), \\\"USDC token address not set\\\");\\n        \\n        // Check Collateral balance\\n        uint256 collateralBalance = ICollateral(collateralToken).balanceOf(msg.sender);\\n        require(collateralBalance >= collateralAmount, \\\"Insufficient Collateral balance\\\");\\n        \\n        // Calculate proportional USDC amount\\n        uint256 totalCollateralSupply = ICollateral(collateralToken).totalSupply();\\n        require(totalCollateralSupply > 0, \\\"No Collateral tokens in circulation\\\");\\n        \\n        uint256 usdcBalance = tds.tradeDealUsdcBalances[tradeDealId];\\n        uint256 usdcAmount = (usdcBalance * collateralAmount) / totalCollateralSupply;\\n        \\n        require(usdcAmount > 0, \\\"Calculated USDC amount is zero\\\");\\n        require(usdcBalance >= usdcAmount, \\\"Insufficient USDC balance in trade deal\\\");\\n        \\n        // Burn Collateral tokens\\n        ICollateral(collateralToken).burn(msg.sender, collateralAmount);\\n        \\n        // Transfer USDC to redeemer\\n        require(IERC20(usdcToken).transfer(msg.sender, usdcAmount), \\\"USDC transfer failed\\\");\\n        \\n        // Update USDC balance\\n        tds.tradeDealUsdcBalances[tradeDealId] -= usdcAmount;\\n        \\n        // Return result instead of emitting event\\n        CollateralRedemptionResult memory result;\\n        result.tradeDealId = tradeDealId;\\n        result.redeemer = msg.sender;\\n        result.collateralAmount = collateralAmount;\\n        result.usdcAmount = usdcAmount;\\n        return result;\\n    }\\n    \\n    // Role-based access control functions\\n    \\n    /**\\n     * @notice Set a user's role for a specific trade deal\\n     * @param tradeDealId The ID of the trade deal\\n     * @param user The address of the user\\n     * @param role The role to assign\\n     */\\n    function _setUserRole(uint256 tradeDealId, address user, Role role) internal {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        require(_tradeDealExists(tradeDealId), \\\"Trade deal does not exist\\\");\\n        require(user != address(0), \\\"Invalid user address\\\");\\n        \\n        tds.userRoles[tradeDealId][user] = role;\\n        \\n        // If user is being set as a borrower, also add them as a participant\\n        if (role == Role.BORROWER && !tds.tradeDealParticipants[tradeDealId][user]) {\\n            tds.tradeDealParticipants[tradeDealId][user] = true;\\n        }\\n    }\\n    \\n    /**\\n     * @notice Check if a user has a specific role in a trade deal\\n     * @param tradeDealId The ID of the trade deal\\n     * @param user The address of the user\\n     * @param role The role to check\\n     * @return True if the user has the role, false otherwise\\n     */\\n    function _hasRole(uint256 tradeDealId, address user, Role role) internal view returns (bool) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        if (!_tradeDealExists(tradeDealId)) return false;\\n        if (user == address(0)) return false;\\n        \\n        // Contract owner is always considered to have ADMIN role\\n        if (role == Role.ADMIN && user == LibDiamond.contractOwner()) return true;\\n        \\n        return tds.userRoles[tradeDealId][user] == role;\\n    }\\n    \\n    /**\\n     * @notice Check if a user has a specific permission in a trade deal\\n     * @param tradeDealId The ID of the trade deal\\n     * @param user The address of the user\\n     * @param permission The permission to check\\n     * @return True if the user has the permission, false otherwise\\n     */\\n    function _hasPermission(uint256 tradeDealId, address user, uint256 permission) internal view returns (bool) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        if (!_tradeDealExists(tradeDealId)) return false;\\n        if (user == address(0)) return false;\\n        \\n        // Contract owner always has all permissions\\n        if (user == LibDiamond.contractOwner()) return true;\\n        \\n        TradeDeal storage tradeDeal = tds.tradeDeals[tradeDealId];\\n        \\n        // Check operation mode defaults\\n        if (tradeDeal.operationMode == OperationMode.CENTRALIZED) {\\n            // In centralized mode, only contract owner can withdraw funds\\n            if (permission == PERMISSION_WITHDRAW_FUNDS) {\\n                return user == LibDiamond.contractOwner();\\n            }\\n            \\n            // Anyone can deposit funds or collateral in centralized mode\\n            if (permission == PERMISSION_DEPOSIT_FUNDS || permission == PERMISSION_DEPOSIT_COLLATERAL) {\\n                return true;\\n            }\\n        }\\n        else if (tradeDeal.operationMode == OperationMode.SELF_SERVICE) {\\n            // In self-service mode, borrowers can withdraw funds\\n            if (permission == PERMISSION_WITHDRAW_FUNDS && _hasRole(tradeDealId, user, Role.BORROWER)) {\\n                return true;\\n            }\\n            \\n            // Anyone can deposit funds or collateral in self-service mode\\n            if (permission == PERMISSION_DEPOSIT_FUNDS || permission == PERMISSION_DEPOSIT_COLLATERAL) {\\n                return true;\\n            }\\n        }\\n        \\n        // For HYBRID and CUSTOM modes, check explicit permissions\\n        return (tds.userPermissions[tradeDealId][user] & permission) != 0;\\n    }\\n    \\n    /**\\n     * @notice Extract the totalAmount from an NFT invoice metadata\\n     * @param tokenId The token ID of the NFT invoice\\n     * @return The totalAmount value from the metadata, or 0 if not found\\n     */\\n    function _getNFTInvoiceTotalAmount(uint256 tokenId) internal view returns (uint256) {\\n        // Check if this token exists\\n        require(IERC721(address(this)).ownerOf(tokenId) != address(0), \\\"Token does not exist\\\");\\n        \\n        // Get the totalAmount attribute using AttributeLib\\n        AttributeStorage storage attributeStore = AttributeLib.attributeStorage();\\n        AttributeContract storage attributeContract = attributeStore.attributes;\\n        \\n        // Try to get the \\\"totalAmount\\\" attribute\\n        Attribute memory totalAmountAttr = AttributeLib._getAttribute(\\n            attributeContract,\\n            tokenId,\\n            \\\"totalAmount\\\"\\n        );\\n        \\n        // If the attribute exists and has a value, convert it to uint256\\n        if (bytes(totalAmountAttr.value).length > 0) {\\n            // Convert string to uint256\\n            uint256 amount = _stringToUint(totalAmountAttr.value);\\n            return amount;\\n        }\\n        \\n        // Fallback logic - if totalAmount attribute is not found, check if there's an \\\"amount\\\" attribute\\n        Attribute memory amountAttr = AttributeLib._getAttribute(\\n            attributeContract,\\n            tokenId,\\n            \\\"amount\\\"\\n        );\\n        \\n        if (bytes(amountAttr.value).length > 0) {\\n            uint256 amount = _stringToUint(amountAttr.value);\\n            return amount;\\n        }\\n        \\n        // If no attributes found, return 0\\n        return 0;\\n    }\\n    \\n    /**\\n     * @notice Helper function to convert a string to uint256\\n     * @param s The string to convert\\n     * @return result The converted uint256 value\\n     */\\n    function _stringToUint(string memory s) internal pure returns (uint256 result) {\\n        bytes memory b = bytes(s);\\n        result = 0;\\n        for (uint i = 0; i < b.length; i++) {\\n            uint8 c = uint8(b[i]);\\n            if (c >= 48 && c <= 57) {\\n                result = result * 10 + (c - 48);\\n            }\\n        }\\n        return result;\\n    }\\n    \\n    // Return struct for self-service funding withdrawal\\n    struct SelfServiceWithdrawalResult {\\n        uint256 tradeDealId;\\n        address recipient;\\n        uint256 amount;\\n    }\\n    \\n    /**\\n     * @notice Allow borrowers to withdraw funds in self-service mode\\n     * @param tradeDealId The ID of the trade deal\\n     * @param borrower The address of the borrower\\n     * @return Result struct with withdrawal details\\n     */\\n    function _withdrawTradeDealFundingSelf(uint256 tradeDealId, address borrower) internal returns (FundingWithdrawalResult memory) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        require(_tradeDealExists(tradeDealId), \\\"Trade deal does not exist\\\");\\n        \\n        TradeDeal storage tradeDeal = tds.tradeDeals[tradeDealId];\\n        require(tradeDeal.active, \\\"Trade deal is not active\\\");\\n        require(tradeDeal.operationMode == OperationMode.SELF_SERVICE, \\\"Trade deal is not in self-service mode\\\");\\n        require(_isTradeDealFunded(tradeDealId), \\\"Trade deal is not fully funded\\\");\\n        require(!tds.tradeDealFundingWithdrawn[tradeDealId], \\\"Funding already withdrawn\\\");\\n        \\n        // Check if borrower is a participant and has the BORROWER role\\n        require(_isTradeDealParticipant(tradeDealId, borrower), \\\"Not a participant in this trade deal\\\");\\n        require(_hasRole(tradeDealId, borrower, Role.BORROWER), \\\"Must have borrower role to withdraw funds\\\");\\n        \\n        // Verify the borrower has deposited invoices as collateral\\n        bool hasDepositedInvoice = false;\\n        uint256[] storage invoices = tds.tradeDealInvoices[tradeDealId];\\n        for (uint256 i = 0; i < invoices.length; i++) {\\n            if (tds.invoiceDepositors[tradeDealId][invoices[i]] == borrower) {\\n                hasDepositedInvoice = true;\\n                break;\\n            }\\n        }\\n        require(hasDepositedInvoice, \\\"Borrower has not deposited any invoices\\\");\\n        \\n        // Get token addresses\\n        address usdcToken = tradeDeal.usdcAddress;\\n        require(usdcToken != address(0), \\\"Trade deal USDC address not set\\\");\\n        \\n        // Get the funding amount\\n        uint256 fundingAmount = tds.tradeDealFundingTargets[tradeDealId];\\n        \\n        // Mark as withdrawn\\n        tds.tradeDealFundingWithdrawn[tradeDealId] = true;\\n        \\n        // Distribute USDC via FeeDistributor: fees to receivers, adjusted principal to borrower\\n        IFeeDistributor feeDistributor = IFeeDistributor(address(this));\\n        (address adjustedReceiver, uint256 adjustedAmount, , ) = feeDistributor.distributeAmounts(borrower, fundingAmount);\\n        require(adjustedReceiver == borrower, \\\"FeeDistributor: Adjusted amount sent to wrong receiver\\\");\\n        \\n        // Update USDC balance\\n        tds.tradeDealUsdcBalances[tradeDealId] -= fundingAmount;\\n        \\n        // Return result\\n        FundingWithdrawalResult memory result;\\n        result.tradeDealId = tradeDealId;\\n        result.recipient = borrower;\\n        result.amount = adjustedAmount; // Amount is the adjusted principal received\\n        return result;\\n    }\\n\\n    // Helper function to create or get a Collateral token for a trade deal\\n    function _createOrGetCollateralToken(uint256 tradeDealId, string memory symbol) internal returns (address) {\\n        address collateralAddress = address(0);\\n        \\n        // First try to get the Collateral token address from the CollateralTokenFactoryFacet\\n        (bool checkSuccess, bytes memory checkData) = address(this).staticcall(\\n            abi.encodeWithSignature(\\n                \\\"getCollateralTokenAddress(uint256)\\\",\\n                tradeDealId\\n            )\\n        );\\n        \\n        // If the check was successful and returned a non-zero address, use that\\n        if (checkSuccess && checkData.length > 0) {\\n            address existingCollateralAddress = abi.decode(checkData, (address));\\n            if (existingCollateralAddress != address(0)) {\\n                return existingCollateralAddress;\\n            }\\n        }\\n        \\n        // If we still don't have a Collateral token address, try to create one\\n        string memory tokenName = string(abi.encodePacked(symbol, \\\"-C\\\"));\\n        string memory tokenSymbol = string(abi.encodePacked(symbol, \\\"-C\\\"));\\n\\n        // Call the CollateralTokenFactoryFacet to create a new Collateral token\\n        (bool success, bytes memory data) = address(this).call(\\n            abi.encodeWithSignature(\\n                \\\"createCollateralToken(uint256,string,string,bool)\\\",\\n                tradeDealId,\\n                tokenName,\\n                tokenSymbol,\\n                true // Enable restrictions by default\\n            )\\n        );\\n        \\n        // If the call was successful, use the returned token address\\n        if (success && data.length > 0) {\\n            collateralAddress = abi.decode(data, (address));\\n        }\\n        \\n        // If we still don't have a Collateral token address, try to get it again\\n        if (collateralAddress == address(0)) {\\n            (bool retrySuccess, bytes memory retryData) = address(this).staticcall(\\n                abi.encodeWithSignature(\\n                    \\\"getCollateralTokenAddress(uint256)\\\",\\n                    tradeDealId\\n                )\\n            );\\n            \\n            // If the retry was successful and returned a non-zero address, use that\\n            if (retrySuccess && retryData.length > 0) {\\n                address retryCollateralAddress = abi.decode(retryData, (address));\\n                if (retryCollateralAddress != address(0)) {\\n                    collateralAddress = retryCollateralAddress;\\n                }\\n            }\\n        }\\n        \\n        return collateralAddress;\\n    }\\n}\\n\",\"keccak256\":\"0x4e0c14da1691f4aa47c4b71fb5a6a887bf65dd5f8fdf924cc2f4e84a093a5256\",\"license\":\"MIT\"},\"contracts/utilities/Modifiers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nimport \\\"../libraries/LibDiamond.sol\\\";\\n\\ncontract Modifiers {\\n\\n    modifier onlyOwner() {\\n        require(LibDiamond.contractOwner() == msg.sender || address(this) == msg.sender,\\n            \\\"not authorized to call function\\\");\\n        _;\\n    }\\n\\n    // Removed diamondOwner() function to avoid selector collision.\\n    // Use owner() from OwnershipFacet (IERC173) instead.\\n\\n}\",\"keccak256\":\"0xd1b5a54d763fd2a4831cbfc84d4d17a21c23c52a22e65acb3ce715f3e0f7d773\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n}\\n\",\"keccak256\":\"0x7434453e6d3b7d0e5d0eb7846ffdbc27f0ccf3b163591263739b628074dc103a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "libraries": {
    "AddressSet": "0x8aB21bf41B908d9CBee3E78e97033E3916840cA8",
    "AttributeLib": "0x9d0749b64bEDB024B1AaF596c84029E67635D43c",
    "Base64": "0x8d10857B6d2bEA12d67A888F3E995ea142Db701E",
    "Bytes32Set": "0xB01Cf1Baf9ABFa5309AE3ff649B31ae87A80AE62",
    "CarbonCreditLib": "0x44520E8dA039d4D7D460f5DBF6C1eC347De53A7C",
    "DiamondFactoryLib": "0x50353159348c63A448eDAfC6d5ef81CF9C1cdE9a",
    "DiamondLib": "0x2Be86045394c8096b3b9d9449A08Cc74afEd5717",
    "ERC721AEnumerationLib": "0x6a9A6D75AECEfB8dC969D5Ef5ea3EcF57e29706d",
    "ERC721ALib": "0x8F980CBDb943c2794FdA47D82d81a71d31A815DE",
    "Identity": "0x4C6fE457018d32B9aEc2aA99F655b5aCD7d0D658",
    "IdentityFactory": "0x5c970fD1E772548Be3Dc3de62381Fd8b2b3fAb96",
    "IdentitySystemStorage": "0x05d7966Acfa90f529e3844B1d1b7702dBde7789c",
    "LibDiamond": "0x30Fb10d923CfFC1151B8CFe683A937F414854570",
    "MerkleProver": "0x6361c8F2C7Fb1498C15C5e90Ed477ee8cEeC9f5f",
    "MetadataLib": "0xEA17bE869d528F2c3e4F7cae231ebE4BE42BeB75",
    "MultiSaleLib": "0x3b12B21202DaC69552E7b1f9D4D3E31085c7a378",
    "Strings": "0x26375f3210F1F8C90f53c663AC44F3d4a86b12A6",
    "StringsLib": "0x928c0A50586514D291087403befe3540E3631ECd",
    "SVGTemplatesLib": "0xFD3DfE346d5d5c8C90313036BC1b1E3De29FCb33",
    "UInt256Set": "0x908B9bE15117446dE01d076Ecb75D9210E182D97",
    "VariablePriceLib": "0x92E3cBf7226518CF757c48446067de1485CCCcBb"
  },
  "devdoc": {
    "details": "This contract is implemented as a diamond facet following the EIP-2535 Diamond Standard.      It provides functionality for managing digital identities and their associated claims.      The identity system follows a claims-based model where trusted issuers can make      verifiable claims about identities. The contract enforces permissions so that only      authorized issuers can manage specific claim types.      Key functionalities include:      - Adding and removing identities to/from the registry      - Managing claims (attestations) about identities      - Verifying identity status and claim ownership      - Access control for trusted issuers      All state is stored via the diamond storage pattern in IdentitySystemStorage.",
    "events": {
      "ContractAddressesSet()": {
        "details": "Emitted when contract addresses are configured"
      }
    },
    "kind": "dev",
    "methods": {
      "addIdentity(address,address)": {
        "custom:access": "Restricted to trusted issuers (via isTrustedIssuer modifier)",
        "custom:event": "Emits IdentityAdded event upon successful registration",
        "details": "Registers a new identity in the system, associating the provided      address with an identity contract. This operation can only be performed      by approved trusted issuers. The function checks that the address is valid      and that no identity is already registered for the given address.",
        "params": {
          "_address": "The address of the user who will own the identity",
          "identityData": "The IIdentity contract instance representing the identity"
        }
      },
      "batchAddIdentity(address[],address[])": {
        "details": "this function can only be called by a trusted issuer",
        "params": {
          "_addresses": "array of addresses of the identities",
          "identityDatas": "array of addresses of the identity data contracts"
        }
      },
      "constructor": {
        "details": "Empty constructor as initialization happens through the diamond"
      },
      "contains(address)": {
        "params": {
          "_userAddress": "address of the identity user"
        },
        "returns": {
          "_0": "bool"
        }
      },
      "getRegistryUsers()": {
        "returns": {
          "_0": "array of addresses of the users"
        }
      },
      "identity(address)": {
        "params": {
          "_userAddress": "address of the identity user"
        },
        "returns": {
          "_0": "identityData address of the identity data contract"
        }
      },
      "isRegistryUser(address)": {
        "params": {
          "_registryUser": "address of the registry user"
        },
        "returns": {
          "_0": "bool"
        }
      },
      "isVerified(address)": {
        "params": {
          "_address": "address of the identity user or identity contract"
        },
        "returns": {
          "_0": "bool"
        }
      },
      "removeIdentity(address)": {
        "custom:access": "Restricted to trusted issuers (via isTrustedIssuer modifier)",
        "custom:event": "Emits IdentityRemoved event upon successful removal",
        "details": "Deletes an identity from the system, removing all its associated data      and mappings. This operation can only be performed by trusted issuers.      The function performs several cleanup steps:      1. Removes the identity from the identities mapping      2. Updates the owner mapping      3. Removes the identity from the identityOwners array (using swap and pop)",
        "params": {
          "_identity": "The address of the identity to remove"
        }
      }
    },
    "title": "IdentityRegistryFacet",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addIdentity(address,address)": {
        "notice": "Adds a new identity to the registry"
      },
      "batchAddIdentity(address[],address[])": {
        "notice": "batch add identities to the registry"
      },
      "contains(address)": {
        "notice": "does an identity exist"
      },
      "getRegistryUsers()": {
        "notice": "get the users of the registry"
      },
      "identity(address)": {
        "notice": "get the identity data contract address of an identity"
      },
      "isRegistryUser(address)": {
        "notice": "is the user a registry user"
      },
      "isVerified(address)": {
        "notice": "is an identity verified"
      },
      "removeIdentity(address)": {
        "notice": "Removes an identity from the registry"
      }
    },
    "notice": "Manages a decentralized identity registry with claim verification capabilities",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}