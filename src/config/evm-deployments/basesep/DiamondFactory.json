{
  "address": "0x4376001036419D5713F08a708BDC28c10a74AEea",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Create2EmptyBytecode",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedDeployment",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "needed",
          "type": "uint256"
        }
      ],
      "name": "InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "controllerAddress",
          "type": "address"
        }
      ],
      "name": "ControllerAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "controllerAddress",
          "type": "address"
        }
      ],
      "name": "ControllerRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "diamond",
          "type": "address"
        }
      ],
      "name": "DiamondAdd",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "diamond",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "factory",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "svgManager",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            }
          ],
          "indexed": false,
          "internalType": "struct DiamondSettings",
          "name": "settings",
          "type": "tuple"
        }
      ],
      "name": "DiamondCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "diamond",
          "type": "address"
        }
      ],
      "name": "DiamondRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_controller",
          "type": "address"
        }
      ],
      "name": "addController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "factory",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "svgManager",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            }
          ],
          "internalType": "struct DiamondSettings",
          "name": "params",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "diamondInit",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_calldata",
          "type": "bytes"
        },
        {
          "internalType": "string",
          "name": "facets",
          "type": "string"
        }
      ],
      "name": "createFromSet",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "diamondAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        }
      ],
      "name": "getDiamondAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "facetSet",
          "type": "string"
        }
      ],
      "name": "getFacets",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "facetAddress",
              "type": "address"
            },
            {
              "internalType": "enum IDiamondCut.FacetCutAction",
              "name": "action",
              "type": "uint8"
            },
            {
              "internalType": "bytes4[]",
              "name": "functionSelectors",
              "type": "bytes4[]"
            }
          ],
          "internalType": "struct IDiamondCut.FacetCut[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "setName",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "facetAddress",
                  "type": "address"
                },
                {
                  "internalType": "enum IDiamondCut.FacetCutAction",
                  "name": "action",
                  "type": "uint8"
                },
                {
                  "internalType": "bytes4[]",
                  "name": "functionSelectors",
                  "type": "bytes4[]"
                }
              ],
              "internalType": "struct IDiamondCut.FacetCut[]",
              "name": "facetAddresses",
              "type": "tuple[]"
            },
            {
              "internalType": "bytes",
              "name": "diamondBytecode",
              "type": "bytes"
            }
          ],
          "internalType": "struct DiamondFactoryInit",
          "name": "initData",
          "type": "tuple"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isController",
      "outputs": [
        {
          "internalType": "bool",
          "name": "allowed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "relinquishControl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "facetSet",
          "type": "string"
        }
      ],
      "name": "removeFacets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "facetSet",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "facetAddress",
              "type": "address"
            },
            {
              "internalType": "enum IDiamondCut.FacetCutAction",
              "name": "action",
              "type": "uint8"
            },
            {
              "internalType": "bytes4[]",
              "name": "functionSelectors",
              "type": "bytes4[]"
            }
          ],
          "internalType": "struct IDiamondCut.FacetCut[]",
          "name": "facetAddress",
          "type": "tuple[]"
        }
      ],
      "name": "setFacets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbols",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd84a59f17d0eef4d4ad7c3e97f2fdb4a191c1f5ac6b55b74e280a52482297d6a",
  "receipt": {
    "to": null,
    "from": "0x9508f0Da19eC1C52D9C52611e4433159492bb93b",
    "contractAddress": "0x4376001036419D5713F08a708BDC28c10a74AEea",
    "transactionIndex": 14,
    "gasUsed": "3224670",
    "logsBloom": "0x
    "blockHash": "0x40ddb9247a5f8bab3603d811a2650e3623dd85eefb46589973a88841cec9254c",
    "transactionHash": "0xd84a59f17d0eef4d4ad7c3e97f2fdb4a191c1f5ac6b55b74e280a52482297d6a",
    "logs": [],
    "blockNumber": 26013742,
    "cumulativeGasUsed": "4792157",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "e39248fcba6c46a8a0b49ab62402d196",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Create2EmptyBytecode\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedDeployment\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"controllerAddress\",\"type\":\"address\"}],\"name\":\"ControllerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"controllerAddress\",\"type\":\"address\"}],\"name\":\"ControllerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"diamond\",\"type\":\"address\"}],\"name\":\"DiamondAdd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"diamond\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"svgManager\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"indexed\":false,\"internalType\":\"struct DiamondSettings\",\"name\":\"settings\",\"type\":\"tuple\"}],\"name\":\"DiamondCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"diamond\",\"type\":\"address\"}],\"name\":\"DiamondRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"addController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"svgManager\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct DiamondSettings\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"diamondInit\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"facets\",\"type\":\"string\"}],\"name\":\"createFromSet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"diamondAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"getDiamondAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"facetSet\",\"type\":\"string\"}],\"name\":\"getFacets\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"facetAddress\",\"type\":\"address\"},{\"internalType\":\"enum IDiamondCut.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct IDiamondCut.FacetCut[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"setName\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"facetAddress\",\"type\":\"address\"},{\"internalType\":\"enum IDiamondCut.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct IDiamondCut.FacetCut[]\",\"name\":\"facetAddresses\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"diamondBytecode\",\"type\":\"bytes\"}],\"internalType\":\"struct DiamondFactoryInit\",\"name\":\"initData\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isController\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relinquishControl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"facetSet\",\"type\":\"string\"}],\"name\":\"removeFacets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"facetSet\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"facetAddress\",\"type\":\"address\"},{\"internalType\":\"enum IDiamondCut.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct IDiamondCut.FacetCut[]\",\"name\":\"facetAddress\",\"type\":\"tuple[]\"}],\"name\":\"setFacets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbols\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"Create2EmptyBytecode()\":[{\"details\":\"There's no code to deploy.\"}],\"FailedDeployment()\":[{\"details\":\"The deployment failed.\"}],\"InsufficientBalance(uint256,uint256)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"addController(address)\":{\"details\":\"Add an address allowed to control this contract\"},\"createFromSet((address,address,address,string,string),address,bytes,string)\":{\"params\":{\"_calldata\":\"the calldata to pass to the diamond init contract\",\"diamondInit\":\"the diamond init contract\",\"params\":\"diamond init parameters\"}},\"exists(string)\":{\"params\":{\"symbol\":\"the symbol of the diamond to check\"}},\"getDiamondAddress(string)\":{\"params\":{\"symbol\":\"the symbol of the diamond\"},\"returns\":{\"_0\":\"the address of the diamond\"}},\"initialize((string,(address,uint8,bytes4[])[],bytes))\":{\"params\":{\"initData\":\"the initialization data for the factory\"}},\"isController(address)\":{\"details\":\"Check if this address is a controller\"},\"relinquishControl()\":{\"details\":\"Remove the sender address from the list of controllers\"},\"removeFacets(string)\":{\"params\":{\"facetSet\":\"the facet set to remove\"}},\"setFacets(string,(address,uint8,bytes4[])[])\":{\"params\":{\"facetAddress\":\"the facet to set\",\"facetSet\":\"the index of the facet to set\"}},\"symbols()\":{\"returns\":{\"_0\":\"the symbols\"}}},\"title\":\"Diamond Factory\",\"version\":1},\"userdoc\":{\"events\":{\"ControllerAdded(address,address)\":{\"notice\":\"emitted when a controller is added.\"},\"ControllerRemoved(address,address)\":{\"notice\":\"emitted when a controller is removed.\"}},\"kind\":\"user\",\"methods\":{\"createFromSet((address,address,address,string,string),address,bytes,string)\":{\"notice\":\"create a new diamond token with the given symbol\"},\"exists(string)\":{\"notice\":\"check if the token exists\"},\"getDiamondAddress(string)\":{\"notice\":\"get the address of the diamond\"},\"getFacets(string)\":{\"notice\":\"get the facets for the diamond\"},\"initialize((string,(address,uint8,bytes4[])[],bytes))\":{\"notice\":\"initiiate the factory\"},\"removeFacets(string)\":{\"notice\":\"remote a facet set from the factory\"},\"setFacets(string,(address,uint8,bytes4[])[])\":{\"notice\":\"set a number of template facets on this factory\"},\"symbols()\":{\"notice\":\"get all the symbols from the factory\"}},\"notice\":\"This contract is used to create new Diamond contracts.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DiamondFactory.sol\":\"DiamondFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":11},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../token/ERC721/IERC721.sol\\\";\\n\",\"keccak256\":\"0xc4d7ebf63eb2f6bf3fee1b6c0ee775efa9f31b4843a5511d07eea147e212932d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721Metadata} from \\\"../token/ERC721/extensions/IERC721Metadata.sol\\\";\\n\",\"keccak256\":\"0x10352a138718fca7ad1b34f3dacdb6705b90dae140558a19a1813b44181f51a9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721Receiver} from \\\"../token/ERC721/IERC721Receiver.sol\\\";\\n\",\"keccak256\":\"0x12808acc0c2cbc0b9068755711fd79483b4f002e850d25e0e72e735765b6cd99\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0x4ea01544758fd2c7045961904686bfe232d2220a04ecaa2d6b08dac17827febf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC-721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC-721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5dc63d1c6a12fe1b17793e1745877b2fcbe1964c3edfd0a482fac21ca8f18261\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC-721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC-721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xb5afb8e8eebc4d1c6404df2f5e1e6d2c3d24fd01e5dfc855314951ecfaae462d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Errors} from \\\"./Errors.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert Errors.InsufficientBalance(address(this).balance, amount);\\n        }\\n\\n        (bool success, bytes memory returndata) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            _revert(returndata);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {Errors.FailedCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert Errors.InsufficientBalance(address(this).balance, value);\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\\n     * of an unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {Errors.FailedCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            assembly (\\\"memory-safe\\\") {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaaa1d17c1129b127a4a401db2fbd72960e2671474be3d08cae71ccdc42f7624c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Create2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Create2.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Errors} from \\\"./Errors.sol\\\";\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2 {\\n    /**\\n     * @dev There's no code to deploy.\\n     */\\n    error Create2EmptyBytecode();\\n\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address addr) {\\n        if (address(this).balance < amount) {\\n            revert Errors.InsufficientBalance(address(this).balance, amount);\\n        }\\n        if (bytecode.length == 0) {\\n            revert Create2EmptyBytecode();\\n        }\\n        assembly (\\\"memory-safe\\\") {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n            // if no address was created, and returndata is not empty, bubble revert\\n            if and(iszero(addr), not(iszero(returndatasize()))) {\\n                let p := mload(0x40)\\n                returndatacopy(p, 0, returndatasize())\\n                revert(p, returndatasize())\\n            }\\n        }\\n        if (addr == address(0)) {\\n            revert Errors.FailedDeployment();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address addr) {\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40) // Get free memory pointer\\n\\n            // |                   | \\u2193 ptr ...  \\u2193 ptr + 0x0B (start) ...  \\u2193 ptr + 0x20 ...  \\u2193 ptr + 0x40 ...   |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | bytecodeHash      |                                                        CCCCCCCCCCCCC...CC |\\n            // | salt              |                                      BBBBBBBBBBBBB...BB                   |\\n            // | deployer          | 000000...0000AAAAAAAAAAAAAAAAAAA...AA                                     |\\n            // | 0xFF              |            FF                                                             |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | memory            | 000000...00FFAAAAAAAAAAAAAAAAAAA...AABBBBBBBBBBBBB...BBCCCCCCCCCCCCC...CC |\\n            // | keccak(start, 85) |            \\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191 |\\n\\n            mstore(add(ptr, 0x40), bytecodeHash)\\n            mstore(add(ptr, 0x20), salt)\\n            mstore(ptr, deployer) // Right-aligned with 12 preceding garbage bytes\\n            let start := add(ptr, 0x0b) // The hashed data starts at the final garbage byte which we will set to 0xff\\n            mstore8(start, 0xff)\\n            addr := and(keccak256(start, 85), 0xffffffffffffffffffffffffffffffffffffffff)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbb7e8401583d26268ea9103013bcdcd90866a7718bd91105ebd21c9bf11f4f06\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of common custom errors used in multiple contracts\\n *\\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\\n * It is recommended to avoid relying on the error API for critical functionality.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Errors {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedCall();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error FailedDeployment();\\n\\n    /**\\n     * @dev A necessary precompile is missing.\\n     */\\n    error MissingPrecompile(address);\\n}\\n\",\"keccak256\":\"0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Panic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Panic.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Helper library for emitting standardized panic codes.\\n *\\n * ```solidity\\n * contract Example {\\n *      using Panic for uint256;\\n *\\n *      // Use any of the declared internal constants\\n *      function foo() { Panic.GENERIC.panic(); }\\n *\\n *      // Alternatively\\n *      function foo() { Panic.panic(Panic.GENERIC); }\\n * }\\n * ```\\n *\\n * Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].\\n *\\n * _Available since v5.1._\\n */\\n// slither-disable-next-line unused-state\\nlibrary Panic {\\n    /// @dev generic / unspecified error\\n    uint256 internal constant GENERIC = 0x00;\\n    /// @dev used by the assert() builtin\\n    uint256 internal constant ASSERT = 0x01;\\n    /// @dev arithmetic underflow or overflow\\n    uint256 internal constant UNDER_OVERFLOW = 0x11;\\n    /// @dev division or modulo by zero\\n    uint256 internal constant DIVISION_BY_ZERO = 0x12;\\n    /// @dev enum conversion error\\n    uint256 internal constant ENUM_CONVERSION_ERROR = 0x21;\\n    /// @dev invalid encoding in storage\\n    uint256 internal constant STORAGE_ENCODING_ERROR = 0x22;\\n    /// @dev empty array pop\\n    uint256 internal constant EMPTY_ARRAY_POP = 0x31;\\n    /// @dev array out of bounds access\\n    uint256 internal constant ARRAY_OUT_OF_BOUNDS = 0x32;\\n    /// @dev resource error (too large allocation or too large array)\\n    uint256 internal constant RESOURCE_ERROR = 0x41;\\n    /// @dev calling invalid internal function\\n    uint256 internal constant INVALID_INTERNAL_FUNCTION = 0x51;\\n\\n    /// @dev Reverts with a panic code. Recommended to use with\\n    /// the internal constants with predefined codes.\\n    function panic(uint256 code) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, 0x4e487b71)\\n            mstore(0x20, code)\\n            revert(0x1c, 0x24)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SafeCast} from \\\"./math/SafeCast.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    using SafeCast for *;\\n\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev The string being parsed contains characters that are not in scope of the given base.\\n     */\\n    error StringsInvalidChar();\\n\\n    /**\\n     * @dev The string being parsed is not a properly formatted address.\\n     */\\n    error StringsInvalidAddressFormat();\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            assembly (\\\"memory-safe\\\") {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                assembly (\\\"memory-safe\\\") {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its checksummed ASCII `string` hexadecimal\\n     * representation, according to EIP-55.\\n     */\\n    function toChecksumHexString(address addr) internal pure returns (string memory) {\\n        bytes memory buffer = bytes(toHexString(addr));\\n\\n        // hash the hex part of buffer (skip length + 2 bytes, length 40)\\n        uint256 hashValue;\\n        assembly (\\\"memory-safe\\\") {\\n            hashValue := shr(96, keccak256(add(buffer, 0x22), 40))\\n        }\\n\\n        for (uint256 i = 41; i > 1; --i) {\\n            // possible values for buffer[i] are 48 (0) to 57 (9) and 97 (a) to 102 (f)\\n            if (hashValue & 0xf > 7 && uint8(buffer[i]) > 96) {\\n                // case shift by xoring with 0x20\\n                buffer[i] ^= 0x20;\\n            }\\n            hashValue >>= 4;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n\\n    /**\\n     * @dev Parse a decimal string and returns the value as a `uint256`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `[0-9]*`\\n     * - The result must fit into an `uint256` type\\n     */\\n    function parseUint(string memory input) internal pure returns (uint256) {\\n        return parseUint(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseUint} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `[0-9]*`\\n     * - The result must fit into an `uint256` type\\n     */\\n    function parseUint(string memory input, uint256 begin, uint256 end) internal pure returns (uint256) {\\n        (bool success, uint256 value) = tryParseUint(input, begin, end);\\n        if (!success) revert StringsInvalidChar();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseUint-string} that returns false if the parsing fails because of an invalid character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseUint(string memory input) internal pure returns (bool success, uint256 value) {\\n        return _tryParseUintUncheckedBounds(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseUint-string-uint256-uint256} that returns false if the parsing fails because of an invalid\\n     * character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseUint(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, uint256 value) {\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\n        return _tryParseUintUncheckedBounds(input, begin, end);\\n    }\\n\\n    /**\\n     * @dev Implementation of {tryParseUint} that does not check bounds. Caller should make sure that\\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\\n     */\\n    function _tryParseUintUncheckedBounds(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) private pure returns (bool success, uint256 value) {\\n        bytes memory buffer = bytes(input);\\n\\n        uint256 result = 0;\\n        for (uint256 i = begin; i < end; ++i) {\\n            uint8 chr = _tryParseChr(bytes1(_unsafeReadBytesOffset(buffer, i)));\\n            if (chr > 9) return (false, 0);\\n            result *= 10;\\n            result += chr;\\n        }\\n        return (true, result);\\n    }\\n\\n    /**\\n     * @dev Parse a decimal string and returns the value as a `int256`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `[-+]?[0-9]*`\\n     * - The result must fit in an `int256` type.\\n     */\\n    function parseInt(string memory input) internal pure returns (int256) {\\n        return parseInt(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseInt-string} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `[-+]?[0-9]*`\\n     * - The result must fit in an `int256` type.\\n     */\\n    function parseInt(string memory input, uint256 begin, uint256 end) internal pure returns (int256) {\\n        (bool success, int256 value) = tryParseInt(input, begin, end);\\n        if (!success) revert StringsInvalidChar();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseInt-string} that returns false if the parsing fails because of an invalid character or if\\n     * the result does not fit in a `int256`.\\n     *\\n     * NOTE: This function will revert if the absolute value of the result does not fit in a `uint256`.\\n     */\\n    function tryParseInt(string memory input) internal pure returns (bool success, int256 value) {\\n        return _tryParseIntUncheckedBounds(input, 0, bytes(input).length);\\n    }\\n\\n    uint256 private constant ABS_MIN_INT256 = 2 ** 255;\\n\\n    /**\\n     * @dev Variant of {parseInt-string-uint256-uint256} that returns false if the parsing fails because of an invalid\\n     * character or if the result does not fit in a `int256`.\\n     *\\n     * NOTE: This function will revert if the absolute value of the result does not fit in a `uint256`.\\n     */\\n    function tryParseInt(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, int256 value) {\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\n        return _tryParseIntUncheckedBounds(input, begin, end);\\n    }\\n\\n    /**\\n     * @dev Implementation of {tryParseInt} that does not check bounds. Caller should make sure that\\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\\n     */\\n    function _tryParseIntUncheckedBounds(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) private pure returns (bool success, int256 value) {\\n        bytes memory buffer = bytes(input);\\n\\n        // Check presence of a negative sign.\\n        bytes1 sign = begin == end ? bytes1(0) : bytes1(_unsafeReadBytesOffset(buffer, begin)); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\n        bool positiveSign = sign == bytes1(\\\"+\\\");\\n        bool negativeSign = sign == bytes1(\\\"-\\\");\\n        uint256 offset = (positiveSign || negativeSign).toUint();\\n\\n        (bool absSuccess, uint256 absValue) = tryParseUint(input, begin + offset, end);\\n\\n        if (absSuccess && absValue < ABS_MIN_INT256) {\\n            return (true, negativeSign ? -int256(absValue) : int256(absValue));\\n        } else if (absSuccess && negativeSign && absValue == ABS_MIN_INT256) {\\n            return (true, type(int256).min);\\n        } else return (false, 0);\\n    }\\n\\n    /**\\n     * @dev Parse a hexadecimal string (with or without \\\"0x\\\" prefix), and returns the value as a `uint256`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `(0x)?[0-9a-fA-F]*`\\n     * - The result must fit in an `uint256` type.\\n     */\\n    function parseHexUint(string memory input) internal pure returns (uint256) {\\n        return parseHexUint(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseHexUint} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `(0x)?[0-9a-fA-F]*`\\n     * - The result must fit in an `uint256` type.\\n     */\\n    function parseHexUint(string memory input, uint256 begin, uint256 end) internal pure returns (uint256) {\\n        (bool success, uint256 value) = tryParseHexUint(input, begin, end);\\n        if (!success) revert StringsInvalidChar();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseHexUint-string} that returns false if the parsing fails because of an invalid character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseHexUint(string memory input) internal pure returns (bool success, uint256 value) {\\n        return _tryParseHexUintUncheckedBounds(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseHexUint-string-uint256-uint256} that returns false if the parsing fails because of an\\n     * invalid character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseHexUint(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, uint256 value) {\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\n        return _tryParseHexUintUncheckedBounds(input, begin, end);\\n    }\\n\\n    /**\\n     * @dev Implementation of {tryParseHexUint} that does not check bounds. Caller should make sure that\\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\\n     */\\n    function _tryParseHexUintUncheckedBounds(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) private pure returns (bool success, uint256 value) {\\n        bytes memory buffer = bytes(input);\\n\\n        // skip 0x prefix if present\\n        bool hasPrefix = (end > begin + 1) && bytes2(_unsafeReadBytesOffset(buffer, begin)) == bytes2(\\\"0x\\\"); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\n        uint256 offset = hasPrefix.toUint() * 2;\\n\\n        uint256 result = 0;\\n        for (uint256 i = begin + offset; i < end; ++i) {\\n            uint8 chr = _tryParseChr(bytes1(_unsafeReadBytesOffset(buffer, i)));\\n            if (chr > 15) return (false, 0);\\n            result *= 16;\\n            unchecked {\\n                // Multiplying by 16 is equivalent to a shift of 4 bits (with additional overflow check).\\n                // This guaratees that adding a value < 16 will not cause an overflow, hence the unchecked.\\n                result += chr;\\n            }\\n        }\\n        return (true, result);\\n    }\\n\\n    /**\\n     * @dev Parse a hexadecimal string (with or without \\\"0x\\\" prefix), and returns the value as an `address`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `(0x)?[0-9a-fA-F]{40}`\\n     */\\n    function parseAddress(string memory input) internal pure returns (address) {\\n        return parseAddress(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseAddress} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `(0x)?[0-9a-fA-F]{40}`\\n     */\\n    function parseAddress(string memory input, uint256 begin, uint256 end) internal pure returns (address) {\\n        (bool success, address value) = tryParseAddress(input, begin, end);\\n        if (!success) revert StringsInvalidAddressFormat();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseAddress-string} that returns false if the parsing fails because the input is not a properly\\n     * formatted address. See {parseAddress} requirements.\\n     */\\n    function tryParseAddress(string memory input) internal pure returns (bool success, address value) {\\n        return tryParseAddress(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseAddress-string-uint256-uint256} that returns false if the parsing fails because input is not a properly\\n     * formatted address. See {parseAddress} requirements.\\n     */\\n    function tryParseAddress(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, address value) {\\n        if (end > bytes(input).length || begin > end) return (false, address(0));\\n\\n        bool hasPrefix = (end > begin + 1) && bytes2(_unsafeReadBytesOffset(bytes(input), begin)) == bytes2(\\\"0x\\\"); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\n        uint256 expectedLength = 40 + hasPrefix.toUint() * 2;\\n\\n        // check that input is the correct length\\n        if (end - begin == expectedLength) {\\n            // length guarantees that this does not overflow, and value is at most type(uint160).max\\n            (bool s, uint256 v) = _tryParseHexUintUncheckedBounds(input, begin, end);\\n            return (s, address(uint160(v)));\\n        } else {\\n            return (false, address(0));\\n        }\\n    }\\n\\n    function _tryParseChr(bytes1 chr) private pure returns (uint8) {\\n        uint8 value = uint8(chr);\\n\\n        // Try to parse `chr`:\\n        // - Case 1: [0-9]\\n        // - Case 2: [a-f]\\n        // - Case 3: [A-F]\\n        // - otherwise not supported\\n        unchecked {\\n            if (value > 47 && value < 58) value -= 48;\\n            else if (value > 96 && value < 103) value -= 87;\\n            else if (value > 64 && value < 71) value -= 55;\\n            else return type(uint8).max;\\n        }\\n\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Reads a bytes32 from a bytes array without bounds checking.\\n     *\\n     * NOTE: making this function internal would mean it could be used with memory unsafe offset, and marking the\\n     * assembly block as such would prevent some optimizations.\\n     */\\n    function _unsafeReadBytesOffset(bytes memory buffer, uint256 offset) private pure returns (bytes32 value) {\\n        // This is not memory safe in the general case, but all calls to this private function are within bounds.\\n        assembly (\\\"memory-safe\\\") {\\n            value := mload(add(buffer, add(0x20, offset)))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x44f87e91783e88415bde66f1a63f6c7f0076f2d511548820407d5c95643ac56c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Panic} from \\\"../Panic.sol\\\";\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * SafeCast.toUint(condition));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n\\n        // The following calculation ensures accurate ceiling division without overflow.\\n        // Since a is non-zero, (a - 1) / b will not overflow.\\n        // The largest possible result occurs when (a - 1) / b is type(uint256).max,\\n        // but the largest value we can obtain is type(uint256).max - 1, which happens\\n        // when a = type(uint256).max and b = 1.\\n        unchecked {\\n            return SafeCast.toUint(a > 0) * ((a - 1) / b + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     *\\n     * Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2\\u00b2\\u2075\\u2076 and mod 2\\u00b2\\u2075\\u2076 - 1, then use\\n            // the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2\\u00b2\\u2075\\u2076 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2\\u00b2\\u2075\\u2076. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                Panic.panic(ternary(denominator == 0, Panic.DIVISION_BY_ZERO, Panic.UNDER_OVERFLOW));\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2\\u00b2\\u2075\\u2076 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2\\u00b2\\u2075\\u2076. Now that denominator is an odd number, it has an inverse modulo 2\\u00b2\\u2075\\u2076 such\\n            // that denominator * inv \\u2261 1 mod 2\\u00b2\\u2075\\u2076. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv \\u2261 1 mod 2\\u2074.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u2076\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b3\\u00b2\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2076\\u2074\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u00b2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b2\\u2075\\u2076\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2\\u00b2\\u2075\\u2076. Since the preconditions guarantee that the outcome is\\n            // less than 2\\u00b2\\u2075\\u2076, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        return mulDiv(x, y, denominator) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculate the modular multiplicative inverse of a number in Z/nZ.\\n     *\\n     * If n is a prime, then Z/nZ is a field. In that case all elements are inversible, except 0.\\n     * If n is not a prime, then Z/nZ is not a field, and some elements might not be inversible.\\n     *\\n     * If the input value is not inversible, 0 is returned.\\n     *\\n     * NOTE: If you know for sure that n is (big) a prime, it may be cheaper to use Fermat's little theorem and get the\\n     * inverse using `Math.modExp(a, n - 2, n)`. See {invModPrime}.\\n     */\\n    function invMod(uint256 a, uint256 n) internal pure returns (uint256) {\\n        unchecked {\\n            if (n == 0) return 0;\\n\\n            // The inverse modulo is calculated using the Extended Euclidean Algorithm (iterative version)\\n            // Used to compute integers x and y such that: ax + ny = gcd(a, n).\\n            // When the gcd is 1, then the inverse of a modulo n exists and it's x.\\n            // ax + ny = 1\\n            // ax = 1 + (-y)n\\n            // ax \\u2261 1 (mod n) # x is the inverse of a modulo n\\n\\n            // If the remainder is 0 the gcd is n right away.\\n            uint256 remainder = a % n;\\n            uint256 gcd = n;\\n\\n            // Therefore the initial coefficients are:\\n            // ax + ny = gcd(a, n) = n\\n            // 0a + 1n = n\\n            int256 x = 0;\\n            int256 y = 1;\\n\\n            while (remainder != 0) {\\n                uint256 quotient = gcd / remainder;\\n\\n                (gcd, remainder) = (\\n                    // The old remainder is the next gcd to try.\\n                    remainder,\\n                    // Compute the next remainder.\\n                    // Can't overflow given that (a % gcd) * (gcd // (a % gcd)) <= gcd\\n                    // where gcd is at most n (capped to type(uint256).max)\\n                    gcd - remainder * quotient\\n                );\\n\\n                (x, y) = (\\n                    // Increment the coefficient of a.\\n                    y,\\n                    // Decrement the coefficient of n.\\n                    // Can overflow, but the result is casted to uint256 so that the\\n                    // next value of y is \\\"wrapped around\\\" to a value between 0 and n - 1.\\n                    x - y * int256(quotient)\\n                );\\n            }\\n\\n            if (gcd != 1) return 0; // No inverse exists.\\n            return ternary(x < 0, n - uint256(-x), uint256(x)); // Wrap the result if it's negative.\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {invMod}. More efficient, but only works if `p` is known to be a prime greater than `2`.\\n     *\\n     * From https://en.wikipedia.org/wiki/Fermat%27s_little_theorem[Fermat's little theorem], we know that if p is\\n     * prime, then `a**(p-1) \\u2261 1 mod p`. As a consequence, we have `a * a**(p-2) \\u2261 1 mod p`, which means that\\n     * `a**(p-2)` is the modular multiplicative inverse of a in Fp.\\n     *\\n     * NOTE: this function does NOT check that `p` is a prime greater than `2`.\\n     */\\n    function invModPrime(uint256 a, uint256 p) internal view returns (uint256) {\\n        unchecked {\\n            return Math.modExp(a, p - 2, p);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m)\\n     *\\n     * Requirements:\\n     * - modulus can't be zero\\n     * - underlying staticcall to precompile must succeed\\n     *\\n     * IMPORTANT: The result is only valid if the underlying call succeeds. When using this function, make\\n     * sure the chain you're using it on supports the precompiled contract for modular exponentiation\\n     * at address 0x05 as specified in https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise,\\n     * the underlying function will succeed given the lack of a revert, but the result may be incorrectly\\n     * interpreted as 0.\\n     */\\n    function modExp(uint256 b, uint256 e, uint256 m) internal view returns (uint256) {\\n        (bool success, uint256 result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m).\\n     * It includes a success flag indicating if the operation succeeded. Operation will be marked as failed if trying\\n     * to operate modulo 0 or if the underlying precompile reverted.\\n     *\\n     * IMPORTANT: The result is only valid if the success flag is true. When using this function, make sure the chain\\n     * you're using it on supports the precompiled contract for modular exponentiation at address 0x05 as specified in\\n     * https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise, the underlying function will succeed given the lack\\n     * of a revert, but the result may be incorrectly interpreted as 0.\\n     */\\n    function tryModExp(uint256 b, uint256 e, uint256 m) internal view returns (bool success, uint256 result) {\\n        if (m == 0) return (false, 0);\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40)\\n            // | Offset    | Content    | Content (Hex)                                                      |\\n            // |-----------|------------|--------------------------------------------------------------------|\\n            // | 0x00:0x1f | size of b  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x20:0x3f | size of e  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x40:0x5f | size of m  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x60:0x7f | value of b | 0x<.............................................................b> |\\n            // | 0x80:0x9f | value of e | 0x<.............................................................e> |\\n            // | 0xa0:0xbf | value of m | 0x<.............................................................m> |\\n            mstore(ptr, 0x20)\\n            mstore(add(ptr, 0x20), 0x20)\\n            mstore(add(ptr, 0x40), 0x20)\\n            mstore(add(ptr, 0x60), b)\\n            mstore(add(ptr, 0x80), e)\\n            mstore(add(ptr, 0xa0), m)\\n\\n            // Given the result < m, it's guaranteed to fit in 32 bytes,\\n            // so we can use the memory scratch space located at offset 0.\\n            success := staticcall(gas(), 0x05, ptr, 0xc0, 0x00, 0x20)\\n            result := mload(0x00)\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {modExp} that supports inputs of arbitrary length.\\n     */\\n    function modExp(bytes memory b, bytes memory e, bytes memory m) internal view returns (bytes memory) {\\n        (bool success, bytes memory result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Variant of {tryModExp} that supports inputs of arbitrary length.\\n     */\\n    function tryModExp(\\n        bytes memory b,\\n        bytes memory e,\\n        bytes memory m\\n    ) internal view returns (bool success, bytes memory result) {\\n        if (_zeroBytes(m)) return (false, new bytes(0));\\n\\n        uint256 mLen = m.length;\\n\\n        // Encode call args in result and move the free memory pointer\\n        result = abi.encodePacked(b.length, e.length, mLen, b, e, m);\\n\\n        assembly (\\\"memory-safe\\\") {\\n            let dataPtr := add(result, 0x20)\\n            // Write result on top of args to avoid allocating extra memory.\\n            success := staticcall(gas(), 0x05, dataPtr, mload(result), dataPtr, mLen)\\n            // Overwrite the length.\\n            // result.length > returndatasize() is guaranteed because returndatasize() == m.length\\n            mstore(result, mLen)\\n            // Set the memory pointer after the returned data.\\n            mstore(0x40, add(dataPtr, mLen))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether the provided byte array is zero.\\n     */\\n    function _zeroBytes(bytes memory byteArray) private pure returns (bool) {\\n        for (uint256 i = 0; i < byteArray.length; ++i) {\\n            if (byteArray[i] != 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * This method is based on Newton's method for computing square roots; the algorithm is restricted to only\\n     * using integer operations.\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        unchecked {\\n            // Take care of easy edge cases when a == 0 or a == 1\\n            if (a <= 1) {\\n                return a;\\n            }\\n\\n            // In this function, we use Newton's method to get a root of `f(x) := x\\u00b2 - a`. It involves building a\\n            // sequence x_n that converges toward sqrt(a). For each iteration x_n, we also define the error between\\n            // the current value as `\\u03b5_n = | x_n - sqrt(a) |`.\\n            //\\n            // For our first estimation, we consider `e` the smallest power of 2 which is bigger than the square root\\n            // of the target. (i.e. `2**(e-1) \\u2264 sqrt(a) < 2**e`). We know that `e \\u2264 128` because `(2\\u00b9\\u00b2\\u2078)\\u00b2 = 2\\u00b2\\u2075\\u2076` is\\n            // bigger than any uint256.\\n            //\\n            // By noticing that\\n            // `2**(e-1) \\u2264 sqrt(a) < 2**e \\u2192 (2**(e-1))\\u00b2 \\u2264 a < (2**e)\\u00b2 \\u2192 2**(2*e-2) \\u2264 a < 2**(2*e)`\\n            // we can deduce that `e - 1` is `log2(a) / 2`. We can thus compute `x_n = 2**(e-1)` using a method similar\\n            // to the msb function.\\n            uint256 aa = a;\\n            uint256 xn = 1;\\n\\n            if (aa >= (1 << 128)) {\\n                aa >>= 128;\\n                xn <<= 64;\\n            }\\n            if (aa >= (1 << 64)) {\\n                aa >>= 64;\\n                xn <<= 32;\\n            }\\n            if (aa >= (1 << 32)) {\\n                aa >>= 32;\\n                xn <<= 16;\\n            }\\n            if (aa >= (1 << 16)) {\\n                aa >>= 16;\\n                xn <<= 8;\\n            }\\n            if (aa >= (1 << 8)) {\\n                aa >>= 8;\\n                xn <<= 4;\\n            }\\n            if (aa >= (1 << 4)) {\\n                aa >>= 4;\\n                xn <<= 2;\\n            }\\n            if (aa >= (1 << 2)) {\\n                xn <<= 1;\\n            }\\n\\n            // We now have x_n such that `x_n = 2**(e-1) \\u2264 sqrt(a) < 2**e = 2 * x_n`. This implies \\u03b5_n \\u2264 2**(e-1).\\n            //\\n            // We can refine our estimation by noticing that the middle of that interval minimizes the error.\\n            // If we move x_n to equal 2**(e-1) + 2**(e-2), then we reduce the error to \\u03b5_n \\u2264 2**(e-2).\\n            // This is going to be our x_0 (and \\u03b5_0)\\n            xn = (3 * xn) >> 1; // \\u03b5_0 := | x_0 - sqrt(a) | \\u2264 2**(e-2)\\n\\n            // From here, Newton's method give us:\\n            // x_{n+1} = (x_n + a / x_n) / 2\\n            //\\n            // One should note that:\\n            // x_{n+1}\\u00b2 - a = ((x_n + a / x_n) / 2)\\u00b2 - a\\n            //              = ((x_n\\u00b2 + a) / (2 * x_n))\\u00b2 - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2) - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2 - 4 * a * x_n\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u2074 - 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u00b2 - a)\\u00b2 / (2 * x_n)\\u00b2\\n            //              = ((x_n\\u00b2 - a) / (2 * x_n))\\u00b2\\n            //              \\u2265 0\\n            // Which proves that for all n \\u2265 1, sqrt(a) \\u2264 x_n\\n            //\\n            // This gives us the proof of quadratic convergence of the sequence:\\n            // \\u03b5_{n+1} = | x_{n+1} - sqrt(a) |\\n            //         = | (x_n + a / x_n) / 2 - sqrt(a) |\\n            //         = | (x_n\\u00b2 + a - 2*x_n*sqrt(a)) / (2 * x_n) |\\n            //         = | (x_n - sqrt(a))\\u00b2 / (2 * x_n) |\\n            //         = | \\u03b5_n\\u00b2 / (2 * x_n) |\\n            //         = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //\\n            // For the first iteration, we have a special case where x_0 is known:\\n            // \\u03b5_1 = \\u03b5_0\\u00b2 / | (2 * x_0) |\\n            //     \\u2264 (2**(e-2))\\u00b2 / (2 * (2**(e-1) + 2**(e-2)))\\n            //     \\u2264 2**(2*e-4) / (3 * 2**(e-1))\\n            //     \\u2264 2**(e-3) / 3\\n            //     \\u2264 2**(e-3-log2(3))\\n            //     \\u2264 2**(e-4.5)\\n            //\\n            // For the following iterations, we use the fact that, 2**(e-1) \\u2264 sqrt(a) \\u2264 x_n:\\n            // \\u03b5_{n+1} = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //         \\u2264 (2**(e-k))\\u00b2 / (2 * 2**(e-1))\\n            //         \\u2264 2**(2*e-2*k) / 2**e\\n            //         \\u2264 2**(e-2*k)\\n            xn = (xn + a / xn) >> 1; // \\u03b5_1 := | x_1 - sqrt(a) | \\u2264 2**(e-4.5)  -- special case, see above\\n            xn = (xn + a / xn) >> 1; // \\u03b5_2 := | x_2 - sqrt(a) | \\u2264 2**(e-9)    -- general case with k = 4.5\\n            xn = (xn + a / xn) >> 1; // \\u03b5_3 := | x_3 - sqrt(a) | \\u2264 2**(e-18)   -- general case with k = 9\\n            xn = (xn + a / xn) >> 1; // \\u03b5_4 := | x_4 - sqrt(a) | \\u2264 2**(e-36)   -- general case with k = 18\\n            xn = (xn + a / xn) >> 1; // \\u03b5_5 := | x_5 - sqrt(a) | \\u2264 2**(e-72)   -- general case with k = 36\\n            xn = (xn + a / xn) >> 1; // \\u03b5_6 := | x_6 - sqrt(a) | \\u2264 2**(e-144)  -- general case with k = 72\\n\\n            // Because e \\u2264 128 (as discussed during the first estimation phase), we know have reached a precision\\n            // \\u03b5_6 \\u2264 2**(e-144) < 1. Given we're operating on integers, then we can ensure that xn is now either\\n            // sqrt(a) or sqrt(a) + 1.\\n            return xn - SafeCast.toUint(xn > a / xn);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && result * result < a);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        uint256 exp;\\n        unchecked {\\n            exp = 128 * SafeCast.toUint(value > (1 << 128) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 64 * SafeCast.toUint(value > (1 << 64) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 32 * SafeCast.toUint(value > (1 << 32) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 16 * SafeCast.toUint(value > (1 << 16) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 8 * SafeCast.toUint(value > (1 << 8) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 4 * SafeCast.toUint(value > (1 << 4) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 2 * SafeCast.toUint(value > (1 << 2) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            result += SafeCast.toUint(value > 1);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 10 ** result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        uint256 isGt;\\n        unchecked {\\n            isGt = SafeCast.toUint(value > (1 << 128) - 1);\\n            value >>= isGt * 128;\\n            result += isGt * 16;\\n\\n            isGt = SafeCast.toUint(value > (1 << 64) - 1);\\n            value >>= isGt * 64;\\n            result += isGt * 8;\\n\\n            isGt = SafeCast.toUint(value > (1 << 32) - 1);\\n            value >>= isGt * 32;\\n            result += isGt * 4;\\n\\n            isGt = SafeCast.toUint(value > (1 << 16) - 1);\\n            value >>= isGt * 16;\\n            result += isGt * 2;\\n\\n            result += SafeCast.toUint(value > (1 << 8) - 1);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << (result << 3) < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0xa00be322d7db5786750ce0ac7e2f5b633ac30a5ed5fa1ced1e74acfc19acecea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n\\n    /**\\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\\n     */\\n    function toUint(bool b) internal pure returns (uint256 u) {\\n        assembly (\\\"memory-safe\\\") {\\n            u := iszero(iszero(b))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, int256 a, int256 b) internal pure returns (int256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * int256(SafeCast.toUint(condition)));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // Formula from the \\\"Bit Twiddling Hacks\\\" by Sean Eron Anderson.\\n            // Since `n` is a signed integer, the generated bytecode will use the SAR opcode to perform the right shift,\\n            // taking advantage of the most significant (or \\\"sign\\\" bit) in two's complement representation.\\n            // This opcode adds new most significant bits set to the value of the previous most significant bit. As a result,\\n            // the mask will either be `bytes32(0)` (if n is positive) or `~bytes32(0)` (if n is negative).\\n            int256 mask = n >> 255;\\n\\n            // A `bytes32(0)` mask leaves the input unchanged, while a `~bytes32(0)` mask complements it.\\n            return uint256((n + mask) ^ mask);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb1970fac7b64e6c09611e6691791e848d5e3fe410fa5899e7df2e0afd77a99e3\",\"license\":\"MIT\"},\"contracts/Diamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n*\\n* Implementation of a diamond.\\n/******************************************************************************/\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC721Metadata.sol\\\";\\n\\nimport \\\"./interfaces/IERC721Enumerable.sol\\\";\\nimport \\\"./libraries/DiamondLib.sol\\\";\\nimport { LibDiamond } from \\\"./libraries/LibDiamond.sol\\\";\\nimport { DiamondLib } from \\\"./libraries/DiamondLib.sol\\\";\\nimport { IDiamondCut } from \\\"./interfaces/IDiamondCut.sol\\\";\\nimport { DiamondSettings } from \\\"./interfaces/IDiamond.sol\\\";\\nimport { IERC173 } from \\\"./interfaces/IERC173.sol\\\";\\n\\n/**\\n * @title Diamond\\n * @dev Core diamond proxy contract implementing the EIP-2535 Diamond Standard\\n * Functionality has been separated into facets:\\n * - DiamondCutFacet: Handles diamond cut operations\\n * - DiamondLoupeFacet: Provides introspection functions\\n * - OwnershipFacet: Handles ownership operations\\n */\\ncontract Diamond is Initializable, IERC173 {\\n    /**\\n     * @notice Initialize the Diamond contract\\n     * @param _owner The owner of the contract\\n     * @param params Diamond settings including name and symbol\\n     * @param _facets The initial facets to add\\n     * @param diamondInit The initialization contract\\n     * @param _calldata The initialization calldata\\n     */\\n    function initialize(\\n        address _owner, \\n        DiamondSettings memory params,\\n        IDiamondCut.FacetCut[] memory _facets,\\n        address diamondInit,\\n        bytes calldata _calldata\\n    ) public initializer {\\n        // Set up interfaces\\n        LibDiamond.diamondStorage().supportedInterfaces[type(IERC165).interfaceId] = true;\\n        LibDiamond.diamondStorage().supportedInterfaces[type(IDiamondCut).interfaceId] = true;\\n        LibDiamond.diamondStorage().supportedInterfaces[type(IERC173).interfaceId] = true;\\n        LibDiamond.diamondStorage().supportedInterfaces[type(IERC721).interfaceId] = true;\\n        LibDiamond.diamondStorage().supportedInterfaces[type(IERC721Metadata).interfaceId] = true;\\n        LibDiamond.diamondStorage().supportedInterfaces[type(IERC721Enumerable).interfaceId] = true;\\n\\n        // Initialize the diamond\\n        LibDiamond.diamondCut(_facets, diamondInit, _calldata);\\n\\n        // Set the owner\\n        LibDiamond.setContractOwner(_owner);\\n\\n        // Set the symbol and name of the diamond\\n        DiamondLib.diamondStorage().diamondContract.settings.owner = _owner;\\n        DiamondLib.diamondStorage().diamondContract.metadata['symbol'] = params.symbol;\\n        DiamondLib.diamondStorage().diamondContract.metadata['name'] = params.name;\\n\\n        // Initialize the upgrade timelock\\n        LibDiamond.initializeUpgradeTimelock(LibDiamond.DEFAULT_UPGRADE_TIMELOCK);\\n    }\\n\\n    /**\\n     * @notice Transfer ownership to a new address\\n     * @param _newOwner The new owner address\\n     */\\n    function transferOwnership(address _newOwner) external override {\\n        LibDiamond.enforceIsContractOwner();\\n        LibDiamond.setContractOwner(_newOwner);\\n    }\\n\\n    /**\\n     * @notice Get the current contract owner\\n     * @return owner_ The current owner address\\n     */\\n    function owner() external override view returns (address owner_) {\\n        owner_ = LibDiamond.contractOwner();\\n    }\\n\\n    /**\\n     * @notice Get this contract's address\\n     * @return This contract's address\\n     */\\n    function diamondAddress() external view returns (address) {\\n        return address(this);\\n    }\\n\\n    /**\\n     * @dev Diamond Proxy fallback function\\n     * Find facet for function that is called and execute the\\n     * function using delegatecall\\n     */\\n    fallback() external payable {\\n        LibDiamond.DiamondStorage storage ds;\\n        bytes32 position = LibDiamond.DIAMOND_STORAGE_POSITION;\\n        // Get diamond storage\\n        assembly {\\n            ds.slot := position\\n        }\\n        // Get facet from function selector\\n        address facet = ds.selectorToFacetAndPosition[msg.sig].facetAddress;\\n        require(facet != address(0), \\\"Diamond: Function does not exist\\\");\\n        \\n        // Execute external function from facet using delegatecall and return any value\\n        assembly {\\n            // Copy function selector and any arguments\\n            calldatacopy(0, 0, calldatasize())\\n            // Execute function call using the facet\\n            let result := delegatecall(gas(), facet, 0, calldatasize(), 0, 0)\\n            // Get any return value\\n            returndatacopy(0, 0, returndatasize())\\n            // Return any return value or error back to the caller\\n            switch result\\n                case 0 {\\n                    revert(0, returndatasize())\\n                }\\n                default {\\n                    return(0, returndatasize())\\n                }\\n        }\\n    }\\n\\n    // Allow contract to receive ETH\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x225a60ba30317470015674dad6486fa063eb01d451b3db232ea060e253bec2c2\",\"license\":\"MIT\"},\"contracts/DiamondFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Create2.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"./libraries/DiamondLib.sol\\\";\\nimport \\\"./libraries/DiamondFactoryLib.sol\\\";\\nimport \\\"./Diamond.sol\\\";\\nimport \\\"./interfaces/IDiamondFactory.sol\\\";\\nimport \\\"./interfaces/IMetadata.sol\\\";\\nimport \\\"./interfaces/IControllable.sol\\\";\\n\\nimport \\\"./utilities/Controllable.sol\\\";\\n\\n/// @title Diamond Factory\\n/// @notice This contract is used to create new Diamond contracts.\\ncontract DiamondFactory is Initializable, Controllable {\\n\\n    using DiamondFactoryLib for DiamondFactoryLib.DiamondFactoryStorage;\\n\\n    event DiamondCreated(\\n        address indexed factory,\\n        address indexed diamond,\\n        string indexed symbol,\\n        DiamondSettings settings\\n    );\\n\\n    event DiamondAdd(\\n        address indexed factory,\\n        string indexed symbol,\\n        address indexed diamond\\n    );\\n\\n    event DiamondRemoved(\\n        address indexed factory,\\n        string indexed symbol,\\n        address indexed diamond\\n    );\\n\\n    constructor() {\\n        _addController(msg.sender);\\n    }\\n\\n    /// @notice initiiate the factory\\n    /// @param initData the initialization data for the factory\\n    function initialize(DiamondFactoryInit memory initData) public initializer {\\n        DiamondFactoryLib.diamondFactoryStorage()._addFacetSet(\\n            initData.setName,\\n            initData.facetAddresses\\n        );\\n        DiamondFactoryLib\\n            .diamondFactoryStorage()\\n            .contractData\\n            .defaultFacetSet = initData.setName;\\n    }\\n\\n    /// @notice get the facets for the diamond\\n    function getFacets(string memory facetSet)\\n        external\\n        view\\n        returns (IDiamondCut.FacetCut[] memory)\\n    {\\n        return\\n            DiamondFactoryLib.diamondFactoryStorage().contractData.facetsToAdd[\\n                facetSet\\n            ];\\n    }\\n\\n    /// @notice set a number of template facets on this factory\\n    /// @param facetSet the index of the facet to set\\n    /// @param facetAddress the facet to set\\n    function setFacets(\\n        string memory facetSet,\\n        IDiamondCut.FacetCut[] memory facetAddress\\n    ) external onlyController {\\n        DiamondFactoryLib\\n            .diamondFactoryStorage()\\n            .contractData\\n            .defaultFacetSet = facetSet;\\n        DiamondFactoryLib.diamondFactoryStorage()._addFacetSet(\\n            facetSet,\\n            facetAddress\\n        );\\n    }\\n\\n    /// @notice remote a facet set from the factory\\n    /// @param facetSet the facet set to remove\\n    function removeFacets(string memory facetSet) external onlyController {\\n        delete DiamondFactoryLib\\n            .diamondFactoryStorage()\\n            .contractData\\n            .facetsToAdd[facetSet];\\n    }\\n\\n    /// @notice get the address of the diamond\\n    /// @param symbol the symbol of the diamond\\n    /// @return the address of the diamond\\n    function getDiamondAddress(string memory symbol)\\n        public\\n        view\\n        returns (address)\\n    {\\n        return\\n            DiamondFactoryLib.diamondFactoryStorage()._getDiamondAddress(\\n                address(this),\\n                symbol,\\n                type(Diamond).creationCode\\n            );\\n    }\\n\\n    /// @notice create a new diamond token with the given symbol\\n    /// @param params diamond init parameters\\n    /// @param diamondInit the diamond init contract\\n    /// @param _calldata the calldata to pass to the diamond init contract\\n    function createFromSet(\\n        DiamondSettings memory params,\\n        address diamondInit,\\n        bytes calldata _calldata,\\n        string memory facets\\n    ) public onlyController returns (address payable diamondAddress) {\\n        // get the factory storage context, error if token already exists\\n        require(\\n            DiamondFactoryLib\\n                .diamondFactoryStorage()\\n                .contractData\\n                .diamondAddresses[params.symbol] == address(0),\\n            \\\"exists\\\"\\n        );\\n        diamondAddress = DiamondFactoryLib.diamondFactoryStorage().createFromSet(\\n            address(this),\\n            params,\\n            diamondInit,\\n            _calldata,\\n            type(Diamond).creationCode,\\n            facets\\n        );\\n        emit DiamondCreated(address(this), diamondAddress, params.symbol, params);\\n    }\\n\\n    /// @notice check if the token exists\\n    /// @param symbol the symbol of the diamond to check\\n    function exists(string memory symbol) public view returns (bool) {\\n        return\\n            DiamondFactoryLib\\n                .diamondFactoryStorage()\\n                .contractData\\n                .diamondAddresses[symbol] != address(0);\\n    }\\n\\n    /// @notice get all the symbols from the factory\\n    /// @return the symbols\\n    function symbols() public view returns (string[] memory) {\\n        return\\n            DiamondFactoryLib\\n                .diamondFactoryStorage()\\n                .contractData\\n                .diamondSymbols;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x541a8ac06b36b565f6106ac302a2415dff89c4873a2680f75b84647e2f23d7cf\",\"license\":\"MIT\"},\"contracts/identity/IdentityStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IERC721A.sol\\\";\\nimport {TrustedIssuer} from \\\"../interfaces/ITrustedIssuersRegistry.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC721.sol\\\";\\nimport {IIdentity} from \\\"../interfaces/IIdentity.sol\\\";\\nimport {Claim} from \\\"../interfaces/IClaim.sol\\\";\\nimport \\\"../interfaces/IMarketplace.sol\\\";\\nimport {MultiSaleStorage} from \\\"../interfaces/IMultiSale.sol\\\";\\nimport \\\"../libraries/TradeDealLib.sol\\\";\\nimport \\\"../libraries/FeeDistributorLib.sol\\\"; // Add import for FeeDistributorLib\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nlibrary IdentitySystemStorage {\\n    using IdentitySystemStorage for IdentitySystemStorage.IdentitySystem;\\n    using Address for address;\\nbytes32 internal constant MULTISALE_STORAGE_POSITION =\\n        keccak256(\\\"diamond.nextblock.bitgem.app.MultiSaleStorage.storage\\\");\\n\\n    function multiSaleStorage()\\n        internal\\n        pure\\n        returns (MultiSaleStorage storage ds)\\n    {\\n        bytes32 position = MULTISALE_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    // CollateralStorage struct definition\\n    struct CollateralStorage {\\n        address nft;\\n        address invoicePool;\\n        address vabb;\\n        address usdcPool;\\n        address interest;\\n        uint256 interestRate;\\n        uint256 collateralToInterestRatio;\\n    }\\n\\n    error ApprovalCallerNotOwnerNorApproved();\\n    error ApprovalQueryForNonexistentToken();\\n    error ApproveToCaller();\\n    error ApprovalToCurrentOwner();\\n    error BalanceQueryForZeroAddress();\\n    error MintedQueryForZeroAddress();\\n    error BurnedQueryForZeroAddress();\\n    error AuxQueryForZeroAddress();\\n    error MintToZeroAddress();\\n    error MintZeroQuantity();\\n    error OwnerIndexOutOfBounds();\\n    error OwnerQueryForNonexistentToken();\\n    error TokenIndexOutOfBounds();\\n    error TransferCallerNotOwnerNorApproved();\\n    error TransferFromIncorrectOwner();\\n    error TransferToNonERC721ReceiverImplementer();\\n    error TransferToZeroAddress();\\n    error URIQueryForNonexistentToken();\\n\\n    struct IdentitySystem {\\n        // ERC721A storage\\n        ERC721AContract erc721Contract;\\n        // TrustedIssuer storage\\n        mapping(address => TrustedIssuer) trustedIssuers;\\n        address[] trustedIssuerAddresses;\\n        mapping(address => mapping(uint256 => bool)) trustedIssuerClaimTopics;\\n        mapping(address => uint256[]) trustedIssuerClaimTopicsList;\\n        mapping(uint256 => bool) topics;\\n        uint256[] topicList;\\n        // Identity storage\\n        mapping(address => address) identities;\\n        mapping(address => address) identityOwnersMap;\\n        address[] identityOwners;\\n        // Claim storage\\n        mapping(address => mapping(uint256 => uint256)) claims;\\n        mapping(address => uint256[]) claimList;\\n        // Claim storage\\n        mapping(uint256 => Claim) tokenClaims;\\n        Claim[] tokenClaimList;\\n        // ERC721Permissioned storage\\n        address delegatedMinter;\\n        mapping(uint256 => bool) frozen;\\n\\n        uint256 itemIds;\\n        uint256 itemsSold;\\n        mapping(uint256 => MarketItem) idToMarketItem;\\n        mapping(uint256 => bool) idToListed;\\n        MarketItem[] items;\\n\\n        // Merkle proof tracking for MultiSale\\n        mapping(bytes32 => bool) usedMerkleLeaves;\\n        \\n        // Collateral storage\\n        CollateralStorage collateralStorage;\\n        \\n        // Trade Deal storage\\n        TradeDealLib.TradeDealStorage tradeDealStorage;\\n\\n        // Fee Distributor storage\\n        FeeDistributorLib.FeeDistributorStorage feeDistributorStorage;\\n    }\\n\\n    bytes32 constant IDENTITY_SYSTEM_STORAGE_POSITION =\\n        keccak256(\\\"diamond.identity.system.storage\\\");\\n\\n    function diamondStorage()\\n        internal\\n        pure\\n        returns (IdentitySystemStorage.IdentitySystem storage ds)\\n    {\\n        bytes32 position = IDENTITY_SYSTEM_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    function _tokenExists(\\n        IdentitySystem storage self,\\n        uint256 _tokenId\\n    ) internal view returns (bool) {\\n        return self.erc721Contract._ownerships[_tokenId].addr != address(0);\\n    }\\n\\n    function _getIdentity(\\n        IdentitySystem storage self,\\n        address _userAddress\\n    ) internal view returns (address addr) {\\n        return self.identities[_userAddress];\\n    }\\n\\n    function getIdentityOwner(\\n        IdentitySystem storage self,\\n        address _identity\\n    ) internal view returns (address) {\\n        return self.identityOwnersMap[_identity];\\n    }\\n\\n    function isIdentityAddress(\\n        IdentitySystem storage self,\\n        address _identity\\n    ) internal view returns (bool) {\\n        return self.identityOwnersMap[_identity] != address(0);\\n    }\\n\\n    function isRegistered(\\n        IdentitySystem storage self,\\n        address _userAddress\\n    ) internal view returns (bool) {\\n        return self.identities[_userAddress] != address(0);\\n    }\\n\\n    function isIdentityOwner(\\n        IdentitySystem storage self,\\n        address _userAddress\\n    ) internal view returns (bool) {\\n        return\\n            self.identityOwnersMap[self.identities[_userAddress]] ==\\n            _userAddress;\\n    }\\n\\n    // trusted issuer\\n\\n    function isTrustedIssuer(\\n        IdentitySystem storage self,\\n        address _issuer\\n    ) internal view returns (bool) {\\n        return self.trustedIssuers[_issuer].claimIssuer != address(0);\\n    }\\n\\n    function addTrustedIssuer(\\n        IdentitySystem storage self,\\n        address _trustedIssuer,\\n        uint[] calldata _claimTopics\\n    ) internal {\\n        self.trustedIssuers[_trustedIssuer] = TrustedIssuer({\\n            claimIssuer: _trustedIssuer,\\n            claimTopics: _claimTopics\\n        });\\n        self.trustedIssuerAddresses.push(_trustedIssuer);\\n    }\\n\\n    function removeTrustedIssuer(\\n        IdentitySystem storage self,\\n        address _trustedIssuer\\n    ) internal {\\n        delete self.trustedIssuers[_trustedIssuer];\\n        for (uint256 i = 0; i < self.trustedIssuerAddresses.length; i++) {\\n            if (self.trustedIssuerAddresses[i] == _trustedIssuer) {\\n                self.trustedIssuerAddresses[i] = self.trustedIssuerAddresses[\\n                    self.trustedIssuerAddresses.length - 1\\n                ];\\n                self.trustedIssuerAddresses.pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n    // claim topics\\n\\n    function addClaimTopic(\\n        IdentitySystem storage self,\\n        uint256 _claimTopic\\n    ) internal {\\n        self.topics[_claimTopic] = true;\\n        self.topicList.push(_claimTopic);\\n    }\\n\\n    function removeClaimTopic(\\n        IdentitySystem storage self,\\n        uint256 _claimTopic\\n    ) internal {\\n        delete self.topics[_claimTopic];\\n        for (uint256 i = 0; i < self.topicList.length; i++) {\\n            if (self.topicList[i] == _claimTopic) {\\n                self.topicList[i] = self.topicList[self.topicList.length - 1];\\n                self.topicList.pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n    function getClaimTopics(\\n        IdentitySystem storage self\\n    ) internal view returns (uint256[] memory) {\\n        return self.topicList;\\n    }\\n\\n    function hasClaimTopic(\\n        IdentitySystem storage self,\\n        uint256 _claimTopic\\n    ) internal view returns (bool) {\\n        return self.topics[_claimTopic];\\n    }\\n\\n    // trusted issuer / claim topics\\n\\n    function updateIssuerClaimTopics(\\n        IdentitySystem storage self,\\n        address _trustedIssuer,\\n        uint[] calldata _claimTopics\\n    ) internal {\\n        self.trustedIssuers[_trustedIssuer].claimTopics = _claimTopics;\\n        for (\\n            uint256 i = 0;\\n            i < self.trustedIssuerClaimTopicsList[_trustedIssuer].length;\\n            i++\\n        ) {\\n            delete self.trustedIssuerClaimTopics[_trustedIssuer][\\n                self.trustedIssuerClaimTopicsList[_trustedIssuer][i]\\n            ];\\n        }\\n    }\\n\\n    function addTrustedIssuerClaimTopic(\\n        IdentitySystem storage self,\\n        address _issuer,\\n        uint _claimTopic\\n    ) internal {\\n        self.trustedIssuerClaimTopics[_issuer][_claimTopic] = true;\\n        self.trustedIssuerClaimTopicsList[_issuer].push(_claimTopic);\\n    }\\n\\n    function removeTrustedIssuerClaimTopic(\\n        IdentitySystem storage self,\\n        address _issuer,\\n        uint _claimTopic\\n    ) internal {\\n        delete self.trustedIssuerClaimTopics[_issuer][_claimTopic];\\n        for (\\n            uint256 i = 0;\\n            i < self.trustedIssuerClaimTopicsList[_issuer].length;\\n            i++\\n        ) {\\n            if (self.trustedIssuerClaimTopicsList[_issuer][i] == _claimTopic) {\\n                self.trustedIssuerClaimTopicsList[_issuer][i] = self\\n                    .trustedIssuerClaimTopicsList[_issuer][\\n                        self.trustedIssuerClaimTopicsList[_issuer].length - 1\\n                    ];\\n                self.trustedIssuerClaimTopicsList[_issuer].pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n    modifier isTrustedIssuerForClaimTopic(uint256 _claimTopic) {\\n        IdentitySystem storage _storage = IdentitySystemStorage.diamondStorage();\\n        require(_storage.isTrustedIssuer(msg.sender), \\\"Not a trusted issuer\\\");\\n        require(\\n            _storage.hasTrustedIssuerClaimTopic(msg.sender, _claimTopic),\\n            \\\"Issuer not authorized for claim topic\\\"\\n        );\\n        _;\\n    }\\n\\n    function hasTrustedIssuerClaimTopic(\\n        IdentitySystem storage self,\\n        address _issuer,\\n        uint256 _claimTopic\\n    ) internal view returns (bool) {\\n        if (!self.isTrustedIssuer(_issuer)) return false;\\n        uint256[] storage claimTopics = self\\n            .trustedIssuers[_issuer]\\n            .claimTopics;\\n        for (uint256 i = 0; i < claimTopics.length; i++) {\\n            if (claimTopics[i] == _claimTopic) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function addIdentity(\\n        IdentitySystem storage self,\\n        address _userAddress,\\n        address _identity\\n    ) internal {\\n        self.identities[_userAddress] = _identity;\\n        self.identityOwners.push(_userAddress);\\n        self.identityOwnersMap[_identity] = _userAddress;\\n    }\\n\\n    function removeIdentity(\\n        IdentitySystem storage self,\\n        address _userAddress\\n    ) internal {\\n        address identityAddress = self.identities[_userAddress]; // Capture identity address before deletion\\n        delete self.identities[_userAddress];\\n        for (uint256 i = 0; i < self.identityOwners.length; i++) {\\n            if (self.identityOwners[i] == _userAddress) {\\n                self.identityOwners[i] = self.identityOwners[\\n                    self.identityOwners.length - 1\\n                ];\\n                self.identityOwners.pop();\\n                self.identityOwnersMap[identityAddress] = address(0); // Use captured identityAddress\\n                break;\\n            }\\n        }\\n    }\\n\\n    function hasIdentity(\\n        IdentitySystem storage self,\\n        address _userAddress\\n    ) internal view returns (bool) {\\n        address identity = self.identities[_userAddress];\\n        return identity != address(0);\\n    }\\n\\n    function hasClaims(\\n        IdentitySystem storage self,\\n        address _userAddress\\n    ) internal view returns (bool) {\\n        return self.identities[_userAddress] != address(0);\\n    }\\n\\n    function isVerified(\\n        IdentitySystem storage self,\\n        address _userAddress\\n    ) internal view returns (bool) {\\n        return hasIdentity(self, _userAddress) && hasClaims(self, _userAddress);\\n    }\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(\\n        IdentitySystem storage self,\\n        address msgSender,\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data,\\n        bool safe\\n    ) internal {\\n        // Overflows are incredibly unrealistic.\\n        // balance or numberMinted overflow if current value of either + quantity > 1.8e19 (2**64) - 1\\n        // updatedIndex overflows if _currentIndex + quantity > 1.2e77 (2**256) - 1\\n        uint256 startTokenId = self.erc721Contract._currentIndex;\\n        if (to == address(0)) revert MintToZeroAddress();\\n        if (quantity == 0) revert MintZeroQuantity();\\n\\n        self._beforeTokenTransfer(address(0), to, startTokenId, true);\\n\\n        unchecked {\\n            self.erc721Contract._addressData[to].balance += uint64(quantity);\\n            self.erc721Contract._addressData[to].numberMinted += uint64(quantity);\\n\\n            self.erc721Contract._ownerships[startTokenId].addr = to;\\n            self.erc721Contract._ownerships[startTokenId].startTimestamp = uint64(\\n                block.timestamp\\n            );\\n\\n            uint256 updatedIndex = startTokenId;\\n\\n            // log quantity\\n\\n            for (uint256 i; i < quantity; i++) {\\n                emit Transfer(address(0), to, updatedIndex);\\n                if (\\n                    safe &&\\n                    !_checkOnERC721Received(\\n                        msgSender,\\n                        address(0),\\n                        to,\\n                        updatedIndex,\\n                        _data\\n                    )\\n                ) {\\n                    revert TransferToNonERC721ReceiverImplementer();\\n                }\\n                self.erc721Contract._currentIndex = updatedIndex + 1;\\n                updatedIndex++;\\n                self._addTokenToAllTokensEnumeration(updatedIndex); // Add this line\\n            }\\n        }\\n\\n        _afterTokenTransfer(self, address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(\\n        IdentitySystem storage self,\\n        address owner\\n    ) internal view returns (uint256) {\\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\\n        return uint256(self.erc721Contract._addressData[owner].balance);\\n    }\\n\\n    /**\\n     * Returns the number of tokens minted by `owner`.\\n     */\\n    function _numberMinted(\\n        IdentitySystem storage self,\\n        address owner\\n    ) internal view returns (uint256) {\\n        if (owner == address(0)) revert MintedQueryForZeroAddress();\\n        return uint256(self.erc721Contract._addressData[owner].numberMinted);\\n    }\\n\\n    /**\\n     * Returns the number of tokens burned by or on behalf of `owner`.\\n     */\\n    function _numberBurned(\\n        IdentitySystem storage self,\\n        address owner\\n    ) internal view returns (uint256) {\\n        if (owner == address(0)) revert BurnedQueryForZeroAddress();\\n        return uint256(self.erc721Contract._addressData[owner].numberBurned);\\n    }\\n\\n    /**\\n     * Returns the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\\n     */\\n    function _getAux(\\n        IdentitySystem storage self,\\n        address owner\\n    ) internal view returns (uint64) {\\n        if (owner == address(0)) revert AuxQueryForZeroAddress();\\n        return self.erc721Contract._addressData[owner].aux;\\n    }\\n\\n    /**\\n     * Sets the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\\n     * If there are multiple variables, please pack them into a uint64.\\n     */\\n    function _setAux(\\n        IdentitySystem storage self,\\n        address owner,\\n        uint64 aux\\n    ) internal {\\n        if (owner == address(0)) revert AuxQueryForZeroAddress();\\n        self.erc721Contract._addressData[owner].aux = aux;\\n    }\\n\\n    function ownershipOf(\\n        IdentitySystem storage self,\\n        uint256 tokenId\\n    ) internal view returns (TokenOwnership memory) {\\n        uint256 curr = tokenId;\\n        unchecked {\\n            if (curr < self.erc721Contract._currentIndex) {\\n                TokenOwnership memory ownership = self.erc721Contract._ownerships[curr];\\n                if (!ownership.burned) {\\n                    if (ownership.addr != address(0)) {\\n                        return ownership;\\n                    }\\n                    // Invariant:\\n                    // There will always be an ownership that has an address and is not burned\\n                    // before an ownership that does not have an address and is not burned.\\n                    // Hence, curr will not underflow.\\n                    while (true) {\\n                        curr--;\\n                        ownership = self.erc721Contract._ownerships[curr];\\n                        if (ownership.addr != address(0)) {\\n                            return ownership;\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        revert OwnerQueryForNonexistentToken();\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     */\\n    function _exists(\\n        IdentitySystem storage self,\\n        uint256 tokenId\\n    ) internal view returns (bool) {\\n        return\\n            tokenId < self.erc721Contract._currentIndex && !self.erc721Contract._ownerships[tokenId].burned;\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(\\n        IdentitySystem storage self,\\n        uint256 tokenId\\n    ) internal view returns (address) {\\n        if (!_exists(self, tokenId)) revert ApprovalQueryForNonexistentToken();\\n        return self.erc721Contract._tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(\\n        IdentitySystem storage self,\\n        address sender,\\n        address operator,\\n        bool approved\\n    ) internal {\\n        self.erc721Contract._operatorApprovals[sender][operator] = approved;\\n        emit ApprovalForAll(sender, operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(\\n        IdentitySystem storage self,\\n        address owner,\\n        address operator\\n    ) internal view returns (bool) {\\n        return self.erc721Contract._operatorApprovals[owner][operator];\\n    }\\n\\n    function currentIndex(\\n        IdentitySystem storage self\\n    ) internal view returns (uint256) {\\n        return self.erc721Contract._currentIndex;\\n    }\\n    \\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        IdentitySystem storage self,\\n        address msgSender,\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bool _force\\n    ) internal {\\n        TokenOwnership memory prevOwnership = self.ownershipOf(tokenId);\\n\\n        bool isApprovedOrOwner = (msgSender == prevOwnership.addr ||\\n            self.isApprovedForAll(prevOwnership.addr, msgSender) ||\\n            self.getApproved(tokenId) == msgSender);\\n\\n        if (!isApprovedOrOwner && !_force)\\n            revert TransferCallerNotOwnerNorApproved();\\n        if (prevOwnership.addr != from && !_force) revert TransferFromIncorrectOwner();\\n        if (to == address(0)) revert TransferToZeroAddress();\\n\\n        self._beforeTokenTransfer(from, to, tokenId, _force);\\n\\n        if (from == address(0)) {\\n            self._addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            self._removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            self._removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            self._addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n\\n        // Clear approvals from the previous owner\\n        self._approve(address(0), tokenId, prevOwnership.addr);\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\\n        unchecked {\\n            self.erc721Contract._addressData[from].balance -= 1;\\n            self.erc721Contract._addressData[to].balance += 1;\\n\\n            self.erc721Contract._ownerships[tokenId].addr = to;\\n            self.erc721Contract._ownerships[tokenId].startTimestamp = uint64(block.timestamp);\\n\\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\n            uint256 nextTokenId = tokenId + 1;\\n            if (self.erc721Contract._ownerships[nextTokenId].addr == address(0)) {\\n                // This will suffice for checking _exists(nextTokenId),\\n                // as a burned slot cannot contain the zero address.\\n                if (nextTokenId < self.erc721Contract._currentIndex) {\\n                    self.erc721Contract._ownerships[nextTokenId].addr = prevOwnership.addr;\\n                    self.erc721Contract._ownerships[nextTokenId].startTimestamp = prevOwnership\\n                        .startTimestamp;\\n                }\\n            }\\n        }\\n        \\n        emit Transfer(from, to, tokenId);\\n        _afterTokenTransfer(self, from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(IdentitySystem storage self, address from, uint256 tokenId) internal {\\n        self._beforeTokenTransfer(from, address(0), tokenId, true);\\n\\n        // Clear approvals from the previous owner\\n        _approve(self, address(0), tokenId, from);\\n\\n        self._removeTokenFromOwnerEnumeration(from, tokenId);\\n        self._removeTokenFromAllTokensEnumeration(tokenId);\\n\\n        unchecked {\\n            self.erc721Contract._addressData[from].balance -= 1;\\n            self.erc721Contract._addressData[from].numberBurned += 1;\\n\\n            // Keep track of who burned the token, and the timestamp of burning.\\n            self.erc721Contract._ownerships[tokenId].addr = from;\\n            self.erc721Contract._ownerships[tokenId].startTimestamp = uint64(block.timestamp);\\n            self.erc721Contract._ownerships[tokenId].burned = true;\\n\\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the burn initiator owns it.\\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\n            uint256 nextTokenId = tokenId + 1;\\n            if (self.erc721Contract._ownerships[nextTokenId].addr == address(0)) {\\n                // This will suffice for checking _exists(nextTokenId),\\n                // as a burned slot cannot contain the zero address.\\n                if (nextTokenId < self.erc721Contract._currentIndex) {\\n                    self.erc721Contract._ownerships[nextTokenId].addr = from;\\n                    self.erc721Contract._ownerships[nextTokenId].startTimestamp = self.erc721Contract._ownerships[tokenId].startTimestamp;\\n                }\\n            }\\n        }\\n        emit Transfer(from, address(0), tokenId);\\n        _afterTokenTransfer(self, from, address(0), tokenId, 1);\\n\\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\\n        unchecked {\\n            self.erc721Contract._burnCounter++;\\n        }\\n    }\\n\\n    function exists(IdentitySystem storage self, uint256 tokenId) internal view returns (bool) {\\n        return _exists(self, tokenId);\\n    }\\n\\n\\n    function setTokenClaimTopics(IdentitySystem storage self, uint256 tokenId, uint256[] memory claimTopics) internal {\\n        require(self.exists(tokenId), \\\"ERC721: token does not exist\\\");\\n        for (uint256 i = 0; i < claimTopics.length; i++) {\\n            self.tokenClaims[tokenId] = Claim({\\n                topic: claimTopics[i],\\n                scheme: 0,\\n                issuer: address(this),\\n                signature: \\\"\\\",\\n                data: \\\"\\\",\\n                uri: \\\"\\\"\\n            });\\n        }\\n    }\\n\\n    function getTokenClaimTopics(uint256 tokenId) public view returns (Claim[] memory) {\\n        IdentitySystemStorage.IdentitySystem storage identitySystem = IdentitySystemStorage.diamondStorage();\\n        require(identitySystem._exists(tokenId), \\\"ERC721: token does not exist\\\");\\n        Claim[] memory claimTopics = new Claim[](identitySystem.tokenClaimList.length);\\n        for (uint256 i = 0; i < identitySystem.tokenClaimList.length; i++) {\\n            claimTopics[i] = identitySystem.tokenClaims[tokenId];\\n        }\\n        return claimTopics;\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(\\n        IdentitySystem storage self,\\n        address to,\\n        uint256 tokenId,\\n        address owner\\n    ) internal {\\n        self.erc721Contract._tokenApprovals[tokenId] = to;\\n        emit Approval(owner, to, tokenId);\\n    }\\n\\n    function _ownerOf(\\n        IdentitySystem storage self,\\n        uint256 tokenId\\n    ) internal view returns (address) {\\n        return ownershipOf(self, tokenId).addr;\\n    }\\n\\n    function _isContract(\\n        address account\\n    ) internal view returns (bool) {\\n        // According to EIP-1052, an address is a contract if it has code.\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address msgSender,\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal returns (bool) {\\n        if (_isContract(to)) {\\n            try\\n                IERC721Receiver(to).onERC721Received(\\n                    msgSender,\\n                    from,\\n                    tokenId,\\n                    _data\\n                )\\n            returns (bytes4 retval) {\\n                return retval == IERC721Receiver(to).onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert TransferToNonERC721ReceiverImplementer();\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    function tokensOfOwner(\\n        IdentitySystem storage self,\\n        address owner\\n    ) internal view returns (uint256[] memory) {\\n        require(owner != address(0), \\\"IdentityStorage: owner query for zero address\\\");\\n        \\n        uint256 ownerTokenCount = IERC721(address(this)).balanceOf(owner);\\n        if (ownerTokenCount == 0) {\\n            // Return an empty array\\n            return new uint256[](0);\\n        }\\n        \\n        uint256[] memory tokens = new uint256[](ownerTokenCount);\\n        for (uint256 i = 0; i < ownerTokenCount; i++) {\\n            tokens[i] = self.erc721Contract._ownedTokens[owner][i];\\n        }\\n        \\n        return tokens;\\n    }\\n\\n    function tokenOfOwnerByIndex(\\n        IdentitySystem storage self,\\n        address owner, \\n        uint256 index) internal view returns (uint256) {\\n        require(index < IERC721(address(this)).balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return self.erc721Contract._ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply(\\n        IdentitySystem storage self\\n    ) internal view returns (uint256) {\\n        return self.erc721Contract._allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(\\n        IdentitySystem storage self,\\n        uint256 index\\n    ) internal view returns (uint256) {\\n        require(index < totalSupply(self), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return self.erc721Contract._allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(\\n        IdentitySystem storage self,\\n        address to, \\n        uint256 tokenId) internal {\\n        uint256 length = IERC721(address(this)).balanceOf(to);\\n        self.erc721Contract._ownedTokens[to][length] = tokenId;\\n        self.erc721Contract._ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(\\n        IdentitySystem storage self,\\n        uint256 tokenId) internal {\\n        self.erc721Contract._allTokensIndex[tokenId] = self.erc721Contract._allTokens.length + 1;\\n        self.erc721Contract._allTokens.push(tokenId);\\n    }\\n\\n    function _getIdentityAddress(IdentitySystem storage self, address _address) internal view returns (address) {\\n        address identityAddress = self._getIdentity(_address);\\n        return identityAddress != address(0) ? identityAddress : _address;\\n    }\\n\\n    function _hasClaim(IdentitySystem storage self, address _address, uint256 _claimTopic) internal view returns (bool) {\\n        address idObj = self._getIdentityAddress(_address);\\n        for (uint256 i = 0; i < self.claimList[idObj].length; i++) {\\n            if (self.claimList[idObj][i] == _claimTopic) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(\\n        IdentitySystem storage self,\\n        address from,\\n        uint256 tokenId\\n    ) internal {\\n        // address owner = IERC721(address(this)).ownerOf(tokenId);\\n        address thisAddress = address(this);\\n\\n\\n        // require(owner == thisAddress, \\\"ERC721: transfer of token that is not own\\\");\\n        uint256 lastTokenIndex = IERC721(thisAddress).balanceOf(from) - 1; \\n        uint256 tokenIndex = self.erc721Contract._ownedTokensIndex[tokenId];\\n\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = self.erc721Contract._ownedTokens[from][lastTokenIndex];\\n\\n            self.erc721Contract._ownedTokens[from][tokenIndex] = lastTokenId;\\n            self.erc721Contract._ownedTokensIndex[lastTokenId] = tokenIndex;\\n        }\\n\\n        delete self.erc721Contract._ownedTokensIndex[tokenId];\\n        delete self.erc721Contract._ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(\\n        IdentitySystem storage self,\\n        uint256 tokenId\\n    ) internal {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n        uint256 lastTokenIndex = self.erc721Contract._allTokens.length - 1;\\n        uint256 tokenIndex = self.erc721Contract._allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = self.erc721Contract._allTokens[lastTokenIndex];\\n\\n        self.erc721Contract._allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        self.erc721Contract._allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete self.erc721Contract._allTokensIndex[tokenId];\\n        self.erc721Contract._allTokens.pop();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\\n     * And also called before burning one token.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n\\n    function _beforeTokenTransfer(\\n        IdentitySystem storage self,\\n        address from,\\n        address to,\\n        uint256,\\n        bool force\\n    ) internal view {\\n        // Allow transfers from or to the contract itself without additional checks\\n        if(force) return;\\n\\n        bool hasCommonClaim = false;\\n        uint256 claimType = 1; // Start from claim type 1\\n\\n        while (!hasCommonClaim) {\\n            bool hasFromClaim = self._hasClaim(from, claimType) ||\\n                from == address(this);\\n            if (hasFromClaim && self._hasClaim(to, claimType)) {\\n                hasCommonClaim = true;\\n            } else {\\n                claimType++;\\n                if (claimType == 0) {\\n                    // Overflow, we've checked all possible claim types\\n                    break;\\n                }\\n            }\\n        }\\n\\n        require(\\n            hasCommonClaim,\\n            \\\"ERC721: sender and receiver do not have a common claim\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\\n     * minting.\\n     * And also called after one token has been burned.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` has been minted for `to`.\\n     * - When `to` is zero, `tokenId` has been burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _afterTokenTransfer(\\n        IdentitySystem storage self,\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal {}\\n}\\n\",\"keccak256\":\"0xf50b66d8939e5f8a880230069fbf66473febd2f7b5566201913a9fce3f5b2042\",\"license\":\"MIT\"},\"contracts/interfaces/IAttribute.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.6;\\r\\n\\r\\nenum AttributeType {\\r\\n    Unknown,\\r\\n    String ,\\r\\n    Bytes32,\\r\\n    Uint256,\\r\\n    Uint8,\\r\\n    Uint256Array,\\r\\n    Uint8Array\\r\\n}\\r\\n\\r\\nstruct Attribute {\\r\\n    string key;\\r\\n    AttributeType attributeType;\\r\\n    string value;\\r\\n}\\r\\n\\r\\n// attribute storage\\r\\nstruct AttributeContract {\\r\\n    mapping(uint256 => bool)  burnedIds;\\r\\n    mapping(uint256 => mapping(string => Attribute))  attributes;\\r\\n    mapping(uint256 => string[]) attributeKeys;\\r\\n    mapping(uint256 =>  mapping(string => uint256)) attributeKeysIndexes;\\r\\n}\\r\\n\\r\\n\\r\\n/// @notice a pool of tokens that users can deposit into and withdraw from\\r\\ninterface IAttribute {\\r\\n    /// @notice get an attribute for a tokenid keyed by string\\r\\n    function getAttribute(\\r\\n        uint256 id,\\r\\n        string memory key\\r\\n    ) external view returns (Attribute calldata _attrib);\\r\\n}\\r\\n\",\"keccak256\":\"0x120f4f33b8c5026e047bbff0e64c0316d5f4e2a0822ca49f40d01fba9e9a4aa4\",\"license\":\"MIT\"},\"contracts/interfaces/IClaim.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nstruct Claim {\\n    uint256 topic;\\n    uint256 scheme;\\n    address issuer;\\n    bytes signature;\\n    bytes data;\\n    string uri;\\n}\",\"keccak256\":\"0xb104f9f6208a657a595ec893c71f3393e192919b918f51ebd8727ecdffdaadc8\",\"license\":\"MIT\"},\"contracts/interfaces/IClaimIssuer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IIdentity.sol\\\";\\n\\nstruct Claim {\\n    uint256 topic;\\n    uint256 scheme;\\n    address issuer;\\n    bytes signature;\\n    bytes data;\\n    string uri;\\n    bool isRemoved;\\n}\\n\\ninterface IClaimIssuer is IIdentity {\\n\\n    event ClaimRevoked(bytes indexed signature);\\n\\n    function revokeClaim(bytes32 _claimId, address _identity) external returns(bool);\\n    function revokeClaimBySignature(bytes calldata signature) external;\\n    function isClaimRevoked(bytes calldata _sig) external view returns (bool);\\n    function isClaimValid(\\n        IIdentity _identity,\\n        uint256 claimTopic,\\n        bytes calldata sig,\\n        bytes calldata data)\\n    external view returns (bool);\\n    function getRecoveredAddress(bytes calldata sig, bytes32 dataHash) external pure returns (address);\\n    \\n}\",\"keccak256\":\"0xf94927c44289cafe7442ff3e69f6949f3f97ab784a27b0b5d79f3757da7f1dd8\",\"license\":\"MIT\"},\"contracts/interfaces/ICollateral.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ICollateral {\\n    function mint(address to, uint256 amount) external;\\n    function burn(address from, uint256 amount) external;\\n    function balanceOf(address account) external view returns (uint256);\\n    function totalSupply() external view returns (uint256);\\n    function transfer(address to, uint256 amount) external returns (bool);\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x8afcc7f0c7188519cb18758992c886817e4bd330bc30f887edb72258f080a079\",\"license\":\"MIT\"},\"contracts/interfaces/IControllable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\n/// @notice a controllable contract interface. allows for controllers to perform privileged actions. controllera can other controllers and remove themselves.\\r\\ninterface IControllable {\\r\\n\\r\\n    /// @notice emitted when a controller is added.\\r\\n    event ControllerAdded(\\r\\n        address indexed contractAddress,\\r\\n        address indexed controllerAddress\\r\\n    );\\r\\n\\r\\n    /// @notice emitted when a controller is removed.\\r\\n    event ControllerRemoved(\\r\\n        address indexed contractAddress,\\r\\n        address indexed controllerAddress\\r\\n    );\\r\\n\\r\\n    /// @notice adds a controller.\\r\\n    /// @param controller the controller to add.\\r\\n    function addController(address controller) external;\\r\\n\\r\\n    /// @notice removes a controller.\\r\\n    /// @param controller the address to check\\r\\n    /// @return true if the address is a controller\\r\\n    function isController(address controller) external view returns (bool);\\r\\n\\r\\n    /// @notice remove ourselves from the list of controllers.\\r\\n    function relinquishControl() external;\\r\\n}\\r\\n\",\"keccak256\":\"0x15f5c4f8732a9caffb811a8ebf9aeba41a108e58634607c0700a46a891edf2ec\",\"license\":\"MIT\"},\"contracts/interfaces/IDiamond.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\n\\nstruct DiamondSettings {\\n  address owner;\\n  address factory;\\n  address svgManager;\\n  string symbol;\\n  string name;\\n}\\n\\nstruct DiamondContract {\\n  DiamondSettings settings;\\n  mapping(string=>string) metadata;\\n}\\n\\nstruct DiamondStorage {\\n  DiamondContract diamondContract;\\n}\\n\\n\\ninterface IDiamond {\\n  function getDiamondAddress() external view returns (address);\\n}\\n\\n\",\"keccak256\":\"0x157d83f677f5a33a8893fbd9721fa74cb0bcbbaac00eb00af45f19649d46f464\",\"license\":\"MIT\"},\"contracts/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.6;\\r\\n\\r\\n/******************************************************************************\\\\\\r\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\r\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\r\\n/******************************************************************************/\\r\\n\\r\\ninterface IDiamondCut {\\r\\n    enum FacetCutAction {Add, Replace, Remove}\\r\\n    // Add=0, Replace=1, Remove=2\\r\\n\\r\\n    struct FacetCut {\\r\\n        address facetAddress;\\r\\n        FacetCutAction action;\\r\\n        bytes4[] functionSelectors;\\r\\n    }\\r\\n\\r\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\r\\n    ///         a function with delegatecall\\r\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\r\\n    /// @param _init The address of the contract or facet to execute _calldata\\r\\n    /// @param _calldata A function call, including function selector and arguments\\r\\n    ///                  _calldata is executed with delegatecall on _init\\r\\n    function diamondCut(\\r\\n        FacetCut[] calldata _diamondCut,\\r\\n        address _init,\\r\\n        bytes calldata _calldata\\r\\n    ) external;\\r\\n    \\r\\n    /// @notice Propose an upgrade to be executed after the timelock period\\r\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\r\\n    /// @param _init The address of the contract or facet to execute _calldata\\r\\n    /// @param _calldata A function call, including function selector and arguments\\r\\n    function proposeDiamondCut(\\r\\n        FacetCut[] calldata _diamondCut,\\r\\n        address _init,\\r\\n        bytes calldata _calldata\\r\\n    ) external;\\r\\n    \\r\\n    /// @notice Execute a previously proposed upgrade after the timelock period\\r\\n    function executeDiamondCut() external;\\r\\n    \\r\\n    /// @notice Cancel a proposed upgrade\\r\\n    function cancelDiamondCut() external;\\r\\n\\r\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\r\\n    event DiamondCutProposed(address indexed proposer, uint256 indexed proposalTime, uint256 executionTime);\\r\\n    event DiamondCutCancelled(address indexed canceller);\\r\\n}\\r\\n\",\"keccak256\":\"0x340a039f0dd63cf19bc669551feec28879457d8b741711ef3513168d620f11bc\",\"license\":\"MIT\"},\"contracts/interfaces/IDiamondFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nimport { IDiamondCut } from \\\"./IDiamondCut.sol\\\";\\n\\nstruct DiamondFactoryInit {\\n    string setName;\\n    IDiamondCut.FacetCut[] facetAddresses;\\n    bytes diamondBytecode;\\n}\\n\\nstruct DiamondFactoryContract {\\n    string[] diamondSymbols;\\n    mapping(string => address) diamondAddresses;\\n    mapping(string => IDiamondCut.FacetCut[]) facetsToAdd;\\n    string[] facetSets;\\n    string defaultFacetSet;\\n    address diamondInit_;\\n    bytes calldata_;\\n}\\n\",\"keccak256\":\"0x7dca6e354d3e14a8db10e45b57eb14fc72583638e1896c05d5f16cbd6b676ed3\",\"license\":\"MIT\"},\"contracts/interfaces/IDiamondLoupe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.6;\\r\\n\\r\\n/******************************************************************************\\\\\\r\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\r\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\r\\n/******************************************************************************/\\r\\n\\r\\n// A loupe is a small magnifying glass used to look at diamonds.\\r\\n// These functions look at diamonds\\r\\ninterface IDiamondLoupe {\\r\\n    /// These functions are expected to be called frequently\\r\\n    /// by tools.\\r\\n\\r\\n    struct Facet {\\r\\n        address facetAddress;\\r\\n        bytes4[] functionSelectors;\\r\\n    }\\r\\n\\r\\n    /// @notice Gets all facet addresses and their four byte function selectors.\\r\\n    /// @return facets_ Facet\\r\\n    function facets() external view returns (Facet[] memory facets_);\\r\\n\\r\\n    /// @notice Gets all the function selectors supported by a specific facet.\\r\\n    /// @param _facet The facet address.\\r\\n    /// @return facetFunctionSelectors_\\r\\n    function facetFunctionSelectors(address _facet) external view returns (bytes4[] memory facetFunctionSelectors_);\\r\\n\\r\\n    /// @notice Get all the facet addresses used by a diamond.\\r\\n    /// @return facetAddresses_\\r\\n    function facetAddresses() external view returns (address[] memory facetAddresses_);\\r\\n\\r\\n    /// @notice Gets the facet that supports the given selector.\\r\\n    /// @dev If facet is not found return address(0).\\r\\n    /// @param _functionSelector The function selector.\\r\\n    /// @return facetAddress_ The facet address.\\r\\n    function facetAddress(bytes4 _functionSelector) external view returns (address facetAddress_);\\r\\n}\\r\\n\",\"keccak256\":\"0x817840c97d3fb575971952db3d5096b1f843bffe3176d675cacb18e656f9d2a3\",\"license\":\"MIT\"},\"contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\ninterface IERC165 {\\n    /// @notice Query if a contract implements an interface\\n    /// @param interfaceId The interface identifier, as specified in ERC-165\\n    /// @dev Interface identification is specified in ERC-165. This function\\n    ///  uses less than 30,000 gas.\\n    /// @return `true` if the contract implements `interfaceID` and\\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x65006dc04090531acd9805684a1f27252b8abb0c1990fcf0ba8db33f50791a0d\",\"license\":\"MIT\"},\"contracts/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\n/// @title ERC-173 Contract Ownership Standard\\n///  Note: the ERC-165 identifier for this interface is 0x7f5828d0\\n/* is ERC165 */\\ninterface IERC173 {\\n    /// @dev This emits when ownership of a contract changes.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Get the address of the owner\\n    /// @return owner_ The address of the owner.\\n    function owner() external view returns (address owner_);\\n\\n    /// @notice Set the address of the new owner of the contract\\n    /// @dev Set _newOwner to address(0) to renounce any ownership.\\n    /// @param _newOwner The address of the new owner of the contract\\n    function transferOwnership(address _newOwner) external;\\n}\\n\",\"keccak256\":\"0x84fe28f479bf96f1819514dd8493ae15955eda0dbabcbb5f24c3c935075a31d4\",\"license\":\"MIT\"},\"contracts/interfaces/IERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\n/* solhint-disable indent */\\n\\n// Compiler will pack this into a single 256bit word.\\nstruct TokenOwnership {\\n    address addr; // The address of the owner.\\n    uint64 startTimestamp; // Keeps track of the start time of ownership with minimal overhead for tokenomics.\\n    bool burned; // Whether the token has been burned.\\n}\\n\\n// Compiler will pack this into a single 256bit word.\\nstruct AddressData {\\n    \\n    uint64 balance; // Realistically, 2**64-1 is more than enough.\\n    uint64 numberMinted; // Keeps track of mint count with minimal overhead for tokenomics.\\n    uint64 numberBurned; // Keeps track of burn count with minimal overhead for tokenomics.\\n    // For miscellaneous variable(s) pertaining to the address\\n    // (e.g. number of whitelist mint slots used).\\n    // If there are multiple variables, please pack them into a uint64.\\n    uint64 aux;\\n}\\n\\nstruct ERC721AContract {\\n    // The tokenId of the next token to be minted.\\n    uint256 _currentIndex;\\n\\n    // The number of tokens burned.\\n    uint256 _burnCounter;\\n\\n    // Token name\\n    string _name;\\n\\n    // Token symbol\\n    string _symbol;\\n\\n    // the base uri\\n    string __uri;\\n\\n    // Mapping from token ID to ownership details\\n    // An empty struct value does not necessarily mean the token is unowned. See ownershipOf implementation for details.\\n    mapping(uint256 => TokenOwnership) _ownerships;\\n\\n    // Mapping owner address to address data\\n    mapping(address => AddressData) _addressData;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) _operatorApprovals;\\n    \\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) _allTokensIndex;\\n}\\n\\n/// @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\nevent Approval(\\n    address indexed owner,\\n    address indexed approved,\\n    uint256 indexed tokenId\\n);\\n\\n/// @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\nevent ApprovalForAll(\\n    address indexed owner,\\n    address indexed operator,\\n    bool approved\\n);\\n\\n/**\\n * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n */\\nevent Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\",\"keccak256\":\"0x440b25b3f001e44dd0effadc01c479e08957c9f432900aea0f6637dea8fb8129\",\"license\":\"MIT\"},\"contracts/interfaces/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC721.sol\\\";\\n\\nstruct ERC721EnumerableContract {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) _allTokensIndex;\\n}\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7f76086c568a2873d3b092a896af66068f061474955c1442fe1eb3cbe3d649a2\",\"license\":\"MIT\"},\"contracts/interfaces/IERC721Permissioned.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\ninterface IERC721Permissioned {\\n\\n    event TransferForced(address indexed from, address indexed to, uint256 indexed tokenId);\\n    event DelegatedMinterSet(address indexed newDelegatedMinter);\\n    event Mint(address indexed to, uint256 indexed tokenId);\\n    event Burn(address indexed from, uint256 indexed tokenId);\\n    event Freeze(address indexed from, uint256 indexed tokenId);\\n    event FreezeBatch(address indexed from, uint256[] tokenIds);\\n    event Release(address indexed from, uint256 indexed tokenId);\\n\\n    // force a transfer from the user to the to address irrepective of registry\\n    // TODO: Does this mean that the transfer will go even if both addresses aren't\\n    //      registered? If so, this is a security issue.\\n    function forcedTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _amount,\\n        bytes calldata _data\\n    ) external returns (bool);\\n\\n    function setDelegatedMinter(address _newDelegatedMinter) external returns (bool);\\n    function delegatedMinter() external view returns (address);\\n\\n    function mint(address _to, bytes calldata data) external returns (uint256);\\n    function burn(uint256 _tokenId) external returns (bool);\\n\\n    function freeze(uint256 tokenID) external;\\n    function release(uint256 tokenID) external;\\n\\n}\\n\",\"keccak256\":\"0xb3f9c69ddfc01e8fb43822dbab1c213a7719ae09f1edc0bbdd5def2f85dc469d\",\"license\":\"MIT\"},\"contracts/interfaces/IERC734.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport { IERC165 } from \\\"./IERC165.sol\\\";\\n\\ninterface IERC734 is IERC165 {\\n    // events\\n    event KeyAdded(bytes32 indexed key, uint256 indexed purpose, uint256 indexed keyType);\\n    event KeyRemoved(bytes32 indexed key, uint256 indexed purpose, uint256 indexed keyType);\\n    event ExecutionRequested(\\n        uint256 indexed executionId,\\n        address indexed to,\\n        uint256 indexed value,\\n        bytes data\\n    );\\n    event Executed(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\\n    event ExecutionFailed(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\\n    event Approved(uint256 indexed executionId, bool approved);\\n\\n    // functions\\n    // setters\\n    function addKey(bytes32 _key, uint256 _purpose, uint256 _keyType) external;\\n    function removeKey(bytes32 _key, uint256 _purpose) external;\\n    function approve(uint256 _id, bool _approve) external;\\n\\n    // getters\\n    function getKey(bytes32 _key) external view returns(uint256[] memory purposes, uint256 keyType, bytes32 key);\\n    function getKeyPurposes(bytes32 _key) external view returns(uint256[] memory);\\n    function getKeysByPurpose(uint256 _purpose) external view returns(bytes32[] memory);\\n    function getExecution(uint256 _id) external view returns(address to, uint256 value, bytes memory data, bool approved, uint256 executionType);\\n}\\n\",\"keccak256\":\"0xa1bbf071037ac2d697a9134e90ac01a4ca93b206d15283182d8d01f7edda46c0\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IERC735.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\ninterface IERC735 {\\n    event ClaimRequested(uint256 indexed claimRequestId, uint256 indexed topic, uint256 scheme, address indexed issuer, bytes signature, bytes data, string uri);\\n    event ClaimAdded(bytes32 indexed claimId, uint256 indexed topic, uint256 scheme, address indexed issuer, bytes signature, bytes data, string uri);\\n    event ClaimRemoved(bytes32 indexed claimId, uint256 indexed topic, uint256 scheme, address indexed issuer, bytes signature, bytes data, string uri);\\n    event ClaimChanged(bytes32 indexed claimId, uint256 indexed topic, uint256 scheme, address indexed issuer, bytes signature, bytes data, string uri);\\n\\n    function getClaim(bytes32 _claimId) external returns(uint256 topic, uint256 scheme, address issuer, bytes memory signature, bytes memory data, string memory uri);\\n    function getClaimIdsByTopic(uint256 _topic) external returns(bytes32[] memory claimIds);\\n    function addClaim(\\n        uint256 _topic, \\n        uint256 _scheme, \\n        address _issuer, \\n        bytes memory _signature, \\n        bytes memory _data, \\n        string memory _uri) external returns (uint256 claimRequestId);\\n    function changeClaim(bytes32 _claimId, uint256 _topic, uint256 _scheme, address _issuer, bytes memory _signature, bytes memory _data, string memory _uri) external returns (bool success);\\n    function removeClaim(bytes32 _claimId) external returns (bool success);\\n}\\n\\n/*\\nHow IdentityRegistry works:\\n\\n1. User creates an Identity contract\\n2. User calls IdentityRegistry.addIdentity(address _identity, IIdentity identityData)\\n3. IdentityRegistry emits IdentityAdded(address indexed _address, IIdentity identity)\\n4. IdentityRegistry emits ClaimAdded(address indexed identity, uint256 indexed claimTopic, bytes claim)\\n5. IdentityRegistry emits WalletLinked(address indexed walletAddress, bytes32 indexed onchainID)\\n\\n*/\",\"keccak256\":\"0xd9696a4c45abd2c8e0cc7cd8f02bd18612d0dcb0c573c928ab225de624c01d92\",\"license\":\"MIT\"},\"contracts/interfaces/IFeeDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IFeeDistributor\\n * @dev Interface for a fee distribution system.\\n */\\ninterface IFeeDistributor {\\n    /**\\n     * @notice Sets the addresses that will receive fees and their corresponding weights.\\n     * @dev Weights determine the proportion of fees each receiver gets.\\n     * @param _feeReceivers Array of addresses to receive fees.\\n     * @param _feeWeights Array of weights corresponding to each receiver. Must sum to a specific value (e.g., 10000 for basis points).\\n     */\\n    function setFeeReceivers(\\n        address[] calldata _feeReceivers,\\n        uint256[] calldata _feeWeights\\n    ) external;\\n\\n    /**\\n     * @notice Gets the current fee receivers and their weights.\\n     * @return feeReceivers Array of addresses currently set to receive fees.\\n     * @return feeWeights Array of weights corresponding to each receiver.\\n     */\\n    function getFeeReceivers()\\n        external\\n        view\\n        returns (\\n            address[] memory feeReceivers,\\n            uint256[] memory feeWeights\\n        );\\n\\n    /**\\n     * @notice Calculates the adjusted principal amount and individual fee amounts based on the total principal.\\n     * @dev This function is view-only and does not perform any state changes or transfers.\\n     * @param principalAmount The total amount before fee deduction.\\n     * @return adjustedAmount The principal amount remaining after deducting total fees.\\n     * @return feeAmounts Array of individual fee amounts calculated for each receiver.\\n     */\\n    function calculateAmounts(uint256 principalAmount) \\n        external\\n        view\\n        returns (\\n            uint256 adjustedAmount,\\n            uint256[] memory feeAmounts\\n        );\\n\\n    /**\\n     * @notice Distributes a principal amount, sending calculated fees to receivers and the adjusted amount to the principal receiver.\\n     * @dev Requires the contract to hold sufficient funds (e.g., USDC) to perform the transfers.\\n     * @param principalAmountReceiver The address to receive the adjusted principal amount.\\n     * @param _principalAmount The total amount to be distributed.\\n     * @return adjustedAmountReceiver The address that received the adjusted principal amount.\\n     * @return adjustedAmount The adjusted principal amount transferred.\\n     * @return feeReceivers The addresses that received the fee amounts.\\n     * @return feeAmounts The individual fee amounts transferred.\\n     */\\n    function distributeAmounts(\\n        address principalAmountReceiver,\\n        uint256 _principalAmount\\n    ) external returns (\\n        address adjustedAmountReceiver,\\n        uint256 adjustedAmount,\\n        address[] memory feeReceivers,\\n        uint256[] memory feeAmounts\\n    );\\n\\n    /**\\n     * @dev Emitted when the fee receivers and weights are updated.\\n     * @param feeReceivers The new array of fee receiver addresses.\\n     * @param feeWeights The new array of corresponding fee weights.\\n     */\\n    event FeeReceiversSet(\\n        address[] feeReceivers,\\n        uint256[] feeWeights\\n    );\\n\\n    /**\\n     * @dev Emitted when principal and fee amounts are successfully distributed.\\n     * @param principalAmountReceiver The address that received the adjusted principal amount.\\n     * @param principalAmount The original principal amount before fee deduction.\\n     * @param adjustedAmountReceiver The address that received the adjusted principal amount (same as principalAmountReceiver).\\n     * @param adjustedAmount The adjusted principal amount transferred.\\n     * @param feeReceivers The addresses that received the fee amounts.\\n     * @param feeAmounts The individual fee amounts transferred.\\n     */\\n    event AmountsDistributed(\\n        address principalAmountReceiver,\\n        uint256 principalAmount,\\n        address adjustedAmountReceiver,\\n        uint256 adjustedAmount,\\n        address[] feeReceivers,\\n        uint256[] feeAmounts\\n    );\\n\\n    /**\\n     * @dev Emitted when the Fee Distributor is initialized.\\n     * @param distributionToken The address of the ERC20 token set for distribution.\\n     * @param totalWeightBasis The basis used for calculating fee weights (e.g., 10000).\\n     */\\n    event FeeDistributorInitialized(\\n        address indexed distributionToken,\\n        uint256 totalWeightBasis\\n    );\\n}\",\"keccak256\":\"0x39f54a07e1e1a958b94e58c96b1bd287f3b7bedf40f310b1c1bd5e678297524e\",\"license\":\"MIT\"},\"contracts/interfaces/IIdentity.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IERC734 } from \\\"./IERC734.sol\\\";\\nimport { IERC735 } from \\\"./IERC735.sol\\\";\\n\\ninterface IIdentity is IERC734, IERC735 {\\n    function isVerified() external view returns (bool);\\n    function getClaimTopics() external view returns (uint256[] memory);\\n}\",\"keccak256\":\"0x3441179ea9b419fccd103fa16dad25300acb771897159f124aeb816d93552044\",\"license\":\"MIT\"},\"contracts/interfaces/IInterest.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IInterest {\\n    function mint(address to, uint256 amount) external;\\n    function burn(address from, uint256 amount) external;\\n    function balanceOf(address account) external view returns (uint256);\\n    function totalSupply() external view returns (uint256);\\n    function transfer(address to, uint256 amount) external returns (bool);\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n}\",\"keccak256\":\"0xce6ebdd709be14678830dee979477aa31a8979db931234af2a0f003fd5939e78\",\"license\":\"MIT\"},\"contracts/interfaces/IMarketplace.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Structure defining a fee receiver for marketplace sales\\n * @param receiver The address that will receive the fee\\n * @param sharePerMillion The fee share in parts per million (e.g., 10,000 = 1%)\\n */\\nstruct FeeReceiver {\\n    address payable receiver;\\n    uint256 sharePerMillion;\\n}\\n\\nstruct MarketItem {\\n    address nftContract;\\n    uint256 tokenId;\\n    address seller;\\n    address owner;\\n    uint256 price;\\n    bool sold;\\n    address receiver;\\n    address paymentToken;\\n}\\n\\ninterface IMarketplace {\\n\\n    event Bids(uint256 indexed itemId, address bidder, uint256 amount);\\n    event Sales(address indexed tokenAddress, uint256 indexed tokenId, address indexed owner);\\n\\n    event Listings(\\n        address indexed nftContract,\\n        uint256 indexed tokenId,\\n        address seller,\\n        address receiver,\\n        address owner,\\n        uint256 price,\\n        bool sold,\\n        address paymentToken\\n    );\\n    event Delisted(uint256 indexed itemId);\\n\\n    function listItem(\\n        address nftContract,\\n        address payable receiver,\\n        uint256 tokenId,\\n        uint256 price,\\n        bool transferNFT,\\n        address paymentToken\\n    ) external payable;\\n\\n    function delistItem(address nftContract, uint256 itemId) external;\\n\\n    function purchaseItem(address nftContract, uint256 itemId) external payable;\\n\\n    function fetchItems() external view returns (MarketItem[] memory);\\n\\n    function fetchItem(address nftContract, uint256 tokenId) external view returns (MarketItem memory);\\n\\n    function getMarketplaceFeeReceivers() external view returns (FeeReceiver[] memory);\\n}\\n\",\"keccak256\":\"0xb28f5b53929ab41630e8f9447f98e1b8f60d488b13f8b1605beb2a0c9874dd4c\",\"license\":\"MIT\"},\"contracts/interfaces/IMetadata.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\n\\n/* solhint-disable indent */\\n\\n// enum metadatasource\\nenum MetadataSource {\\n    EXTERNAL, INTERNAL\\n}\\n\\nstruct Trait {\\n    string displayType;\\n    string key;\\n    string value;\\n}\\n\\nstruct MetadataContract {\\n    string _name;\\n    string _symbol;\\n    string _description;\\n    string _imageName;\\n    string[] _imageColors;\\n    string _externalUri;\\n    MetadataSource _metadataSource;\\n    string _baseUri;\\n}\\n\",\"keccak256\":\"0xd07316378fb6037efafa643984cf999cd9fa810b6afa580015c397aa291aa810\",\"license\":\"MIT\"},\"contracts/interfaces/IMultiSale.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { TokenType } from \\\"./IToken.sol\\\";\\nimport { VariablePriceContract } from \\\"./IVariablePrice.sol\\\";\\nimport { Attribute } from \\\"./IAttribute.sol\\\";\\n\\n/// @Nnotice the payment type for the token\\nenum PaymentType {\\n    Ether,\\n    ERC20\\n}\\n\\n/// @notice the multisale purchase\\nstruct MultiSalePurchase {\\n    uint256 multiSaleId;\\n    address purchaser;\\n    address receiver;\\n    uint256 quantity;\\n}\\n    \\n/// @notice the merkle proof for the token sale\\nstruct MultiSaleProof {\\n    uint256 leaf;\\n    uint256 total;\\n    bytes32[] merkleProof;\\n    bytes data;\\n}\\n\\nenum PaymentMethod {\\n    Native, // Payment with the native currency (e.g., ETH)\\n    ERC20 // Payment with an ERC20 token\\n}\\n\\n/// @notice the settings for the token sale,\\nstruct MultiSaleSettings {\\n\\n    TokenType tokenType; // the type of token being sold\\n    address token; // the token being sold\\n    uint256 tokenHash; // the token hash being sold. set to 0 to autocreate hash\\n\\n    uint256 whitelistHash; // the whitelist hash. set to 0 for owhitelist\\n    bool whitelistOnly; // if true, only whitelisted addresses can purchase\\n\\n    PaymentMethod paymentMethod; // New field to indicate payment method\\n    address paymentToken; // New field to store the ERC20 token address for payments\\n\\n    // owner and payee\\n    address owner; // the owner of the contract\\n    address payee; // the payee of the co ntract\\n\\n    string symbol; // the symbol of the token\\n    string name; // the name of the token\\n    string description; // the description of the token\\n\\n    // open state\\n    bool openState; // open or closed\\n    uint256 startTime; // block number when the sale starts\\n    uint256 endTime; // block number when the sale ends\\n\\n    // quantitiesp\\n    uint256 maxQuantity; // max number of tokens that can be sold\\n    uint256 maxQuantityPerSale; // max number of tokens that can be sold per sale\\n    uint256 minQuantityPerSale; // min number of tokens that can be sold per sale\\n    uint256 maxQuantityPerAccount; // max number of tokens that can be sold per account\\n\\n    PaymentType paymentType; // the type of payment that is being used\\n    address tokenAddress; // the address of the payment token, if payment type is TOKEN\\n\\n    uint256 nextSaleId; // the next sale id\\n    VariablePriceContract price; // the variable prices\\n\\n}\\n\\n/// @notice the multi sale contract\\nstruct MultiSaleContract {\\n    MultiSaleSettings settings;\\n\\n    uint256 nonce;\\n    uint256 totalPurchased;\\n        \\n    mapping(address => uint256) purchased;\\n    mapping(uint256 => uint256) _redeemedData;\\n    mapping(address => uint256) _redeemedDataQuantities;\\n    mapping(address => uint256) _totalDataQuantities;\\n    mapping(address => uint256) _accountQuantities;\\n}\\n\\n/// @notice the multi sale storage\\nstruct MultiSaleStorage {\\n    // the nonce\\n    uint256 tsnonce;\\n    mapping(uint256 => MultiSaleContract) _tokenSales; // token sale settings\\n    uint256[] _tokenSaleIds;\\n}\\n\\n\\ninterface IMultiSale {\\n\\n    // @notice emitted when a token sale is created\\n    event MultiSaleCreated(uint256 indexed tokenSaleId, MultiSaleSettings settings);\\n\\n    /// @notice emitted when a token is opened\\n    event MultiSaleOpen (uint256 indexed tokenSaleId, MultiSaleSettings tokenSale);\\n\\n    /// @notice emitted when a token is opened\\n    event MultiSaleClosed (uint256 indexed tokenSaleId);\\n\\n    /// @notice emitted when a token is opened\\n    event MultiSaleSold (uint256 indexed tokenSaleId, address indexed purchaser, uint256[] tokenIds, bytes data);\\n\\n    // token settings were updated\\n    event MultiSaleUpdated (uint256 indexed tokenSaleId, MultiSaleSettings tokenSale );\\n\\n}\\n\",\"keccak256\":\"0xeb1a19c763e9231081622d432eb5ee0e44f5e233b1c1b796d2be5830311553d5\",\"license\":\"MIT\"},\"contracts/interfaces/IToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\n/// @notice the definition for a token.\\r\\nstruct TokenDefinition {\\r\\n    address token;\\r\\n    string name;\\r\\n    string symbol;\\r\\n    string description;\\r\\n    uint256 totalSupply;\\r\\n    string imageName;\\r\\n    string[] imagePalette;\\r\\n    string externalUrl;\\r\\n}\\r\\n\\r\\nenum TokenType {\\r\\n    ERC20,\\r\\n    ERC721,\\r\\n    ERC1155\\r\\n}\",\"keccak256\":\"0x994fc2b4019b0b7faf4fe5cd7e39934be73edb915c7205e3285c58cd4db3516b\",\"license\":\"MIT\"},\"contracts/interfaces/ITrustedIssuersRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IClaimIssuer } from \\\"./IClaimIssuer.sol\\\";\\n\\nstruct TrustedIssuer {\\n    address claimIssuer;\\n    uint[] claimTopics;\\n}\\n\\ninterface ITrustedIssuersRegistry {\\n\\n    // events\\n    event TrustedIssuerAdded(address indexed trustedIssuer, uint[] claimTopics);\\n    event TrustedIssuerRemoved(address indexed trustedIssuer);\\n    event ClaimTopicsUpdated(address indexed trustedIssuer, uint[] claimTopics);\\n\\n    // functions\\n    // setters\\n    function addTrustedIssuer(address _trustedIssuer, uint[] calldata _claimTopics) external;\\n    function removeTrustedIssuer(address _trustedIssuer) external;\\n    function updateIssuerClaimTopics(address _trustedIssuer, uint[] calldata _claimTopics) external;\\n\\n    // getters\\n    function getTrustedIssuer(address issuerAddress) external view returns (TrustedIssuer memory);\\n    function getTrustedIssuers() external view returns (TrustedIssuer[] memory);\\n    function isTrustedIssuer(address _issuer) external view returns(bool);\\n    function getTrustedIssuerClaimTopics(address _trustedIssuer) external view returns(uint[] memory);\\n    function hasTrustedIssuerClaimTopic(address _issuer, uint _claimTopic) external view returns(bool);\\n\\n}\",\"keccak256\":\"0xe614225074d3e906995b5730a4d70e0a97aeba0140ab4391e1e5968e8dca7a5d\",\"license\":\"MIT\"},\"contracts/interfaces/IUSDCPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IUSDCPool {\\n    function deposit(uint256 amount) external;\\n    function withdraw(uint256 amount) external;\\n    function getBalance() external view returns (uint256);\\n    function distributeInterest() external;\\n}\",\"keccak256\":\"0x3d9b699c7f3efbfc17865e076d0cab7a65243384876bda78cf19595256623b0c\",\"license\":\"MIT\"},\"contracts/interfaces/IVariablePrice.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\n\\n/// @notice DIctates how the price of the token is increased post every sale\\nenum PriceModifier {\\n    None,\\n    Fixed,\\n    Exponential,\\n    InverseLog\\n}\\n\\nstruct VariablePriceContract {\\n    // the price of the token\\n    uint256 price;\\n        // how the price is modified\\n    PriceModifier priceModifier;\\n    // only used if priceModifier is EXPONENTIAL or INVERSELOG or FIXED\\n    uint256 priceModifierFactor;\\n    // max price for the token\\n    uint256 maxPrice;\\n}\\n\\nstruct VariablePriceStorage {\\n    // the price of the token\\n    VariablePriceContract variablePrices;\\n}\\n\\n/// @notice common struct definitions for tokens\\ninterface IVariablePrice {\\n    /// @notice get the increased price of the token\\n    function getIncreasedPrice() external view returns (uint256);\\n\\n    /// @notice get the increased price of the token\\n    function getTokenPrice() external view returns (VariablePriceContract memory);\\n}\\n\",\"keccak256\":\"0x2adc5e468273b7c73536ee642f8be345fb3a1f9f713b3370d7d283a0d28d2b7d\",\"license\":\"MIT\"},\"contracts/libraries/AttributeLib.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC721.sol\\\";\\n\\nimport \\\"../interfaces/IAttribute.sol\\\";\\n\\nstruct AttributeStorage {\\n    AttributeContract attributes;\\n}\\n\\nlibrary AttributeLib {\\n    event AttributeSet(address indexed tokenAddress, uint256 tokenId, Attribute attribute);\\n    event AttributeRemoved(address indexed tokenAddress, uint256 tokenId, string attributeKey);\\n\\n    bytes32 internal constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.nextblock.bitgem.app.AttributeStorage.storage\\\");\\n\\n    function attributeStorage() internal pure returns (AttributeStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    /// @notice set an attribute for a tokenid keyed by string\\n    function _getAttribute(\\n        AttributeContract storage self,\\n        uint256 tokenId,\\n        string memory key\\n    ) internal view returns (Attribute memory) {\\n        require(self.burnedIds[tokenId] == false, \\\"Token has been burned\\\");\\n        return self.attributes[tokenId][key];\\n    }\\n\\n    /// @notice get a list of keys of attributes assigned to this tokenid\\n    function _getAttributeValues(\\n        uint256 id\\n    ) internal view returns (string[] memory) {\\n        AttributeContract storage ct = AttributeLib.attributeStorage().attributes;\\n        string[] memory keys = ct.attributeKeys[id];\\n        string[] memory values = new string[](keys.length);\\n        uint256 keysLength = keys.length;\\n        for (uint256 i = 0; i < keysLength; i++) {\\n            values[i] = ct.attributes[id][keys[i]].value;\\n        }\\n        return values;\\n    }\\n    \\n    /// @notice set an attribute to a tokenid keyed by string\\n    function _setAttribute(\\n        AttributeContract storage self,\\n        uint256 tokenId,\\n        Attribute memory attribute\\n    ) internal {\\n        require(self.burnedIds[tokenId] == false, \\\"Token has been burned\\\");\\n        if (self.attributeKeysIndexes[tokenId][attribute.key] == 0 \\n            && bytes(self.attributes[tokenId][attribute.key].value).length == 0) {\\n            self.attributeKeys[tokenId].push(attribute.key);\\n            self.attributeKeysIndexes[tokenId][attribute.key] = self.attributeKeys[tokenId].length - 1;\\n        }\\n        self.attributes[tokenId][attribute.key] = attribute;\\n    }\\n    \\n    /// @notice set multiple  attributes for the token\\n    function _setAttributes(\\n        AttributeContract storage self,\\n        uint256 tokenId, \\n        Attribute[] memory _attributes)\\n        internal\\n    {\\n        require(self.burnedIds[tokenId] == false, \\\"Token has been burned\\\");\\n        uint256 attributesLength = _attributes.length;\\n        for (uint256 i = 0; i < attributesLength; i++) {\\n            _setAttribute(self, tokenId, _attributes[i]);\\n        }\\n    }\\n\\n    /// @notice get a list of keys of attributes assigned to this tokenid\\n    function _getAttributeKeys(\\n        AttributeContract storage self,\\n        uint256 tokenId\\n    ) internal view returns (string[] memory) {\\n        require(self.burnedIds[tokenId] == false, \\\"Token has been burned\\\");\\n        return self.attributeKeys[tokenId];\\n    }\\n\\n    /// @notice remove the attribute for a tokenid keyed by string\\n    function _removeAttribute(\\n        AttributeContract storage self,\\n        uint256 tokenId,\\n        string memory key\\n    ) internal {\\n        require(self.burnedIds[tokenId] == false, \\\"Token has been burned\\\");\\n        delete self.attributes[tokenId][key];\\n        uint256 ndx = self.attributeKeysIndexes[tokenId][key];\\n        for (uint256 i = ndx; i < self.attributeKeys[tokenId].length - 1; i++) {\\n            self.attributeKeys[tokenId][i] = self.attributeKeys[tokenId][i + 1];\\n            self.attributeKeysIndexes[tokenId][self.attributeKeys[tokenId][i]] = i;\\n        }\\n        delete self.attributeKeys[tokenId][self.attributeKeys[tokenId].length - 1];\\n        emit AttributeRemoved(address(this), tokenId, key);\\n    }\\n\\n    // @notice set multiple attributes for the token\\n    function _burn(\\n        AttributeContract storage self,\\n        uint256 tokenId)\\n        internal\\n    {\\n        self.burnedIds[tokenId] = true;\\n    }\\n}\\n\",\"keccak256\":\"0xf17d7da2d3938a57bf46cd52df9153bec3151df14be018c65dde609cc1b1ad7a\",\"license\":\"MIT\"},\"contracts/libraries/DiamondFactoryLib.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC721Metadata.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/Create2.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\nimport { IDiamondLoupe } from \\\"../interfaces/IDiamondLoupe.sol\\\";\\nimport { IERC173 } from \\\"../interfaces/IERC173.sol\\\";\\nimport { TokenDefinition } from \\\"../interfaces/IToken.sol\\\";\\n\\nimport \\\"../interfaces/IDiamondFactory.sol\\\";\\nimport \\\"../interfaces/IDiamond.sol\\\";\\n\\ninterface IDiamondElement {\\n  function initialize(\\n    address, \\n    DiamondSettings memory,\\n    IDiamondCut.FacetCut[] calldata,\\n    address,\\n    bytes calldata) external payable;\\n}\\n\\nlibrary DiamondFactoryLib {\\n\\n  struct ContractData {\\n    mapping(string => address) diamondAddresses;\\n    string[] diamondSymbols;\\n    mapping(string => IDiamondCut.FacetCut[]) facetsToAdd;\\n    string[] facetSets;\\n    string defaultFacetSet;\\n    bytes diamondBytecode;\\n  }\\n\\n  struct DiamondFactoryStorage {\\n    ContractData contractData;\\n  }\\n\\n  bytes32 internal constant DIAMOND_STORAGE_POSITION =\\n    keccak256(\\\"diamond.nextblock.bitgem.app.DiamondFactoryStorage.storage\\\");\\n\\n  /// @notice get the storage for the diamond factory\\n  /// @return ds DiamondFactoryStorage the storage for the diamond factory\\n  function diamondFactoryStorage() internal pure returns (DiamondFactoryStorage storage ds) {\\n    bytes32 position = DIAMOND_STORAGE_POSITION;\\n    assembly {\\n      ds.slot := position\\n    }\\n  }\\n\\n  /// @notice add a set of facets to the factory and associate with a string name\\n  /// @param self the storage for the diamond factory\\n  /// @param setName the name of the set of facets\\n  /// @param facets the facets to add\\n  function _addFacetSet(DiamondFactoryStorage storage self, string memory setName, IDiamondCut.FacetCut[] memory facets) internal {\\n    // add the facets to the diamond\\n    uint256 facetsLength = facets.length;\\n    for (uint256 i = 0; i < facetsLength; i++) {\\n      self.contractData.facetsToAdd[setName].push(facets[i]);\\n    }\\n    // add the facet set name to the list of facet sets\\n    bool found = false;\\n    uint256 facetSetsLength = self.contractData.facetSets.length;\\n    for (uint256 i = 0; i < facetSetsLength; i++) {\\n      if (keccak256(bytes(self.contractData.facetSets[i])) == keccak256(bytes(setName))) {\\n        found = true;\\n        break;\\n      }\\n    }\\n    if (!found) {\\n      self.contractData.facetSets.push(setName);\\n    }\\n  }\\n\\n  /// @notice get all the facets for a particular set name\\n  /// @param self the storage for the diamond factory\\n  /// @param setName the name of the set of facets\\n  /// @return IDiamondCut.FacetCut[] the facets for the set name\\n  function _getFacets(DiamondFactoryStorage storage self, string memory setName) internal view returns (IDiamondCut.FacetCut[] memory) {\\n    return self.contractData.facetsToAdd[setName];\\n  }\\n\\n  /// @notice set a facet for facet set name at a particular index\\n  /// @param self the storage for the diamond factory\\n  /// @param setName the name of the set of facets\\n  /// @param idx the index of the facet to set\\n  /// @param facet the facet to set\\n  function _setFacet(DiamondFactoryStorage storage self, string memory setName, uint256 idx, IDiamondCut.FacetCut memory facet) internal {\\n    self.contractData.facetsToAdd[setName][idx] = facet;\\n    // add the facet set name to the list of facet sets\\n    bool found = false;\\n    uint256 facetSetsLength = self.contractData.facetSets.length;\\n    for (uint256 i = 0; i < facetSetsLength; i++) {\\n      if (keccak256(bytes(self.contractData.facetSets[i])) == keccak256(bytes(setName))) {\\n        found = true;\\n        break;\\n      }\\n    }\\n    if (!found) {\\n      self.contractData.facetSets.push(setName);\\n    }  \\n  }\\n\\n  /// @notice get an address for the given diamond\\n  /// @param factoryAddress the diamond factory\\n  /// @param symbol the symbol of the  diamond\\n  /// @param creationCode the creation code for the diamond\\n  function _getDiamondAddress(DiamondFactoryStorage storage, address factoryAddress, string memory symbol, bytes memory creationCode)\\n    internal\\n    view\\n    returns (address) {\\n    return Create2.computeAddress(\\n      keccak256(abi.encodePacked(factoryAddress, symbol)),\\n      keccak256(creationCode)\\n    );\\n  }\\n\\n    /// @notice create a new diamond token with the given symbol\\n    /// @param self the storage for the diamond factory\\n    /// @param diamondAddress the diamond address\\n    /// @param diamondInit the diamond init data\\n    /// @param _calldata  the calldata for the diamond\\n    /// @param _creationCode the creation code for the diamond\\n    function create(\\n        DiamondFactoryStorage storage self,\\n        address diamondAddress,\\n        DiamondSettings memory params,\\n        address diamondInit,\\n        bytes calldata _calldata,\\n        bytes memory _creationCode,\\n        IDiamondCut.FacetCut[] memory facets\\n    ) internal returns (address payable _diamondAddress) {\\n        // use create2 to create the token\\n        _diamondAddress = payable(\\n            Create2.deploy(\\n                0,\\n                keccak256(abi.encodePacked(diamondAddress, params.symbol)),\\n                _creationCode\\n            )\\n        );\\n        require(_diamondAddress != address(0), \\\"create_failed\\\");\\n        \\n        // update storage with the new data\\n        self.contractData.diamondAddresses[params.symbol] = _diamondAddress;\\n        self.contractData.diamondSymbols.push(params.symbol);\\n\\n        // initialize the diamond contract\\n        IDiamondElement(_diamondAddress).initialize(\\n            msg.sender,\\n            params,\\n            facets,\\n            diamondInit,\\n            _calldata\\n        );\\n    }\\n\\n    /// @notice create a new diamond token with the given symbol\\n    /// @param self the storage for the diamond factory\\n    /// @param diamondAddress the diamond address\\n    /// @param diamondInit the diamond init data\\n    /// @param _calldata  the calldata for the diamond\\n    /// @param _creationCode the creation code for the diamond\\n    function createFromSet(\\n        DiamondFactoryStorage storage self,\\n        address diamondAddress,\\n        DiamondSettings memory params,\\n        address diamondInit,\\n        bytes calldata _calldata,\\n        bytes memory _creationCode,\\n        string memory facetSet\\n    ) internal returns (address payable _diamondAddress) {\\n        // use create2 to create the token\\n        _diamondAddress = payable(\\n            Create2.deploy(\\n                0,\\n                keccak256(abi.encodePacked(diamondAddress, params.symbol)),\\n                _creationCode\\n            )\\n        );\\n        require(_diamondAddress != address(0), \\\"create_failed\\\");\\n        \\n        // update storage with the new data\\n        self.contractData.diamondAddresses[params.symbol] = _diamondAddress;\\n        self.contractData.diamondSymbols.push(params.symbol);\\n\\n        // initialize the diamond contract\\n        IDiamondElement(_diamondAddress).initialize(\\n            msg.sender,\\n            params,\\n            self.contractData.facetsToAdd[facetSet],\\n            diamondInit,\\n            _calldata\\n        );\\n    }\\n\\n    /// @notice add an existing diamond to this factory\\n    /// @param self the storage for the diamond factory\\n    /// @param symbol the symbol of the diamond\\n    /// @param diamondAddress the address of the diamond\\n    function add(\\n        DiamondFactoryStorage storage self,\\n        string memory symbol,\\n        address payable diamondAddress\\n    ) internal {\\n        // update storage with the new data\\n        self.contractData.diamondAddresses[symbol] = diamondAddress;\\n        self.contractData.diamondSymbols.push(symbol);\\n    }\\n\\n    /// @notice remove a diamond from this factory\\n    /// @param self the storage for the diamond factory\\n    /// @param symbol the symbol of the diamond\\n    function remove(\\n      DiamondFactoryStorage storage self,\\n      string memory symbol\\n    ) internal {\\n        self.contractData.diamondAddresses[symbol] = address(0);\\n        for(uint256 i = 0; i < self.contractData.diamondSymbols.length; i++) {\\n            if ( keccak256(bytes(self.contractData.diamondSymbols[i] ) ) == keccak256(bytes(symbol)) ) {\\n                self.contractData.diamondSymbols[i] = self.contractData.diamondSymbols[self.contractData.diamondSymbols.length - 1];\\n                self.contractData.diamondSymbols.pop();\\n                break;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbfba1ace4a7627b56cd97295a4350ac97668aff5dcd8321cd395a0258df1ad14\",\"license\":\"MIT\"},\"contracts/libraries/DiamondLib.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC721Metadata.sol\\\";\\n\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\nimport { DiamondStorage } from \\\"../interfaces/IDiamond.sol\\\";\\nimport { IDiamondLoupe } from \\\"../interfaces/IDiamondLoupe.sol\\\";\\nimport { IERC173 } from \\\"../interfaces/IERC173.sol\\\";\\nimport { TokenDefinition } from \\\"../interfaces/IToken.sol\\\";\\n\\nimport \\\"./LibDiamond.sol\\\";\\nimport \\\"./ERC721ALib.sol\\\";\\n\\nimport \\\"../upgradeInitializers/DiamondInit.sol\\\";\\n\\nlibrary DiamondLib {\\n\\n  bytes32 internal constant DIAMOND_STORAGE_POSITION =\\n    keccak256(\\\"diamond.nextblock.bitgem.app.DiamondStorage.storage\\\");\\n\\n  function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n    bytes32 position = DIAMOND_STORAGE_POSITION;\\n    assembly {\\n      ds.slot := position\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xd2f734381f5810b5948f7c571b0a8e97eeb911928a89b9c77a0706f2543519e4\",\"license\":\"MIT\"},\"contracts/libraries/ERC721ALib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Creator: Chiru Labs\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC721Receiver.sol\\\";\\nimport \\\"../identity/IdentityStorage.sol\\\";\\nimport \\\"../interfaces/IERC721A.sol\\\";\\nimport \\\"../interfaces/IERC721Enumerable.sol\\\";\\n\\n\\n/* solhint-disable indent */\\n/* solhint-disable mark-callable-contracts */\\n\\nerror ApprovalCallerNotOwnerNorApproved();\\nerror ApprovalQueryForNonexistentToken();\\nerror ApproveToCaller();\\nerror ApprovalToCurrentOwner();\\nerror BalanceQueryForZeroAddress();\\nerror MintedQueryForZeroAddress();\\nerror BurnedQueryForZeroAddress();\\nerror AuxQueryForZeroAddress();\\nerror MintToZeroAddress();\\nerror MintZeroQuantity();\\nerror OwnerIndexOutOfBounds();\\nerror OwnerQueryForNonexistentToken();\\nerror TokenIndexOutOfBounds();\\nerror TransferCallerNotOwnerNorApproved();\\nerror TransferFromIncorrectOwner();\\nerror TransferToNonERC721ReceiverImplementer();\\nerror TransferToZeroAddress();\\nerror URIQueryForNonexistentToken();\\n\\nstruct ERC721AStorage {\\n    ERC721EnumerableContract enumerations;\\n    ERC721AContract erc721Contract;\\n}\\n\\nlibrary ERC721ALib {\\n\\n    using Strings for uint256;\\n    using Address for address;\\n\\n    /**\\n     * Returns the total number of minted tokens\\n     */\\n    function totalSupply(ERC721AContract storage self) internal view returns (uint256) {\\n        // Counter underflow is impossible as _burnCounter cannot be incremented\\n        // more than _currentIndex times\\n        unchecked {\\n            return self._currentIndex - self._burnCounter;\\n        }\\n    }\\n    \\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(ERC721AContract storage self, address owner) internal view returns (uint256) {\\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\\n        return uint256(self._addressData[owner].balance);\\n    }\\n\\n    /**\\n     * Returns the number of tokens minted by `owner`.\\n     */\\n    function _numberMinted(ERC721AContract storage self, address owner) internal view returns (uint256) {\\n        if (owner == address(0)) revert MintedQueryForZeroAddress();\\n        return uint256(self._addressData[owner].numberMinted);\\n    }\\n\\n    /**\\n     * Returns the number of tokens burned by or on behalf of `owner`.\\n     */\\n    function _numberBurned(ERC721AContract storage self, address owner) internal view returns (uint256) {\\n        if (owner == address(0)) revert BurnedQueryForZeroAddress();\\n        return uint256(self._addressData[owner].numberBurned);\\n    }\\n\\n    /**\\n     * Returns the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\\n     */\\n    function _getAux(ERC721AContract storage self, address owner) internal view returns (uint64) {\\n        if (owner == address(0)) revert AuxQueryForZeroAddress();\\n        return self._addressData[owner].aux;\\n    }\\n\\n    /**\\n     * Sets the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\\n     * If there are multiple variables, please pack them into a uint64.\\n     */\\n    function _setAux(ERC721AContract storage self, address owner, uint64 aux) internal {\\n        if (owner == address(0)) revert AuxQueryForZeroAddress();\\n        self._addressData[owner].aux = aux;\\n    }\\n\\n    function ownershipOf(ERC721AContract storage self, uint256 tokenId) internal view returns (TokenOwnership memory) {\\n        uint256 curr = tokenId;\\n        unchecked {\\n            if (curr < self._currentIndex) {\\n                TokenOwnership memory ownership = self._ownerships[curr];\\n                if (!ownership.burned) {\\n                    if (ownership.addr != address(0)) {\\n                        return ownership;\\n                    }\\n                    // Invariant:\\n                    // There will always be an ownership that has an address and is not burned\\n                    // before an ownership that does not have an address and is not burned.\\n                    // Hence, curr will not underflow.\\n                    while (true) {\\n                        curr--;\\n                        ownership = self._ownerships[curr];\\n                        if (ownership.addr != address(0)) {\\n                            return ownership;\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        revert OwnerQueryForNonexistentToken();\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     */\\n    function _exists(ERC721AContract storage self, uint256 tokenId) internal view returns (bool) {\\n        return tokenId < self._currentIndex && !self._ownerships[tokenId].burned;\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(ERC721AContract storage self, uint256 tokenId) internal view returns (address) {\\n        if (!_exists(self, tokenId)) revert ApprovalQueryForNonexistentToken();\\n        return self._tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(ERC721AContract storage self, address sender, address operator, bool approved) internal {\\n        self._operatorApprovals[sender][operator] = approved;\\n        emit ApprovalForAll(sender, operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(ERC721AContract storage self, address owner, address operator) internal view returns (bool) {\\n        return self._operatorApprovals[owner][operator];\\n    }\\n\\n    function currentIndex(ERC721AContract storage self) internal view returns (uint256) {\\n        return self._currentIndex;\\n    }\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(\\n        ERC721AContract storage self,\\n        address msgSender,\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data,\\n        bool safe\\n    ) internal {\\n        // Overflows are incredibly unrealistic.\\n        // balance or numberMinted overflow if current value of either + quantity > 1.8e19 (2**64) - 1\\n        // updatedIndex overflows if _currentIndex + quantity > 1.2e77 (2**256) - 1\\n        uint256 startTokenId = self._currentIndex;\\n        if (to == address(0)) revert MintToZeroAddress();\\n        if (quantity == 0) revert MintZeroQuantity();\\n\\n        _beforeTokenTransfers(self, address(0), to, startTokenId, quantity, false);\\n\\n        unchecked {\\n            self._addressData[to].balance += uint64(quantity);\\n            self._addressData[to].numberMinted += uint64(quantity);\\n\\n            self._ownerships[startTokenId].addr = to;\\n            self._ownerships[startTokenId].startTimestamp = uint64(block.timestamp);\\n\\n            uint256 updatedIndex = startTokenId;\\n\\n            for (uint256 i; i < quantity; i++) {\\n                emit Transfer(address(0), to, updatedIndex);\\n                if (safe && !_checkOnERC721Received(msgSender, address(0), to, updatedIndex, _data)) {\\n                    revert TransferToNonERC721ReceiverImplementer();\\n                }\\n                updatedIndex++;\\n            }\\n\\n            self._currentIndex = updatedIndex;\\n        }\\n\\n        _afterTokenTransfers(self, address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        ERC721AContract storage self,\\n        address msgSender,\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bool _force\\n    ) internal {\\n        TokenOwnership memory prevOwnership = ownershipOf(self, tokenId);\\n\\n        bool isApprovedOrOwner = (msgSender == prevOwnership.addr ||\\n            isApprovedForAll(self, prevOwnership.addr, msgSender) ||\\n            getApproved(self, tokenId) == msgSender);\\n\\n        if (!isApprovedOrOwner && !_force) revert TransferCallerNotOwnerNorApproved();\\n        if (prevOwnership.addr != from) revert TransferFromIncorrectOwner();\\n        if (to == address(0)) revert TransferToZeroAddress();\\n\\n        _beforeTokenTransfers(self, from, to, tokenId, 1, _force);\\n\\n        // Clear approvals from the previous owner\\n        _approve(self, address(0), tokenId, prevOwnership.addr);\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\\n        unchecked {\\n            self._addressData[from].balance -= 1;\\n            self._addressData[to].balance += 1;\\n\\n            self._ownerships[tokenId].addr = to;\\n            self._ownerships[tokenId].startTimestamp = uint64(block.timestamp);\\n\\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\n            uint256 nextTokenId = tokenId + 1;\\n            if (self._ownerships[nextTokenId].addr == address(0)) {\\n                // This will suffice for checking _exists(nextTokenId),\\n                // as a burned slot cannot contain the zero address.\\n                if (nextTokenId < self._currentIndex) {\\n                    self._ownerships[nextTokenId].addr = prevOwnership.addr;\\n                    self._ownerships[nextTokenId].startTimestamp = prevOwnership.startTimestamp;\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, to, tokenId);\\n        _afterTokenTransfers(self, from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(ERC721AContract storage self, uint256 tokenId) internal {\\n        TokenOwnership memory prevOwnership = ownershipOf(self, tokenId);\\n\\n        _beforeTokenTransfers(self, prevOwnership.addr, address(0), tokenId, 1, false);\\n\\n        // Clear approvals from the previous owner\\n        _approve(self, address(0), tokenId, prevOwnership.addr);\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\\n        unchecked {\\n            self._addressData[prevOwnership.addr].balance -= 1;\\n            self._addressData[prevOwnership.addr].numberBurned += 1;\\n\\n            // Keep track of who burned the token, and the timestamp of burning.\\n            self._ownerships[tokenId].addr = prevOwnership.addr;\\n            self._ownerships[tokenId].startTimestamp = uint64(block.timestamp);\\n            self._ownerships[tokenId].burned = true;\\n\\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the burn initiator owns it.\\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\n            uint256 nextTokenId = tokenId + 1;\\n            if (self._ownerships[nextTokenId].addr == address(0)) {\\n                // This will suffice for checking _exists(nextTokenId),\\n                // as a burned slot cannot contain the zero address.\\n                if (nextTokenId < self._currentIndex) {\\n                    self._ownerships[nextTokenId].addr = prevOwnership.addr;\\n                    self._ownerships[nextTokenId].startTimestamp = prevOwnership.startTimestamp;\\n                }\\n            }\\n        }\\n\\n        emit Transfer(prevOwnership.addr, address(0), tokenId);\\n        _afterTokenTransfers(self, prevOwnership.addr, address(0), tokenId, 1);\\n\\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\\n        unchecked {\\n            self._burnCounter++;\\n        }\\n    }\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(\\n        ERC721AContract storage self,\\n        address to,\\n        uint256 tokenId,\\n        address owner\\n    ) internal {\\n        self._tokenApprovals[tokenId] = to;\\n        emit Approval(owner, to, tokenId);\\n    }\\n\\n    function _ownerOf(ERC721AContract storage self, uint256 tokenId) internal view returns (address) {\\n        return ownershipOf(self, tokenId).addr;\\n    }\\n\\n    function _isContract(\\n        address account\\n    ) internal view returns (bool) {\\n        // According to EIP-1052, an address is a contract if it has code.\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address msgSender,\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal returns (bool) {\\n        if (_isContract(to)) {\\n            try IERC721Receiver(to).onERC721Received(msgSender, from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver(to).onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert TransferToNonERC721ReceiverImplementer();\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\\n     * And also called before burning one token.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _beforeTokenTransfers(\\n        ERC721AContract storage self,\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity,\\n        bool force\\n    ) internal {}\\n\\n    /**\\n     * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\\n     * minting.\\n     * And also called after one token has been burned.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` has been minted for `to`.\\n     * - When `to` is zero, `tokenId` has been burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _afterTokenTransfers(\\n        ERC721AContract storage self,\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal {}\\n}\\n\",\"keccak256\":\"0xbd06078dff09c6e139e6322429df420050e1bc9a918e8869eeac0b9056ee3095\",\"license\":\"MIT\"},\"contracts/libraries/FeeDistributorLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../identity/IdentityStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\nlibrary FeeDistributorLib {\\n    using SafeERC20 for IERC20;\\n\\n    // Storage struct for Fee Distributor settings\\n    struct FeeDistributorStorage {\\n        address[] feeReceivers;\\n        uint256[] feeWeights;\\n        uint256 totalWeightBasis; // e.g., 10000 for basis points\\n        address distributionToken; // Address of the ERC20 token to distribute (e.g., USDC)\\n    }\\n// --- Logic Functions (Implementations TBD) ---\\n    // --- Logic Functions (Implementations TBD) ---\\n\\n    /**\\n     * @notice Initializes the Fee Distributor settings. Should only be called once.\\n     * @param ds Diamond storage pointer.\\n     * @param _distributionToken Address of the ERC20 token to be distributed.\\n     * @param _totalWeightBasis The basis for fee weights (e.g., 10000 for basis points).\\n     */\\n    function _initializeFeeDistributor(\\n        IdentitySystemStorage.IdentitySystem storage ds,\\n        address _distributionToken,\\n        uint256 _totalWeightBasis\\n    ) internal {\\n        FeeDistributorStorage storage fds = ds.feeDistributorStorage;\\n        require(fds.distributionToken == address(0), \\\"FeeDistributor: Already initialized\\\");\\n        // Allow address(0) for native currency distribution\\n        require(_totalWeightBasis > 0, \\\"FeeDistributor: Basis must be positive\\\");\\n\\n        fds.distributionToken = _distributionToken;\\n        fds.totalWeightBasis = _totalWeightBasis;\\n    }\\n\\n    /**\\n     * @notice Sets the fee receivers and their weights.\\n     * @param ds Diamond storage pointer.\\n     * @param _feeReceivers Array of addresses to receive fees.\\n     * @param _feeWeights Array of weights corresponding to each receiver.\\n     */\\n    function _setFeeReceivers(\\n        IdentitySystemStorage.IdentitySystem storage ds,\\n        address[] memory _feeReceivers,\\n        uint256[] memory _feeWeights\\n    ) internal returns (address[] memory, uint256[] memory) {\\n        FeeDistributorStorage storage fds = ds.feeDistributorStorage;\\n        require(_feeReceivers.length == _feeWeights.length, \\\"FeeDistributor: Array lengths mismatch\\\");\\n        require(_feeReceivers.length > 0, \\\"FeeDistributor: Must provide at least one receiver\\\");\\n\\n        uint256 totalWeightSum = 0;\\n        for (uint i = 0; i < _feeReceivers.length; i++) {\\n            require(_feeReceivers[i] != address(0), \\\"FeeDistributor: Invalid receiver address\\\");\\n            require(_feeWeights[i] > 0, \\\"FeeDistributor: Weight must be positive\\\");\\n            totalWeightSum += _feeWeights[i];\\n        }\\n        require(totalWeightSum == fds.totalWeightBasis, \\\"FeeDistributor: Weights must sum to basis\\\");\\n\\n        fds.feeReceivers = _feeReceivers;\\n        fds.feeWeights = _feeWeights;\\n\\n        return (_feeReceivers, _feeWeights); // Return for event emission in facet\\n    }\\n\\n    /**\\n     * @notice Gets the current fee receivers and their weights.\\n     * @param ds Diamond storage pointer.\\n     * @return feeReceivers_ Array of addresses currently set to receive fees.\\n     * @return feeWeights_ Array of weights corresponding to each receiver.\\n     */\\n    function _getFeeReceivers(\\n        IdentitySystemStorage.IdentitySystem storage ds\\n    )\\n        internal\\n        view\\n        returns (\\n            address[] memory feeReceivers_,\\n            uint256[] memory feeWeights_\\n        )\\n    {\\n        FeeDistributorStorage storage fds = ds.feeDistributorStorage;\\n        return (fds.feeReceivers, fds.feeWeights);\\n    }\\n\\n    /**\\n     * @notice Calculates the adjusted principal amount and individual fee amounts.\\n     * @param ds Diamond storage pointer.\\n     * @param principalAmount The total amount before fee deduction.\\n     * @return adjustedAmount The principal amount remaining after deducting total fees.\\n     * @return feeAmounts Array of individual fee amounts calculated for each receiver.\\n     */\\n    function _calculateAmounts(\\n        IdentitySystemStorage.IdentitySystem storage ds,\\n        uint256 principalAmount\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256 adjustedAmount,\\n            uint256[] memory feeAmounts\\n        )\\n    {\\n        FeeDistributorStorage storage fds = ds.feeDistributorStorage;\\n        address[] memory receivers = fds.feeReceivers;\\n        uint256 numReceivers = receivers.length;\\n\\n        if (numReceivers == 0) {\\n            // No fee receivers configured, return full principal (pass-through)\\n            return (principalAmount, new uint256[](0));\\n        }\\n\\n        // If fee receivers are configured, then the basis must be initialized.\\n        require(fds.totalWeightBasis > 0, \\\"FeeDistributor: Not initialized or invalid basis\\\");\\n        uint256[] memory weights = fds.feeWeights; // Get weights only if needed\\n\\n        feeAmounts = new uint256[](numReceivers);\\n        uint256 totalFeeAmount = 0;\\n\\n        for (uint i = 0; i < numReceivers; i++) {\\n            // Calculate fee: (principalAmount * weight) / basis\\n            // Protect against overflow before division\\n            uint256 fee = (principalAmount * weights[i]) / fds.totalWeightBasis;\\n            feeAmounts[i] = fee;\\n            totalFeeAmount += fee;\\n        }\\n\\n        require(totalFeeAmount <= principalAmount, \\\"FeeDistributor: Total fees exceed principal\\\");\\n        adjustedAmount = principalAmount - totalFeeAmount;\\n\\n        return (adjustedAmount, feeAmounts);\\n    }\\n\\n    /**\\n     * @notice Distributes a principal amount after deducting fees.\\n     * @dev Can distribute either native currency (if distributionToken is address(0)) or a specified ERC20 token.\\n     * @dev Assumes the contract holds sufficient balance of the currency/token to distribute.\\n     * @param ds Diamond storage pointer.\\n     * @param self The address of the calling contract (the diamond) for native transfers.\\n     * @param principalAmountReceiver The address to receive the adjusted principal amount.\\n     * @param _principalAmount The total amount to be distributed.\\n     * @return adjustedAmountReceiver_ The address that received the adjusted principal amount.\\n     * @return adjustedAmount_ The adjusted principal amount transferred.\\n     * @return feeReceivers_ The addresses that received the fee amounts.\\n     * @return feeAmounts_ The individual fee amounts transferred.\\n     */\\n    function _distributeAmounts(\\n        IdentitySystemStorage.IdentitySystem storage ds,\\n        address self, // Address of the diamond/calling contract\\n        address principalAmountReceiver,\\n        uint256 _principalAmount\\n    ) internal returns (\\n        address adjustedAmountReceiver_,\\n        uint256 adjustedAmount_,\\n        address[] memory feeReceivers_,\\n        uint256[] memory feeAmounts_\\n    ) {\\n        FeeDistributorStorage storage fds = ds.feeDistributorStorage;\\n        // No require for token != address(0) anymore, as address(0) signifies native currency\\n        require(principalAmountReceiver != address(0), \\\"FeeDistributor: Invalid principal receiver\\\");\\n\\n        // Calculate amounts\\n        (uint256 adjustedAmount, uint256[] memory feeAmounts) = _calculateAmounts(ds, _principalAmount);\\n\\n        address[] memory receivers = fds.feeReceivers;\\n        bool isNative = fds.distributionToken == address(0);\\n\\n        if (isNative) {\\n            // Native currency distribution\\n            require(self.balance >= _principalAmount, \\\"FeeDistributor: Insufficient native balance\\\");\\n            // Transfer fees\\n            for (uint i = 0; i < receivers.length; i++) {\\n                if (feeAmounts[i] > 0) {\\n                    (bool success, ) = payable(receivers[i]).call{value: feeAmounts[i]}(\\\"\\\");\\n                    require(success, \\\"FeeDistributor: Native fee transfer failed\\\");\\n                }\\n            }\\n            // Transfer adjusted principal amount\\n            if (adjustedAmount > 0) {\\n                (bool success, ) = payable(principalAmountReceiver).call{value: adjustedAmount}(\\\"\\\");\\n                require(success, \\\"FeeDistributor: Native principal transfer failed\\\");\\n            }\\n        } else {\\n            // ERC20 token distribution\\n            IERC20 token = IERC20(fds.distributionToken);\\n            require(token.balanceOf(self) >= _principalAmount, \\\"FeeDistributor: Insufficient token balance\\\");\\n            // Transfer fees\\n            for (uint i = 0; i < receivers.length; i++) {\\n                if (feeAmounts[i] > 0) {\\n                    token.safeTransfer(receivers[i], feeAmounts[i]);\\n                }\\n            }\\n            // Transfer adjusted principal amount\\n            if (adjustedAmount > 0) {\\n                token.safeTransfer(principalAmountReceiver, adjustedAmount);\\n            }\\n        }\\n\\n        // Return values for event emission\\n        return (principalAmountReceiver, adjustedAmount, receivers, feeAmounts);\\n    }\\n\\n}\",\"keccak256\":\"0x44d1e392cbb9b8e3315b4d213b26f4ae05cabf43528d5b42d3e8f6dc08a606b4\",\"license\":\"MIT\"},\"contracts/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\nimport \\\"../interfaces/IERC173.sol\\\"; // for IERC173 interface\\nimport \\\"../interfaces/IDiamondCut.sol\\\";\\n\\n// Remember to add the loupe functions from DiamondLoupeFacet to the diamond.\\n// The loupe functions are required by the EIP2535 Diamonds standard\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    // Upgrade proposal struct for timelock functionality\\n    struct UpgradeProposal {\\n        IDiamondCut.FacetCut[] diamondCut;\\n        address initAddress;\\n        bytes initCalldata;\\n        uint256 proposalTime;\\n        bool exists;\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n        // Timelock for upgrades (in seconds)\\n        uint256 upgradeTimelock;\\n        // Storage for the current upgrade proposal\\n        UpgradeProposal upgradeProposal;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit IERC173.OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n    }\\n\\n    // Timelock constants\\n    uint256 constant DEFAULT_UPGRADE_TIMELOCK = 2 days;\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else {\\n                revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit IDiamondCut.DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);            \\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress != _facetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n            removeFunction(ds, oldFacetAddress, selector);\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(_facetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            removeFunction(ds, oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\n        enforceHasContractCode(_facetAddress, \\\"LibDiamondCut: New facet has no code\\\");\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n        ds.facetAddresses.push(_facetAddress);\\n    }    \\n\\n\\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n        // an immutable function is a function defined directly in a diamond\\n        require(_facetAddress != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            require(_calldata.length == 0, \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\");\\n        } else {\\n            require(_calldata.length > 0, \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\");\\n            if (_init != address(this)) {\\n                enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n\\n    // Initialize timelock settings for upgrade proposals\\n    function initializeUpgradeTimelock(uint256 _timelock) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        require(ds.upgradeTimelock == 0, \\\"LibDiamond: Timelock already initialized\\\");\\n        ds.upgradeTimelock = _timelock > 0 ? _timelock : DEFAULT_UPGRADE_TIMELOCK;\\n    }\\n\\n    // Propose a diamond cut to be executed after the timelock\\n    function proposeDiamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        require(!ds.upgradeProposal.exists, \\\"LibDiamond: Upgrade already proposed\\\");\\n        require(ds.upgradeTimelock > 0, \\\"LibDiamond: Timelock not initialized\\\");\\n        \\n        // Create a deep copy of the diamond cut to store in the proposal\\n        IDiamondCut.FacetCut[] memory diamondCutCopy = new IDiamondCut.FacetCut[](_diamondCut.length);\\n        for (uint256 i = 0; i < _diamondCut.length; i++) {\\n            diamondCutCopy[i] = _diamondCut[i];\\n            \\n            // Deep copy the function selectors array\\n            bytes4[] memory selectors = new bytes4[](_diamondCut[i].functionSelectors.length);\\n            for (uint256 j = 0; j < _diamondCut[i].functionSelectors.length; j++) {\\n                selectors[j] = _diamondCut[i].functionSelectors[j];\\n            }\\n            diamondCutCopy[i].functionSelectors = selectors;\\n        }\\n        \\n        // Store the proposal\\n        // Create empty array in storage first\\n        delete ds.upgradeProposal.diamondCut;\\n        \\n        // Manually copy each element and its nested arrays to storage\\n        for (uint256 i = 0; i < _diamondCut.length; i++) {\\n            // Create a new struct in storage by pushing an empty element first\\n            ds.upgradeProposal.diamondCut.push();\\n            \\n            // Now set the values for this element's fields\\n            ds.upgradeProposal.diamondCut[i].facetAddress = _diamondCut[i].facetAddress;\\n            ds.upgradeProposal.diamondCut[i].action = _diamondCut[i].action;\\n            \\n            // For the selectors array, we need to handle it separately\\n            // Clear any existing selectors to ensure clean state\\n            delete ds.upgradeProposal.diamondCut[i].functionSelectors;\\n            \\n            // Copy each selector individually\\n            for (uint256 j = 0; j < _diamondCut[i].functionSelectors.length; j++) {\\n                ds.upgradeProposal.diamondCut[i].functionSelectors.push(_diamondCut[i].functionSelectors[j]);\\n            }\\n        }\\n        ds.upgradeProposal.initAddress = _init;\\n        ds.upgradeProposal.initCalldata = _calldata;\\n        ds.upgradeProposal.proposalTime = block.timestamp;\\n        ds.upgradeProposal.exists = true;\\n        \\n        emit IDiamondCut.DiamondCutProposed(msg.sender, block.timestamp, block.timestamp + ds.upgradeTimelock);\\n    }\\n    \\n    // Execute a proposed diamond cut after the timelock period\\n    function executeDiamondCut() internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        require(ds.upgradeProposal.exists, \\\"LibDiamond: No upgrade proposal exists\\\");\\n        require(\\n            block.timestamp >= ds.upgradeProposal.proposalTime + ds.upgradeTimelock,\\n            \\\"LibDiamond: Timelock period not elapsed\\\"\\n        );\\n        \\n        // Execute the diamond cut\\n        diamondCut(\\n            ds.upgradeProposal.diamondCut,\\n            ds.upgradeProposal.initAddress,\\n            ds.upgradeProposal.initCalldata\\n        );\\n        \\n        // Reset the proposal\\n        delete ds.upgradeProposal;\\n    }\\n    \\n    // Cancel a proposed diamond cut\\n    function cancelDiamondCut() internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        require(ds.upgradeProposal.exists, \\\"LibDiamond: No upgrade proposal exists\\\");\\n        \\n        // Reset the proposal\\n        delete ds.upgradeProposal;\\n        \\n        emit IDiamondCut.DiamondCutCancelled(msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x2bb59ec15c5218cff473ba4ae9f480fd346c4f91aff5e7a1850e0ad29e51b31b\",\"license\":\"MIT\"},\"contracts/libraries/TradeDealLib.sol\":{\"content\":\" // SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"../identity/IdentityStorage.sol\\\";\\nimport \\\"../interfaces/ICollateral.sol\\\";\\nimport \\\"../interfaces/IInterest.sol\\\";\\nimport \\\"../interfaces/IUSDCPool.sol\\\";\\nimport \\\"../interfaces/IAttribute.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nusing SafeERC20 for IERC20;\\nimport \\\"../interfaces/IERC721Permissioned.sol\\\";\\nimport \\\"../interfaces/IFeeDistributor.sol\\\"; // Added for fee distribution\\nimport \\\"hardhat/console.sol\\\";\\nimport \\\"../libraries/LibDiamond.sol\\\";\\nimport \\\"../libraries/AttributeLib.sol\\\";\\n\\nimport {console} from \\\"hardhat/console.sol\\\";\\n\\nlibrary TradeDealLib {\\n    // These event declarations are temporary until we complete migration\\n    // They'll be removed once we've updated all functions to return event params\\n    // rather than emit events directly\\n    \\n    // Operation mode for trade deals\\n    enum OperationMode {\\n        CENTRALIZED,    // Contract owner manages all fund operations\\n        SELF_SERVICE,   // Borrowers can directly withdraw/repay funds\\n        HYBRID,         // Mixed model with configurable permissions\\n        CUSTOM          // Fine-grained permission configuration\\n    }\\n    \\n    // Roles for the role-based access control system\\n    enum Role {\\n        NONE,        // No special role (default)\\n        ADMIN,       // Full control over the trade deal\\n        LENDER,      // Can deposit funds and receive Collateral tokens\\n        BORROWER,    // Can deposit invoices and withdraw funds (in self-service)\\n        UNDERWRITER, // Can approve/reject deals, modify terms\\n        LIQUIDATOR   // Can liquidate collateral if terms are violated\\n    }\\n    \\n    // Permission bit flags for fine-grained control\\n    uint256 constant PERMISSION_DEPOSIT_FUNDS = 1;\\n    uint256 constant PERMISSION_WITHDRAW_FUNDS = 2;\\n    uint256 constant PERMISSION_DEPOSIT_COLLATERAL = 4;\\n    uint256 constant PERMISSION_WITHDRAW_COLLATERAL = 8;\\n    uint256 constant PERMISSION_DISTRIBUTE_INTEREST = 16;\\n    \\n    event TradeDealCreated(\\n        uint256 indexed tradeDealId,\\n        string name,\\n        string symbol,\\n        uint256 interestRate,\\n        uint256 collateralToInterestRatio,\\n        bool active,\\n        address nftAddress,\\n        address collateralAddress,\\n        address interestAddress,\\n        address usdcAddress\\n    );\\n    // Removed duplicate TradeDealUpdated event definition\\n    event TradeDealActivated(uint256 indexed tradeDealId);\\n    event TradeDealDeactivated(uint256 indexed tradeDealId);\\n    event TradeDealParticipantAdded(uint256 indexed tradeDealId, address indexed participant);\\n    event TradeDealParticipantRemoved(uint256 indexed tradeDealId, address indexed participant);\\n    event InvoiceDepositedToTradeDeal(uint256 indexed tradeDealId, uint256 indexed tokenId);\\n    event InvoiceWithdrawnFromTradeDeal(uint256 indexed tradeDealId, uint256 indexed tokenId);\\n    event USDCDepositedToTradeDeal(uint256 indexed tradeDealId, uint256 amount);\\n    event USDCWithdrawnFromTradeDeal(uint256 indexed tradeDealId, uint256 amount);\\n    event InterestDistributedForTradeDeal(uint256 indexed tradeDealId, uint256 totalInterest, uint256 invoicePoolInterest, uint256 interestInterest, uint256 interestTokensMinted);\\n    event TradeDealRequiredClaimTopicsSet(uint256 indexed tradeDealId, uint256[] claimTopics);\\n    // New events for enhanced functionality\\n    event TradeDealFullyFunded(uint256 indexed tradeDealId, uint256 fundingTarget);\\n    event TradeDealFundingWithdrawn(uint256 indexed tradeDealId, address indexed recipient, uint256 amount);\\n    event TradeDealRepaid(uint256 indexed tradeDealId, address indexed repayer, uint256 amount, bool fullyRepaid);\\n    event CollateralTokensRedeemed(uint256 indexed tradeDealId, address indexed redeemer, uint256 collateralAmount, uint256 usdcAmount);\\n    // Trade Deal data structure\\n    struct TradeDeal {\\n        uint256 id;\\n        string name;\\n        string symbol;           // Symbol for the trade deal, used for Collateral token\\n        uint256 interestRate;\\n        uint256 collateralToInterestRatio;\\n        bool active;\\n        uint256[] requiredClaimTopics; // Claim topics required for participation\\n        address collateralAddress;     // Address of the Collateral token contract for this trade deal\\n        address interestAddress;     // Address of the VABI token contract for this trade deal\\n        address usdcAddress;     // Address of the USDC token contract for this trade deal\\n        OperationMode operationMode; // Operation mode (CENTRALIZED or SELF_SERVICE)\\n    }\\n\\n    struct CollateralRedemptionResult {\\n        uint256 tradeDealId;\\n        address redeemer;\\n        uint256 collateralAmount;\\n        uint256 usdcAmount;\\n    }\\n    \\n    // Extended CollateralleStorage to support trade deals\\n    struct TradeDealStorage {\\n        // Trade deal tracking\\n        mapping(uint256 => TradeDeal) tradeDeals;\\n        uint256[] tradeDealIds;\\n        uint256 nextTradeDealId;\\n        \\n        // Per-trade deal mappings\\n        mapping(uint256 => uint256[]) tradeDealInvoices; // Trade deal ID => array of invoice token IDs\\n        mapping(uint256 => uint256) tradeDealUsdcBalances; // Trade deal ID => USDC balance\\n        mapping(uint256 => mapping(address => bool)) tradeDealParticipants; // Trade deal ID => user address => is participant\\n        mapping(uint256 => uint256[]) tradeDealRequiredClaimTopics; // Trade deal ID => array of required claim topics\\n        \\n        // Role-based access control\\n        mapping(uint256 => mapping(address => Role)) userRoles; // Trade deal ID => user address => role\\n        mapping(uint256 => mapping(address => uint256)) userPermissions; // Trade deal ID => user address => permissions\\n        \\n        // New fields for enhanced functionality\\n        mapping(uint256 => uint256) tradeDealFundingTargets; // Trade deal ID => funding target\\n        mapping(uint256 => bool) tradeDealFundingWithdrawn; // Trade deal ID => whether funding has been withdrawn\\n        mapping(uint256 => uint256) tradeDealRepaidAmounts; // Trade deal ID => amount repaid\\n        mapping(uint256 => uint256) tradeDealTotalDebt; // Trade deal ID => total debt (principal + interest)\\n        \\n        // Track original depositors of invoices\\n        mapping(uint256 => mapping(uint256 => address)) invoiceDepositors; // Trade deal ID => token ID => original depositor\\n    }\\n    \\n    // Return struct for createTradeDeal function\\n    struct CreateTradeDealResult {\\n        uint256 tradeDealId;\\n        string name;\\n        string symbol;\\n        uint256 interestRate;\\n        uint256 collateralToInterestRatio;\\n        bool active;\\n        address nftAddress;\\n        address collateralAddress;\\n        address interestAddress;\\n        address usdcAddress;\\n        bool hasClaimTopics;\\n        uint256[] requiredClaimTopics;\\n        OperationMode operationMode;\\n    }\\n    \\n    // Parameters struct for createTradeDeal function\\n    struct CreateTradeDealParams {\\n        string name;\\n        string symbol;\\n        uint256 interestRate;\\n        uint256 collateralToInterestRatio;\\n        uint256[] requiredClaimTopics;\\n        address collateralAddress;\\n        address interestAddress;\\n        address usdcAddress;\\n        OperationMode operationMode;\\n    }\\n    \\n    // Create a new trade deal\\n    function _createTradeDeal(\\n        CreateTradeDealParams memory params\\n    ) internal returns (CreateTradeDealResult memory) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        uint256 tradeDealId = tds.nextTradeDealId++;\\n        \\n        TradeDeal storage tradeDeal = tds.tradeDeals[tradeDealId];\\n        tradeDeal.id = tradeDealId;\\n        tradeDeal.name = params.name;\\n        tradeDeal.symbol = params.symbol;\\n        tradeDeal.interestRate = params.interestRate;\\n        tradeDeal.collateralToInterestRatio = params.collateralToInterestRatio;\\n        tradeDeal.active = true;\\n        \\n        // Check if we should use the CollateralTokenFactoryFacet to create a new Collateral token\\n        address collateralAddress = params.collateralAddress;\\n        if (collateralAddress == address(0)) {\\n            // Try to create a new Collateral token\\n            collateralAddress = _createOrGetCollateralToken(tradeDealId, params.symbol);\\n        }\\n        \\n        tradeDeal.collateralAddress = collateralAddress;\\n        tradeDeal.interestAddress = params.interestAddress;\\n        tradeDeal.usdcAddress = params.usdcAddress;\\n        tradeDeal.operationMode = params.operationMode;\\n        \\n        // Set required claim topics\\n        bool hasClaimTopics = params.requiredClaimTopics.length > 0;\\n        if (hasClaimTopics) {\\n            uint256 requiredClaimTopicsLength = params.requiredClaimTopics.length;\\n            for (uint256 i = 0; i < requiredClaimTopicsLength; i++) {\\n                tradeDeal.requiredClaimTopics.push(params.requiredClaimTopics[i]);\\n                tds.tradeDealRequiredClaimTopics[tradeDealId].push(params.requiredClaimTopics[i]);\\n            }\\n        }\\n        // Initialize repayment tracking - funding target will be set when an invoice is deposited\\n        tds.tradeDealFundingTargets[tradeDealId] = 0; // Will be set based on NFT totalAmount when invoice is deposited\\n        tds.tradeDealRepaidAmounts[tradeDealId] = 0;\\n        tds.tradeDealTotalDebt[tradeDealId] = 0; // Will be set when fully funded\\n        tds.tradeDealFundingWithdrawn[tradeDealId] = false;\\n        tds.tradeDealFundingWithdrawn[tradeDealId] = false;\\n        \\n        tds.tradeDealIds.push(tradeDealId);\\n        \\n        // Instead of emitting events, return the data needed for the facet to emit events\\n        CreateTradeDealResult memory result;\\n        result.tradeDealId = tradeDealId;\\n        result.name = params.name;\\n        result.symbol = params.symbol;\\n        result.interestRate = params.interestRate;\\n        result.collateralToInterestRatio = params.collateralToInterestRatio;\\n        result.active = true;\\n        result.nftAddress = address(0); // Use address(0) for nftAddress since we're using the Diamond's ERC721PermissionedTokenFacet\\n        result.collateralAddress = collateralAddress;\\n        result.interestAddress = params.interestAddress;\\n        result.usdcAddress = params.usdcAddress;\\n        result.hasClaimTopics = hasClaimTopics;\\n        result.requiredClaimTopics = params.requiredClaimTopics;\\n        result.operationMode = params.operationMode;\\n        \\n        return result;\\n    }\\n    // Return struct for updateTradeDeal function\\n    struct UpdateTradeDealResult {\\n        uint256 tradeDealId;\\n        string name;\\n        string symbol;\\n        uint256 interestRate;\\n        uint256 collateralToInterestRatio;\\n        bool active;\\n        address collateralAddress;\\n        address interestAddress;\\n        address usdcAddress;\\n    }\\n    \\n    // Update an existing trade deal\\n    // Update an existing trade deal\\n    function _updateTradeDeal(\\n        uint256 tradeDealId,\\n        string memory name,\\n        string memory symbol,\\n        uint256 interestRate,\\n        uint256 collateralToInterestRatio,\\n        address collateralAddress,\\n        address interestAddress,\\n        address usdcAddress\\n    ) internal returns (UpdateTradeDealResult memory) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        require(_tradeDealExists(tradeDealId), \\\"Trade deal does not exist\\\");\\n        \\n        TradeDeal storage tradeDeal = tds.tradeDeals[tradeDealId];\\n        tradeDeal.name = name;\\n        tradeDeal.symbol = symbol;\\n        tradeDeal.interestRate = interestRate;\\n        tradeDeal.collateralToInterestRatio = collateralToInterestRatio;\\n        tradeDeal.collateralAddress = collateralAddress;\\n        tradeDeal.interestAddress = interestAddress;\\n        tradeDeal.usdcAddress = usdcAddress;\\n        \\n        // Instead of emitting an event, return the data needed for the facet to emit the event\\n        UpdateTradeDealResult memory result;\\n        result.tradeDealId = tradeDealId;\\n        result.name = name;\\n        result.symbol = symbol;\\n        result.interestRate = interestRate;\\n        result.collateralToInterestRatio = collateralToInterestRatio;\\n        result.active = tradeDeal.active;\\n        result.collateralAddress = collateralAddress;\\n        result.interestAddress = interestAddress;\\n        result.usdcAddress = usdcAddress;\\n        \\n        return result;\\n    }\\n    \\n    // Return struct for activate/deactivate trade deal\\n    struct TradeDealStateChangeResult {\\n        uint256 tradeDealId;\\n    }\\n    \\n    // Activate a trade deal\\n    function _activateTradeDeal(uint256 tradeDealId) internal returns (TradeDealStateChangeResult memory) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        require(_tradeDealExists(tradeDealId), \\\"Trade deal does not exist\\\");\\n        \\n        tds.tradeDeals[tradeDealId].active = true;\\n        \\n        // Return result instead of emitting event\\n        TradeDealStateChangeResult memory result;\\n        result.tradeDealId = tradeDealId;\\n        return result;\\n    }\\n    \\n    // Deactivate a trade deal\\n    function _deactivateTradeDeal(uint256 tradeDealId) internal returns (TradeDealStateChangeResult memory) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        require(_tradeDealExists(tradeDealId), \\\"Trade deal does not exist\\\");\\n        \\n        tds.tradeDeals[tradeDealId].active = false;\\n        \\n        // Return result instead of emitting event\\n        TradeDealStateChangeResult memory result;\\n        result.tradeDealId = tradeDealId;\\n        return result;\\n    }\\n    \\n    // Check if a trade deal exists\\n    function _tradeDealExists(uint256 tradeDealId) internal view returns (bool) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        return tradeDealId < tds.nextTradeDealId && tds.tradeDeals[tradeDealId].id == tradeDealId;\\n    }\\n    \\n    // Get trade deal info\\n    function _getTradeDealInfo(uint256 tradeDealId) internal view returns (TradeDeal memory) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        require(_tradeDealExists(tradeDealId), \\\"Trade deal does not exist\\\");\\n        \\n        return tds.tradeDeals[tradeDealId];\\n    }\\n    \\n    // Get all trade deal IDs\\n    function _getAllTradeDealIds() internal view returns (uint256[] memory) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        return tds.tradeDealIds;\\n    }\\n    \\n    // Return struct for participant management functions\\n    struct TradeDealParticipantResult {\\n        uint256 tradeDealId;\\n        address participant;\\n    }\\n    \\n    // Participant management\\n    function _addTradeDealParticipant(uint256 tradeDealId, address participant) internal returns (TradeDealParticipantResult memory) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        require(_tradeDealExists(tradeDealId), \\\"Trade deal does not exist\\\");\\n        \\n        tds.tradeDealParticipants[tradeDealId][participant] = true;\\n        \\n        // Return result instead of emitting event\\n        TradeDealParticipantResult memory result;\\n        result.tradeDealId = tradeDealId;\\n        result.participant = participant;\\n        return result;\\n    }\\n    \\n    function _removeTradeDealParticipant(uint256 tradeDealId, address participant) internal returns (TradeDealParticipantResult memory) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        require(_tradeDealExists(tradeDealId), \\\"Trade deal does not exist\\\");\\n        \\n        tds.tradeDealParticipants[tradeDealId][participant] = false;\\n        \\n        // Return result instead of emitting event\\n        TradeDealParticipantResult memory result;\\n        result.tradeDealId = tradeDealId;\\n        result.participant = participant;\\n        return result;\\n    }\\n    \\n    function _isTradeDealParticipant(uint256 tradeDealId, address user) internal view returns (bool) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        require(_tradeDealExists(tradeDealId), \\\"Trade deal does not exist\\\");\\n        \\n        // First check if the user is explicitly added as a participant\\n        if (tds.tradeDealParticipants[tradeDealId][user]) {\\n            return true;\\n        }\\n        \\n        // If no required claim topics are set, only explicit participants are allowed\\n        if (tds.tradeDealRequiredClaimTopics[tradeDealId].length == 0) {\\n            return false;\\n        }\\n        \\n        // Check if the user has any of the required claim topics\\n        address identityAddress = ds.identities[user];\\n        if (identityAddress == address(0)) {\\n            return false; // User has no identity\\n        }\\n        \\n        // Get the user's claims\\n        uint256[] storage userClaims = ds.claimList[identityAddress];\\n        \\n        // Check if the user has any of the required claim topics\\n        uint256 requiredClaimTopicsLength = tds.tradeDealRequiredClaimTopics[tradeDealId].length;\\n        for (uint256 i = 0; i < requiredClaimTopicsLength; i++) {\\n            uint256 requiredClaimTopic = tds.tradeDealRequiredClaimTopics[tradeDealId][i];\\n            \\n            for (uint256 j = 0; j < userClaims.length; j++) {\\n                if (userClaims[j] == requiredClaimTopic) {\\n                    return true; // User has a required claim\\n                }\\n            }\\n        }\\n        \\n        return false; // User has no required claims\\n    }\\n    \\n    // Return struct for invoice management functions\\n    struct InvoiceActionResult {\\n        uint256 tradeDealId;\\n        uint256 tokenId;\\n    }\\n    \\n    // Invoice management for trade deals\\n    function _depositInvoiceToTradeDeal(uint256 tradeDealId, uint256 tokenId) internal returns (InvoiceActionResult memory) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        require(_tradeDealExists(tradeDealId), \\\"Trade deal does not exist\\\");\\n        require(tds.tradeDeals[tradeDealId].active, \\\"Trade deal is not active\\\");\\n        \\n        // Use the Diamond's ERC721PermissionedTokenFacet to transfer the NFT\\n        // This bypasses the need for approval\\n        bytes memory emptyData = \\\"\\\";\\n        IERC721Permissioned(address(this)).forcedTransfer(\\n            msg.sender,\\n            address(this),\\n            tokenId,\\n            emptyData\\n        );\\n        \\n        // Track the invoice in this trade deal\\n        tds.tradeDealInvoices[tradeDealId].push(tokenId);\\n        // Record the original depositor of this invoice\\n        tds.invoiceDepositors[tradeDealId][tokenId] = msg.sender;\\n        \\n        // Get the totalAmount from the NFT and set it as the funding target\\n        uint256 totalAmount = _getNFTInvoiceTotalAmount(tokenId);\\n        tds.tradeDealFundingTargets[tradeDealId] += totalAmount;\\n        \\n        // Return result instead of emitting event\\n        InvoiceActionResult memory result;\\n        result.tradeDealId = tradeDealId;\\n        result.tokenId = tokenId;\\n        return result;\\n    }\\n\\n    function _withdrawInvoiceFromTradeDeal(uint256 tradeDealId, uint256 tokenId) internal returns (InvoiceActionResult memory) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        require(_tradeDealExists(tradeDealId), \\\"Trade deal does not exist\\\");\\n        \\n        // Verify that the NFT is owned by this contract\\n        require(IERC721(address(this)).ownerOf(tokenId) == address(this), \\\"NFT not owned by this contract\\\");\\n        \\n        // Check if the caller is the original depositor of this invoice\\n        require(\\n            tds.invoiceDepositors[tradeDealId][tokenId] == msg.sender ||\\n            msg.sender == LibDiamond.contractOwner(),\\n            \\\"Only the original depositor or contract owner can withdraw this invoice\\\"\\n        );\\n        \\n        // Remove the invoice from this trade deal's tracking\\n        uint256[] storage invoices = tds.tradeDealInvoices[tradeDealId];\\n        bool found = false;\\n        uint256 invoicesLength = invoices.length;\\n        for (uint256 i = 0; i < invoicesLength; i++) {\\n            if (invoices[i] == tokenId) {\\n                // Remove by swapping with the last element and popping\\n                invoices[i] = invoices[invoices.length - 1];\\n                invoices.pop();\\n                found = true;\\n                break;\\n            }\\n        }\\n        \\n        require(found, \\\"Invoice not found in this trade deal\\\");\\n\\n        // *** FIX: Decrease funding target when invoice is withdrawn ***\\n        uint256 invoiceAmount = _getNFTInvoiceTotalAmount(tokenId);\\n        if (tds.tradeDealFundingTargets[tradeDealId] >= invoiceAmount) {\\n             tds.tradeDealFundingTargets[tradeDealId] -= invoiceAmount;\\n        } else {\\n            // Avoid underflow if target is somehow already less than amount (shouldn't happen)\\n            tds.tradeDealFundingTargets[tradeDealId] = 0;\\n        }\\n        // *** END FIX ***\\n\\n        // Use forcedTransfer to transfer the NFT back to the sender\\n        // This bypasses the need for approval\\n        bytes memory emptyData = \\\"\\\";\\n        IERC721Permissioned(address(this)).forcedTransfer(\\n            address(this),\\n            msg.sender,\\n            tokenId,\\n            emptyData\\n        );\\n\\n        // Clean up the depositor tracking\\n        delete tds.invoiceDepositors[tradeDealId][tokenId];\\n        \\n        // Return result instead of emitting event\\n        InvoiceActionResult memory result;\\n        result.tradeDealId = tradeDealId;\\n        result.tokenId = tokenId;\\n        return result;\\n    }\\n    \\n    // Return struct for USDC management functions\\n    struct USDCActionResult {\\n        uint256 tradeDealId;\\n        uint256 amount;\\n        bool isFullyFunded;\\n        uint256 fundingTarget;\\n    }\\n    \\n    // USDC management for trade deals\\n    function _depositUSDCToTradeDeal(uint256 tradeDealId, uint256 amount) internal returns (USDCActionResult memory) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        require(_tradeDealExists(tradeDealId), \\\"Trade deal does not exist\\\");\\n        require(tds.tradeDeals[tradeDealId].active, \\\"Trade deal is not active\\\");\\n        require(!tds.tradeDealFundingWithdrawn[tradeDealId], \\\"Funding already withdrawn\\\");\\n        \\n        TradeDeal storage tradeDeal = tds.tradeDeals[tradeDealId];\\n        require(tradeDeal.usdcAddress != address(0), \\\"Trade deal USDC address not set\\\");\\n        \\n        // Get funding target and current balance\\n        uint256 fundingTarget = tds.tradeDealFundingTargets[tradeDealId];\\n        uint256 currentBalance = tds.tradeDealUsdcBalances[tradeDealId];\\n        \\n        // If funding target exists, check that deposit won't exceed it\\n        if (fundingTarget > 0) {\\n            uint256 remainingToFund = fundingTarget > currentBalance ?\\n                fundingTarget - currentBalance : 0;\\n                \\n            require(amount <= remainingToFund, \\\"Amount exceeds remaining funding needed\\\");\\n        }\\n        \\n        // Log the depositor address and amount\\n        address depositor = msg.sender;\\n        \\n        // Use the USDC token's transferFrom method to transfer tokens from the sender to this contract\\n        IERC20(tradeDeal.usdcAddress).safeTransferFrom(depositor, address(this), amount);\\n        \\n        // Track the amount in this trade deal\\n        tds.tradeDealUsdcBalances[tradeDealId] += amount;\\n        \\n        // Explicitly add the depositor as a participant in the trade deal\\n        // This ensures they can receive Collateral tokens\\n        if (!_isTradeDealParticipant(tradeDealId, depositor)) {\\n            _addTradeDealParticipant(tradeDealId, depositor);\\n        }\\n        \\n        // If the trade deal has a Collateral token, mint Collateral tokens to the depositor\\n        if (tradeDeal.collateralAddress != address(0)) {\\n            // Get the Collateral token contract\\n            address collateralToken = tradeDeal.collateralAddress;\\n            \\n            // Force the trade deal to be active during minting\\n            bool wasActive = tradeDeal.active;\\n            tradeDeal.active = true;\\n            \\n            // Try to mint Collateral tokens to the depositor\\n            // We need to make sure the depositor is added as a participant first\\n            // This is done by the _addTradeDealParticipant call above\\n            \\n            // Adjust for the difference in decimals between USDC (6) and Collateral (18)\\n            // Multiply by 10^12 to convert from USDC decimals to Collateral decimals\\n            uint256 adjustedAmount = amount * 1000000000000; // 10^12\\n\\n            // Attempt to mint Collateral tokens; will revert if it fails\\n            ICollateral(collateralToken).mint(depositor, adjustedAmount);\\n            // *** END FIX ***\\n            \\n            // Restore the original active state\\n            tradeDeal.active = wasActive;\\n        }\\n        \\n        // Check if this deposit completes the funding\\n        if (fundingTarget > 0 && currentBalance + amount >= fundingTarget) {\\n            // Calculate total debt including interest\\n            uint256 interest = (fundingTarget * tradeDeal.interestRate) / 10000;\\n            tds.tradeDealTotalDebt[tradeDealId] = fundingTarget + interest;\\n            \\n            // Track if funding was completed for the result\\n        }\\n        \\n        // Return result instead of emitting events\\n        USDCActionResult memory result;\\n        result.tradeDealId = tradeDealId;\\n        result.amount = amount;\\n        result.isFullyFunded = (fundingTarget > 0 && currentBalance + amount >= fundingTarget);\\n        result.fundingTarget = fundingTarget;\\n        return result;\\n    }\\n    \\n    function _withdrawUSDCFromTradeDeal(uint256 tradeDealId, uint256 amount) internal returns (USDCActionResult memory) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        require(_tradeDealExists(tradeDealId), \\\"Trade deal does not exist\\\");\\n        require(tds.tradeDealUsdcBalances[tradeDealId] >= amount, \\\"Insufficient USDC balance in trade deal\\\");\\n        \\n        TradeDeal storage tradeDeal = tds.tradeDeals[tradeDealId];\\n        require(tradeDeal.usdcAddress != address(0), \\\"Trade deal USDC address not set\\\");\\n        \\n        // Use the USDC token's transfer method to transfer tokens from this contract to the sender\\n        require(IERC20(tradeDeal.usdcAddress).transfer(msg.sender, amount), \\\"USDC transfer failed\\\");\\n        \\n        // Update the amount in this trade deal\\n        tds.tradeDealUsdcBalances[tradeDealId] -= amount;\\n        \\n        // Return result instead of emitting event\\n        USDCActionResult memory result;\\n        result.tradeDealId = tradeDealId;\\n        result.amount = amount;\\n        result.isFullyFunded = false; // Not applicable for withdrawal\\n        result.fundingTarget = 0;     // Not applicable for withdrawal\\n        return result;\\n    }\\n    \\n    // Return struct for interest distribution\\n    struct InterestDistributionResult {\\n        uint256 tradeDealId;\\n        uint256 totalInterest;\\n        uint256 invoicePoolInterest;\\n        uint256 interestInterest;\\n        uint256 interestTokensMinted;\\n    }\\n    \\n    // Interest distribution for a specific trade deal\\n    // This function is kept for backward compatibility but is simplified to avoid VABI token complexity\\n    function _distributeInterestForTradeDeal(uint256 tradeDealId) internal view returns (InterestDistributionResult memory) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        require(_tradeDealExists(tradeDealId), \\\"Trade deal does not exist\\\");\\n        require(tds.tradeDeals[tradeDealId].active, \\\"Trade deal is not active\\\");\\n        \\n        // Note: Interest calculation is now handled during funding completion and repayment processes\\n        // This function is maintained for backward compatibility\\n        \\n        // We'll calculate interest but won't do anything with it\\n        TradeDeal storage tradeDeal = tds.tradeDeals[tradeDealId];\\n        uint256 balance = tds.tradeDealUsdcBalances[tradeDealId];\\n        uint256 interest = (balance * tradeDeal.interestRate) / 10000;\\n        \\n        // Return result instead of emitting event\\n        InterestDistributionResult memory result;\\n        result.tradeDealId = tradeDealId;\\n        result.totalInterest = interest;\\n        result.invoicePoolInterest = interest; // All interest goes to the trade deal now\\n        result.interestInterest = 0;               // No VABI interest\\n        result.interestTokensMinted = 0;           // No VABI tokens minted\\n        \\n        return result;\\n    }\\n    \\n    // Get USDC balance for a specific trade deal\\n    function _getUSDCBalanceForTradeDeal(uint256 tradeDealId) internal view returns (uint256) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        require(_tradeDealExists(tradeDealId), \\\"Trade deal does not exist\\\");\\n        \\n        return tds.tradeDealUsdcBalances[tradeDealId];\\n    }\\n    \\n    // Get invoice count for a specific trade deal\\n    function _getInvoiceCountForTradeDeal(uint256 tradeDealId) internal view returns (uint256) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        require(_tradeDealExists(tradeDealId), \\\"Trade deal does not exist\\\");\\n        \\n        return tds.tradeDealInvoices[tradeDealId].length;\\n    }\\n    \\n    // Get invoice token ID for a specific trade deal\\n    function _getInvoiceTokenIdForTradeDeal(uint256 tradeDealId, uint256 index) internal view returns (uint256) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        require(_tradeDealExists(tradeDealId), \\\"Trade deal does not exist\\\");\\n        require(index < tds.tradeDealInvoices[tradeDealId].length, \\\"Index out of bounds\\\");\\n        \\n        return tds.tradeDealInvoices[tradeDealId][index];\\n    }\\n    \\n    // Return struct for setting required claim topics\\n    struct ClaimTopicsResult {\\n        uint256 tradeDealId;\\n        uint256[] claimTopics;\\n    }\\n    \\n    // Set required claim topics for a trade deal\\n    function _setTradeDealRequiredClaimTopics(uint256 tradeDealId, uint256[] memory claimTopics) internal returns (ClaimTopicsResult memory) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        require(_tradeDealExists(tradeDealId), \\\"Trade deal does not exist\\\");\\n        \\n        // Clear existing claim topics\\n        delete tds.tradeDealRequiredClaimTopics[tradeDealId];\\n        delete tds.tradeDeals[tradeDealId].requiredClaimTopics;\\n        \\n        // Set new claim topics\\n        uint256 claimTopicsLength = claimTopics.length;\\n        for (uint256 i = 0; i < claimTopicsLength; i++) {\\n            tds.tradeDealRequiredClaimTopics[tradeDealId].push(claimTopics[i]);\\n            tds.tradeDeals[tradeDealId].requiredClaimTopics.push(claimTopics[i]);\\n        }\\n        \\n        // Return result instead of emitting event\\n        ClaimTopicsResult memory result;\\n        result.tradeDealId = tradeDealId;\\n        result.claimTopics = claimTopics;\\n        return result;\\n    }\\n    \\n    // Get required claim topics for a trade deal\\n    function _getTradeDealRequiredClaimTopics(uint256 tradeDealId) internal view returns (uint256[] memory) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        require(_tradeDealExists(tradeDealId), \\\"Trade deal does not exist\\\");\\n        \\n        return tds.tradeDealRequiredClaimTopics[tradeDealId];\\n    }\\n    \\n    // Check if a trade deal is fully funded\\n    function _isTradeDealFunded(uint256 tradeDealId) internal view returns (bool) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        require(_tradeDealExists(tradeDealId), \\\"Trade deal does not exist\\\");\\n        \\n        uint256 fundingTarget = tds.tradeDealFundingTargets[tradeDealId];\\n        if (fundingTarget == 0) {\\n            return false; // No funding target set\\n        }\\n        \\n        return tds.tradeDealUsdcBalances[tradeDealId] >= fundingTarget;\\n    }\\n    \\n    // Check if a trade deal is fully repaid\\n    function _isTradeDealRepaid(uint256 tradeDealId) internal view returns (bool) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        require(_tradeDealExists(tradeDealId), \\\"Trade deal does not exist\\\");\\n        \\n        uint256 totalDebt = tds.tradeDealTotalDebt[tradeDealId];\\n        if (totalDebt == 0) {\\n            return false; // No debt established yet\\n        }\\n        \\n        return tds.tradeDealRepaidAmounts[tradeDealId] >= totalDebt;\\n    }\\n    \\n    // Return struct for funding withdrawal\\n    struct FundingWithdrawalResult {\\n        uint256 tradeDealId;\\n        address recipient;\\n        uint256 amount;\\n    }\\n    \\n    // Allow fundees to withdraw USDC funding\\n    function _withdrawTradeDealFunding(uint256 tradeDealId, address borrowerAddress) internal returns (FundingWithdrawalResult memory) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        require(_tradeDealExists(tradeDealId), \\\"Trade deal does not exist\\\");\\n        require(tds.tradeDeals[tradeDealId].active, \\\"Trade deal is not active\\\");\\n        require(_isTradeDealFunded(tradeDealId), \\\"Trade deal is not fully funded\\\");\\n        require(!tds.tradeDealFundingWithdrawn[tradeDealId], \\\"Funding already withdrawn\\\");\\n        require(borrowerAddress != address(0), \\\"Borrower address cannot be zero\\\"); // Added check\\n        \\n        // Verify caller has deposited invoices as collateral\\n        uint256[] storage invoices = tds.tradeDealInvoices[tradeDealId];\\n        require(invoices.length > 0, \\\"No invoices deposited as collateral\\\");\\n        \\n        // Get token addresses\\n        TradeDeal storage tradeDeal = tds.tradeDeals[tradeDealId];\\n        address usdcToken = tradeDeal.usdcAddress;\\n        require(usdcToken != address(0), \\\"Trade deal USDC address not set\\\");\\n        \\n        // Get the funding amount\\n        uint256 fundingAmount = tds.tradeDealFundingTargets[tradeDealId];\\n        \\n        // Mark as withdrawn\\n        tds.tradeDealFundingWithdrawn[tradeDealId] = true;\\n        \\n        // Distribute USDC via FeeDistributor: fees to receivers, adjusted principal to borrower\\n        IFeeDistributor feeDistributor = IFeeDistributor(address(this));\\n        (address adjustedReceiver, uint256 adjustedAmount, , ) = feeDistributor.distributeAmounts(borrowerAddress, fundingAmount);\\n        require(adjustedReceiver == borrowerAddress, \\\"FeeDistributor: Adjusted amount sent to wrong receiver\\\");\\n        \\n        // Update USDC balance\\n        tds.tradeDealUsdcBalances[tradeDealId] -= fundingAmount;\\n        \\n        // Return result instead of emitting event\\n        FundingWithdrawalResult memory result;\\n        result.tradeDealId = tradeDealId;\\n        result.recipient = borrowerAddress; // Recipient is the borrower\\n        result.amount = adjustedAmount;    // Amount is the adjusted principal received\\n        return result;\\n    }\\n    \\n    // Return struct for debt repayment\\n    struct RepaymentResult {\\n        uint256 tradeDealId;\\n        address repayer;\\n        uint256 amount;\\n        bool fullyRepaid;\\n    }\\n    \\n    // Allow fundees to repay their debt\\n    function _repayTradeDeal(uint256 tradeDealId, uint256 amount) internal returns (RepaymentResult memory) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        require(_tradeDealExists(tradeDealId), \\\"Trade deal does not exist\\\");\\n        require(tds.tradeDeals[tradeDealId].active, \\\"Trade deal is not active\\\");\\n        require(tds.tradeDealFundingWithdrawn[tradeDealId], \\\"Funding not yet withdrawn\\\");\\n        \\n        // Calculate remaining debt\\n        uint256 totalDebt = tds.tradeDealTotalDebt[tradeDealId];\\n        uint256 repaidSoFar = tds.tradeDealRepaidAmounts[tradeDealId];\\n        uint256 remainingDebt = totalDebt > repaidSoFar ? totalDebt - repaidSoFar : 0;\\n        \\n        require(remainingDebt > 0, \\\"No remaining debt to repay\\\");\\n        require(amount <= remainingDebt, \\\"Amount exceeds remaining debt\\\");\\n        \\n        // Get USDC token\\n        TradeDeal storage tradeDeal = tds.tradeDeals[tradeDealId];\\n        address usdcToken = tradeDeal.usdcAddress;\\n        require(usdcToken != address(0), \\\"Trade deal USDC address not set\\\");\\n        \\n        // Transfer USDC from repayer to contract\\n        IERC20(usdcToken).safeTransferFrom(msg.sender, address(this), amount);\\n        \\n        // Update repaid amount\\n        tds.tradeDealRepaidAmounts[tradeDealId] += amount;\\n        \\n        // Update USDC balance\\n        tds.tradeDealUsdcBalances[tradeDealId] += amount;\\n        \\n        // Check if fully repaid\\n        bool fullyRepaid = (tds.tradeDealRepaidAmounts[tradeDealId] >= totalDebt);\\n        \\n        // Return result instead of emitting event\\n        RepaymentResult memory result;\\n        result.tradeDealId = tradeDealId;\\n        result.repayer = msg.sender;\\n        result.amount = amount;\\n        result.fullyRepaid = fullyRepaid;\\n        return result;\\n    }\\n\\n    function _repayTradeDealForBorrower(uint256 tradeDealId, address borrower, uint256 amount) internal returns (RepaymentResult memory) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        require(_tradeDealExists(tradeDealId), \\\"Trade deal does not exist\\\");\\n        require(tds.tradeDeals[tradeDealId].active, \\\"Trade deal is not active\\\");\\n        require(tds.tradeDealFundingWithdrawn[tradeDealId], \\\"Funding not yet withdrawn\\\");\\n        \\n        // Calculate remaining debt\\n        uint256 totalDebt = tds.tradeDealTotalDebt[tradeDealId];\\n        uint256 repaidSoFar = tds.tradeDealRepaidAmounts[tradeDealId];\\n        uint256 remainingDebt = totalDebt > repaidSoFar ? totalDebt - repaidSoFar : 0;\\n        \\n        require(remainingDebt > 0, \\\"No remaining debt to repay\\\");\\n        require(amount <= remainingDebt, \\\"Amount exceeds remaining debt\\\");\\n        \\n        // Get USDC token\\n        TradeDeal storage tradeDeal = tds.tradeDeals[tradeDealId];\\n        address usdcToken = tradeDeal.usdcAddress;\\n        require(usdcToken != address(0), \\\"Trade deal USDC address not set\\\");\\n        \\n        // Transfer USDC from borrower to contract\\n        IERC20(usdcToken).safeTransferFrom(msg.sender, address(this), amount);\\n        \\n        // Update repaid amount\\n        tds.tradeDealRepaidAmounts[tradeDealId] += amount;\\n        \\n        // Update USDC balance\\n        tds.tradeDealUsdcBalances[tradeDealId] += amount;\\n        \\n        // Check if fully repaid\\n        bool fullyRepaid = (tds.tradeDealRepaidAmounts[tradeDealId] >= totalDebt);\\n\\n        // Return result instead of emitting event\\n        RepaymentResult memory result;\\n        result.tradeDealId = tradeDealId;\\n        result.repayer = borrower;\\n        result.amount = amount;\\n        result.fullyRepaid = fullyRepaid;\\n    \\n        return result;\\n    }\\n    \\n    // Check if a user has a valid Collateral token balance for the trade deal\\n    function _hasCollateralTokenBalance(uint256 tradeDealId, address user, uint256 requiredAmount) internal view returns (bool) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        require(_tradeDealExists(tradeDealId), \\\"Trade deal does not exist\\\");\\n        \\n        TradeDeal storage tradeDeal = tds.tradeDeals[tradeDealId];\\n        address collateralToken = tradeDeal.collateralAddress;\\n        \\n        if (collateralToken == address(0)) return false;\\n        \\n        uint256 collateralBalance = ICollateral(collateralToken).balanceOf(user);\\n        return collateralBalance >= requiredAmount;\\n    }\\n    \\n    // Allow funders to redeem their Collateral tokens\\n    function _redeemCollateralTokens(uint256 tradeDealId, uint256 collateralAmount) internal returns (CollateralRedemptionResult memory) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        require(_tradeDealExists(tradeDealId), \\\"Trade deal does not exist\\\");\\n        require(_isTradeDealRepaid(tradeDealId), \\\"Trade deal not fully repaid\\\");\\n        \\n        // Get token addresses\\n        TradeDeal storage tradeDeal = tds.tradeDeals[tradeDealId];\\n        address collateralToken = tradeDeal.collateralAddress;\\n        address usdcToken = tradeDeal.usdcAddress;\\n        require(collateralToken != address(0), \\\"Collateral token address not set\\\");\\n        require(usdcToken != address(0), \\\"USDC token address not set\\\");\\n        \\n        // Check Collateral balance\\n        uint256 collateralBalance = ICollateral(collateralToken).balanceOf(msg.sender);\\n        require(collateralBalance >= collateralAmount, \\\"Insufficient Collateral balance\\\");\\n        \\n        // Calculate proportional USDC amount\\n        uint256 totalCollateralSupply = ICollateral(collateralToken).totalSupply();\\n        require(totalCollateralSupply > 0, \\\"No Collateral tokens in circulation\\\");\\n        \\n        uint256 usdcBalance = tds.tradeDealUsdcBalances[tradeDealId];\\n        uint256 usdcAmount = (usdcBalance * collateralAmount) / totalCollateralSupply;\\n        \\n        require(usdcAmount > 0, \\\"Calculated USDC amount is zero\\\");\\n        require(usdcBalance >= usdcAmount, \\\"Insufficient USDC balance in trade deal\\\");\\n        \\n        // Burn Collateral tokens\\n        ICollateral(collateralToken).burn(msg.sender, collateralAmount);\\n        \\n        // Transfer USDC to redeemer\\n        require(IERC20(usdcToken).transfer(msg.sender, usdcAmount), \\\"USDC transfer failed\\\");\\n        \\n        // Update USDC balance\\n        tds.tradeDealUsdcBalances[tradeDealId] -= usdcAmount;\\n        \\n        // Return result instead of emitting event\\n        CollateralRedemptionResult memory result;\\n        result.tradeDealId = tradeDealId;\\n        result.redeemer = msg.sender;\\n        result.collateralAmount = collateralAmount;\\n        result.usdcAmount = usdcAmount;\\n        return result;\\n    }\\n    \\n    // Role-based access control functions\\n    \\n    /**\\n     * @notice Set a user's role for a specific trade deal\\n     * @param tradeDealId The ID of the trade deal\\n     * @param user The address of the user\\n     * @param role The role to assign\\n     */\\n    function _setUserRole(uint256 tradeDealId, address user, Role role) internal {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        require(_tradeDealExists(tradeDealId), \\\"Trade deal does not exist\\\");\\n        require(user != address(0), \\\"Invalid user address\\\");\\n        \\n        tds.userRoles[tradeDealId][user] = role;\\n        \\n        // If user is being set as a borrower, also add them as a participant\\n        if (role == Role.BORROWER && !tds.tradeDealParticipants[tradeDealId][user]) {\\n            tds.tradeDealParticipants[tradeDealId][user] = true;\\n        }\\n    }\\n    \\n    /**\\n     * @notice Check if a user has a specific role in a trade deal\\n     * @param tradeDealId The ID of the trade deal\\n     * @param user The address of the user\\n     * @param role The role to check\\n     * @return True if the user has the role, false otherwise\\n     */\\n    function _hasRole(uint256 tradeDealId, address user, Role role) internal view returns (bool) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        if (!_tradeDealExists(tradeDealId)) return false;\\n        if (user == address(0)) return false;\\n        \\n        // Contract owner is always considered to have ADMIN role\\n        if (role == Role.ADMIN && user == LibDiamond.contractOwner()) return true;\\n        \\n        return tds.userRoles[tradeDealId][user] == role;\\n    }\\n    \\n    /**\\n     * @notice Check if a user has a specific permission in a trade deal\\n     * @param tradeDealId The ID of the trade deal\\n     * @param user The address of the user\\n     * @param permission The permission to check\\n     * @return True if the user has the permission, false otherwise\\n     */\\n    function _hasPermission(uint256 tradeDealId, address user, uint256 permission) internal view returns (bool) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        if (!_tradeDealExists(tradeDealId)) return false;\\n        if (user == address(0)) return false;\\n        \\n        // Contract owner always has all permissions\\n        if (user == LibDiamond.contractOwner()) return true;\\n        \\n        TradeDeal storage tradeDeal = tds.tradeDeals[tradeDealId];\\n        \\n        // Check operation mode defaults\\n        if (tradeDeal.operationMode == OperationMode.CENTRALIZED) {\\n            // In centralized mode, only contract owner can withdraw funds\\n            if (permission == PERMISSION_WITHDRAW_FUNDS) {\\n                return user == LibDiamond.contractOwner();\\n            }\\n            \\n            // Anyone can deposit funds or collateral in centralized mode\\n            if (permission == PERMISSION_DEPOSIT_FUNDS || permission == PERMISSION_DEPOSIT_COLLATERAL) {\\n                return true;\\n            }\\n        }\\n        else if (tradeDeal.operationMode == OperationMode.SELF_SERVICE) {\\n            // In self-service mode, borrowers can withdraw funds\\n            if (permission == PERMISSION_WITHDRAW_FUNDS && _hasRole(tradeDealId, user, Role.BORROWER)) {\\n                return true;\\n            }\\n            \\n            // Anyone can deposit funds or collateral in self-service mode\\n            if (permission == PERMISSION_DEPOSIT_FUNDS || permission == PERMISSION_DEPOSIT_COLLATERAL) {\\n                return true;\\n            }\\n        }\\n        \\n        // For HYBRID and CUSTOM modes, check explicit permissions\\n        return (tds.userPermissions[tradeDealId][user] & permission) != 0;\\n    }\\n    \\n    /**\\n     * @notice Extract the totalAmount from an NFT invoice metadata\\n     * @param tokenId The token ID of the NFT invoice\\n     * @return The totalAmount value from the metadata, or 0 if not found\\n     */\\n    function _getNFTInvoiceTotalAmount(uint256 tokenId) internal view returns (uint256) {\\n        // Check if this token exists\\n        require(IERC721(address(this)).ownerOf(tokenId) != address(0), \\\"Token does not exist\\\");\\n        \\n        // Get the totalAmount attribute using AttributeLib\\n        AttributeStorage storage attributeStore = AttributeLib.attributeStorage();\\n        AttributeContract storage attributeContract = attributeStore.attributes;\\n        \\n        // Try to get the \\\"totalAmount\\\" attribute\\n        Attribute memory totalAmountAttr = AttributeLib._getAttribute(\\n            attributeContract,\\n            tokenId,\\n            \\\"totalAmount\\\"\\n        );\\n        \\n        // If the attribute exists and has a value, convert it to uint256\\n        if (bytes(totalAmountAttr.value).length > 0) {\\n            // Convert string to uint256\\n            uint256 amount = _stringToUint(totalAmountAttr.value);\\n            return amount;\\n        }\\n        \\n        // Fallback logic - if totalAmount attribute is not found, check if there's an \\\"amount\\\" attribute\\n        Attribute memory amountAttr = AttributeLib._getAttribute(\\n            attributeContract,\\n            tokenId,\\n            \\\"amount\\\"\\n        );\\n        \\n        if (bytes(amountAttr.value).length > 0) {\\n            uint256 amount = _stringToUint(amountAttr.value);\\n            return amount;\\n        }\\n        \\n        // If no attributes found, return 0\\n        return 0;\\n    }\\n    \\n    /**\\n     * @notice Helper function to convert a string to uint256\\n     * @param s The string to convert\\n     * @return result The converted uint256 value\\n     */\\n    function _stringToUint(string memory s) internal pure returns (uint256 result) {\\n        bytes memory b = bytes(s);\\n        result = 0;\\n        for (uint i = 0; i < b.length; i++) {\\n            uint8 c = uint8(b[i]);\\n            if (c >= 48 && c <= 57) {\\n                result = result * 10 + (c - 48);\\n            }\\n        }\\n        return result;\\n    }\\n    \\n    // Return struct for self-service funding withdrawal\\n    struct SelfServiceWithdrawalResult {\\n        uint256 tradeDealId;\\n        address recipient;\\n        uint256 amount;\\n    }\\n    \\n    /**\\n     * @notice Allow borrowers to withdraw funds in self-service mode\\n     * @param tradeDealId The ID of the trade deal\\n     * @param borrower The address of the borrower\\n     * @return Result struct with withdrawal details\\n     */\\n    function _withdrawTradeDealFundingSelf(uint256 tradeDealId, address borrower) internal returns (FundingWithdrawalResult memory) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        require(_tradeDealExists(tradeDealId), \\\"Trade deal does not exist\\\");\\n        \\n        TradeDeal storage tradeDeal = tds.tradeDeals[tradeDealId];\\n        require(tradeDeal.active, \\\"Trade deal is not active\\\");\\n        require(tradeDeal.operationMode == OperationMode.SELF_SERVICE, \\\"Trade deal is not in self-service mode\\\");\\n        require(_isTradeDealFunded(tradeDealId), \\\"Trade deal is not fully funded\\\");\\n        require(!tds.tradeDealFundingWithdrawn[tradeDealId], \\\"Funding already withdrawn\\\");\\n        \\n        // Check if borrower is a participant and has the BORROWER role\\n        require(_isTradeDealParticipant(tradeDealId, borrower), \\\"Not a participant in this trade deal\\\");\\n        require(_hasRole(tradeDealId, borrower, Role.BORROWER), \\\"Must have borrower role to withdraw funds\\\");\\n        \\n        // Verify the borrower has deposited invoices as collateral\\n        bool hasDepositedInvoice = false;\\n        uint256[] storage invoices = tds.tradeDealInvoices[tradeDealId];\\n        for (uint256 i = 0; i < invoices.length; i++) {\\n            if (tds.invoiceDepositors[tradeDealId][invoices[i]] == borrower) {\\n                hasDepositedInvoice = true;\\n                break;\\n            }\\n        }\\n        require(hasDepositedInvoice, \\\"Borrower has not deposited any invoices\\\");\\n        \\n        // Get token addresses\\n        address usdcToken = tradeDeal.usdcAddress;\\n        require(usdcToken != address(0), \\\"Trade deal USDC address not set\\\");\\n        \\n        // Get the funding amount\\n        uint256 fundingAmount = tds.tradeDealFundingTargets[tradeDealId];\\n        \\n        // Mark as withdrawn\\n        tds.tradeDealFundingWithdrawn[tradeDealId] = true;\\n        \\n        // Distribute USDC via FeeDistributor: fees to receivers, adjusted principal to borrower\\n        IFeeDistributor feeDistributor = IFeeDistributor(address(this));\\n        (address adjustedReceiver, uint256 adjustedAmount, , ) = feeDistributor.distributeAmounts(borrower, fundingAmount);\\n        require(adjustedReceiver == borrower, \\\"FeeDistributor: Adjusted amount sent to wrong receiver\\\");\\n        \\n        // Update USDC balance\\n        tds.tradeDealUsdcBalances[tradeDealId] -= fundingAmount;\\n        \\n        // Return result\\n        FundingWithdrawalResult memory result;\\n        result.tradeDealId = tradeDealId;\\n        result.recipient = borrower;\\n        result.amount = adjustedAmount; // Amount is the adjusted principal received\\n        return result;\\n    }\\n\\n    // Helper function to create or get a Collateral token for a trade deal\\n    function _createOrGetCollateralToken(uint256 tradeDealId, string memory symbol) internal returns (address) {\\n        address collateralAddress = address(0);\\n        \\n        // First try to get the Collateral token address from the CollateralTokenFactoryFacet\\n        (bool checkSuccess, bytes memory checkData) = address(this).staticcall(\\n            abi.encodeWithSignature(\\n                \\\"getCollateralTokenAddress(uint256)\\\",\\n                tradeDealId\\n            )\\n        );\\n        \\n        // If the check was successful and returned a non-zero address, use that\\n        if (checkSuccess && checkData.length > 0) {\\n            address existingCollateralAddress = abi.decode(checkData, (address));\\n            if (existingCollateralAddress != address(0)) {\\n                return existingCollateralAddress;\\n            }\\n        }\\n        \\n        // If we still don't have a Collateral token address, try to create one\\n        string memory tokenName = string(abi.encodePacked(symbol, \\\"-C\\\"));\\n        string memory tokenSymbol = string(abi.encodePacked(symbol, \\\"-C\\\"));\\n\\n        // Call the CollateralTokenFactoryFacet to create a new Collateral token\\n        (bool success, bytes memory data) = address(this).call(\\n            abi.encodeWithSignature(\\n                \\\"createCollateralToken(uint256,string,string,bool)\\\",\\n                tradeDealId,\\n                tokenName,\\n                tokenSymbol,\\n                true // Enable restrictions by default\\n            )\\n        );\\n        \\n        // If the call was successful, use the returned token address\\n        if (success && data.length > 0) {\\n            collateralAddress = abi.decode(data, (address));\\n        }\\n        \\n        // If we still don't have a Collateral token address, try to get it again\\n        if (collateralAddress == address(0)) {\\n            (bool retrySuccess, bytes memory retryData) = address(this).staticcall(\\n                abi.encodeWithSignature(\\n                    \\\"getCollateralTokenAddress(uint256)\\\",\\n                    tradeDealId\\n                )\\n            );\\n            \\n            // If the retry was successful and returned a non-zero address, use that\\n            if (retrySuccess && retryData.length > 0) {\\n                address retryCollateralAddress = abi.decode(retryData, (address));\\n                if (retryCollateralAddress != address(0)) {\\n                    collateralAddress = retryCollateralAddress;\\n                }\\n            }\\n        }\\n        \\n        return collateralAddress;\\n    }\\n}\\n\",\"keccak256\":\"0x4e0c14da1691f4aa47c4b71fb5a6a887bf65dd5f8fdf924cc2f4e84a093a5256\",\"license\":\"MIT\"},\"contracts/upgradeInitializers/DiamondInit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n*\\n* Implementation of a diamond.\\n/******************************************************************************/\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC721Metadata.sol\\\";\\n\\nimport { LibDiamond } from \\\"../libraries/LibDiamond.sol\\\";\\nimport { IDiamondLoupe } from \\\"../interfaces/IDiamondLoupe.sol\\\";\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\nimport { IERC173 } from \\\"../interfaces/IERC173.sol\\\";\\n\\n// It is expected that this contract is customized if you want to deploy your diamond\\n// with data from a deployment script. Use the init function to initialize state variables\\n// of your diamond. Add parameters to the init funciton if you need to.\\n\\ncontract DiamondInit {    \\n\\n    // You can add parameters to this function in order to pass in \\n    // data to set your own state variables\\n    function init() external {        \\n\\n    }\\n\\n}\\n\",\"keccak256\":\"0x61c5408d03a8b99ec18b53efcde99f77b6488e76b625aa6c77fbf8539beed20b\",\"license\":\"MIT\"},\"contracts/utilities/Controllable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\nimport \\\"../interfaces/IControllable.sol\\\";\\r\\n\\r\\n// control me baby\\r\\nabstract contract Controllable is IControllable {\\r\\n    mapping(address => bool) internal _controllers;\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account not in authorized list\\r\\n     */\\r\\n    modifier onlyController() virtual {\\r\\n        require(\\r\\n            _controllers[msg.sender] == true || address(this) == msg.sender,\\r\\n            \\\"caller is not a controller\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add an address allowed to control this contract\\r\\n     */\\r\\n    function addController(address _controller)\\r\\n        external\\r\\n        override\\r\\n        onlyController\\r\\n    {\\r\\n        _addController(_controller);\\r\\n    }\\r\\n    function _addController(address _controller) internal {\\r\\n        _controllers[_controller] = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if this address is a controller\\r\\n     */\\r\\n    function isController(address _address)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (bool allowed)\\r\\n    {\\r\\n        allowed = _isController(_address);\\r\\n    }\\r\\n    function _isController(address _address)\\r\\n        internal view\\r\\n        returns (bool allowed)\\r\\n    {\\r\\n        allowed = _controllers[_address];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Remove the sender address from the list of controllers\\r\\n     */\\r\\n    function relinquishControl() external override onlyController {\\r\\n        _relinquishControl();\\r\\n    }\\r\\n    function _relinquishControl() internal onlyController{\\r\\n        delete _controllers[msg.sender];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x97e48242b2aed589dd5c1ae14e0bf368539d5781278bafe4e8d2a6675d29aed2\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n}\\n\",\"keccak256\":\"0x7434453e6d3b7d0e5d0eb7846ffdbc27f0ccf3b163591263739b628074dc103a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052348015600f57600080fd5b506037336001600160a01b03166000908152602081905260409020805460ff19166001179055565b6138f1806100466000396000f3fe608060405234801561001057600080fd5b50600436106100995760003560e01c806307039ff91461009e5780631d034c6b146100bc578063261a323e146100d157806358a9ba37146100f45780637b5e3a5e1461011f5780639c3516bc14610132578063a7fc7a0714610145578063b429afeb14610158578063e100ce511461016b578063e1c28bef1461018b578063f3821a8714610193575b600080fd5b6100a66101a6565b6040516100b39190610ec0565b60405180910390f35b6100cf6100ca366004611030565b610286565b005b6100e46100df366004611030565b610306565b60405190151581526020016100b3565b6101076101023660046110d0565b610340565b6040516001600160a01b0390911681526020016100b3565b6100cf61012d366004611392565b610499565b610107610140366004611030565b6105d2565b6100cf61015336600461146e565b610612565b6100e461016636600461146e565b610678565b61017e610179366004611030565b610699565b6040516100b391906114cf565b6100cf6107ef565b6100cf6101a1366004611598565b610837565b60606101b061089e565b60010180546040805160208084028201810190925282815292919060009084015b8282101561027d5783829060005260206000200180546101f0906115ff565b80601f016020809104026020016040519081016040528092919081815260200182805461021c906115ff565b80156102695780601f1061023e57610100808354040283529160200191610269565b820191906000526020600020905b81548152906001019060200180831161024c57829003601f168201915b5050505050815260200190600101906101d1565b50505050905090565b3360009081526020819052604090205460ff161515600114806102a857503033145b6102cd5760405162461bcd60e51b81526004016102c490611639565b60405180910390fd5b6102d561089e565b600001600201816040516102e9919061166d565b908152602001604051809103902060006103039190610d2e565b50565b60008061031161089e565b60405161031f90859061166d565b908152604051908190036020019020546001600160a01b0316141592915050565b3360009081526020819052604081205460ff1615156001148061036257503033145b61037e5760405162461bcd60e51b81526004016102c490611639565b600061038861089e565b606088015160405161039a919061166d565b908152604051908190036020019020546001600160a01b0316146103e95760405162461bcd60e51b815260206004820152600660248201526565786973747360d01b60448201526064016102c4565b61042930878787876040518060200161040190610d4f565b601f1982820381018352601f909101166040528861041d61089e565b969594939291906108c2565b9050856060015160405161043d919061166d565b6040518091039020816001600160a01b0316306001600160a01b03167f4f2c5a087f1c980b963a6e3e4265622b6c0d2df4ad839a8394a4e68bdf814a938960405161048891906116e7565b60405180910390a495945050505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff1615906001600160401b03166000811580156104de5750825b90506000826001600160401b031660011480156104fa5750303b155b905081158015610508575080155b156105265760405163f92ee8a960e01b815260040160405180910390fd5b84546001600160401b0319166001178555831561054f57845460ff60401b1916600160401b1785555b61056b8660000151876020015161056461089e565b9190610a4a565b855161057561089e565b600401906105839082611749565b5083156105ca57845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b505050505050565b600061060c3083604051806020016105e990610d4f565b601f1982820381018352601f9091011660405261060461089e565b929190610bba565b92915050565b3360009081526020819052604090205460ff1615156001148061063457503033145b6106505760405162461bcd60e51b81526004016102c490611639565b610303816001600160a01b03166000908152602081905260409020805460ff19166001179055565b6001600160a01b03811660009081526020819052604081205460ff1661060c565b60606106a361089e565b600001600201826040516106b7919061166d565b9081526020016040518091039020805480602002602001604051908101604052809291908181526020016000905b828210156107e45760008481526020908190206040805160608101909152600285810290920180546001600160a01b03811683529193909290840191600160a01b900460ff169081111561073b5761073b611489565b600281111561074c5761074c611489565b8152602001600182018054806020026020016040519081016040528092919081815260200182805480156107cc57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b0319168152602001906004019060208260030104928301926001038202915080841161078e5790505b505050505081525050815260200190600101906106e5565b505050509050919050565b3360009081526020819052604090205460ff1615156001148061081157503033145b61082d5760405162461bcd60e51b81526004016102c490611639565b610835610bfe565b565b3360009081526020819052604090205460ff1615156001148061085957503033145b6108755760405162461bcd60e51b81526004016102c490611639565b8161087e61089e565b6004019061088c9082611749565b5061089a828261056461089e565b5050565b7fc0847719db856b4649f5945ac2d5ad21b3a9b6cc6e5915f5e0d7e81737456def90565b60006108fc60008989606001516040516020016108e0929190611807565b6040516020818303038152906040528051906020012085610c55565b90506001600160a01b0381166109445760405162461bcd60e51b815260206004820152600d60248201526c18dc99585d1957d9985a5b1959609a1b60448201526064016102c4565b606087015160405182918b9161095a919061166d565b9081526040516020918190038201902080546001600160a01b0319166001600160a01b039390931692909217909155606088015160018b810180549182018155600090815292909220909101906109b19082611749565b50806001600160a01b031663cde7b2c133898c600001600201866040516109d8919061166d565b9081526040519081900360200181206001600160e01b031960e086901b168252610a0c9392918c908c908c90600401611865565b600060405180830381600087803b158015610a2657600080fd5b505af1158015610a3a573d6000803e3d6000fd5b5050505098975050505050505050565b805160005b81811015610b25576040516002860190610a6a90869061166d565b9081526020016040518091039020838281518110610a8a57610a8a611b9a565b60209081029190910181015182546001810184556000938452928290208151600294850290910180546001600160a01b039092166001600160a01b0319831681178255938301519294909384926001600160a81b0319161790600160a01b908490811115610afa57610afa611489565b021790555060408201518051610b1a916001840191602090910190610d5c565b505050600101610a4f565b506003840154600090815b81811015610b8a578551602087012060038801805483908110610b5557610b55611b9a565b90600052602060002001604051610b6c9190611bb0565b604051809103902003610b825760019250610b8a565b600101610b30565b50816105ca576003860180546001810182556000918252602090912001610bb18682611749565b50505050505050565b6000610bf58484604051602001610bd2929190611807565b604051602081830303815290604052805190602001208380519060200120610cf3565b95945050505050565b3360009081526020819052604090205460ff16151560011480610c2057503033145b610c3c5760405162461bcd60e51b81526004016102c490611639565b336000908152602081905260409020805460ff19169055565b600083471015610c815760405163cf47918160e01b8152476004820152602481018590526044016102c4565b8151600003610ca357604051631328927760e21b815260040160405180910390fd5b8282516020840186f590503d151981151615610cc5576040513d6000823e3d81fd5b6001600160a01b038116610cec5760405163b06ebf3d60e01b815260040160405180910390fd5b9392505050565b6000610cec8383306000604051836040820152846020820152828152600b8101905060ff8153605590206001600160a01b0316949350505050565b50805460008255600202906000526020600020908101906103039190610e08565b611c9680611c2683390190565b82805482825590600052602060002090600701600890048101928215610df85791602002820160005b83821115610dc657835183826101000a81548163ffffffff021916908360e01c02179055509260200192600401602081600301049283019260010302610d85565b8015610df65782816101000a81549063ffffffff0219169055600401602081600301049283019260010302610dc6565b505b50610e04929150610e36565b5090565b80821115610e045780546001600160a81b03191681556000610e2d6001830182610e4b565b50600201610e08565b5b80821115610e045760008155600101610e37565b5080546000825560070160089004906000526020600020908101906103039190610e36565b60005b83811015610e8b578181015183820152602001610e73565b50506000910152565b60008151808452610eac816020860160208601610e70565b601f01601f19169290920160200192915050565b6000602082016020835280845180835260408501915060408160051b86010192506020860160005b82811015610f1957603f19878603018452610f04858351610e94565b94506020938401939190910190600101610ee8565b50929695505050505050565b634e487b7160e01b600052604160045260246000fd5b60405160a081016001600160401b0381118282101715610f5d57610f5d610f25565b60405290565b604051606081016001600160401b0381118282101715610f5d57610f5d610f25565b604051601f8201601f191681016001600160401b0381118282101715610fad57610fad610f25565b604052919050565b6000806001600160401b03841115610fcf57610fcf610f25565b50601f8301601f1916602001610fe481610f85565b915050828152838383011115610ff957600080fd5b828260208301376000602084830101529392505050565b600082601f83011261102157600080fd5b610cec83833560208501610fb5565b60006020828403121561104257600080fd5b81356001600160401b0381111561105857600080fd5b61106484828501611010565b949350505050565b80356001600160a01b038116811461108357600080fd5b919050565b60008083601f84011261109a57600080fd5b5081356001600160401b038111156110b157600080fd5b6020830191508360208285010111156110c957600080fd5b9250929050565b6000806000806000608086880312156110e857600080fd5b85356001600160401b038111156110fe57600080fd5b860160a0818903121561111057600080fd5b611118610f3b565b6111218261106c565b815261112f6020830161106c565b60208201526111406040830161106c565b604082015260608201356001600160401b0381111561115e57600080fd5b61116a8a828501611010565b60608301525060808201356001600160401b0381111561118957600080fd5b6111958a828501611010565b60808301525095506111ab90506020870161106c565b935060408601356001600160401b038111156111c657600080fd5b6111d288828901611088565b90945092505060608601356001600160401b038111156111f157600080fd5b6111fd88828901611010565b9150509295509295909350565b60006001600160401b0382111561122357611223610f25565b5060051b60200190565b600082601f83011261123e57600080fd5b813561125161124c8261120a565b610f85565b8082825260208201915060208360051b86010192508583111561127357600080fd5b602085015b838110156113885780356001600160401b0381111561129657600080fd5b86016060818903601f190112156112ac57600080fd5b6112b4610f63565b6112c06020830161106c565b81526040820135600381106112d457600080fd5b602082015260608201356001600160401b038111156112f257600080fd5b60208184010192505088601f83011261130a57600080fd5b813561131861124c8261120a565b8082825260208201915060208360051b86010192508b83111561133a57600080fd5b6020850194505b828510156113725784356001600160e01b03198116811461136157600080fd5b825260209485019490910190611341565b6040840152505084525060209283019201611278565b5095945050505050565b6000602082840312156113a457600080fd5b81356001600160401b038111156113ba57600080fd5b8201606081850312156113cc57600080fd5b6113d4610f63565b81356001600160401b038111156113ea57600080fd5b6113f686828501611010565b82525060208201356001600160401b0381111561141257600080fd5b61141e8682850161122d565b60208301525060408201356001600160401b0381111561143d57600080fd5b80830192505084601f83011261145257600080fd5b61146185833560208501610fb5565b6040820152949350505050565b60006020828403121561148057600080fd5b610cec8261106c565b634e487b7160e01b600052602160045260246000fd5b600381106114bd57634e487b7160e01b600052602160045260246000fd5b9052565b6001600160e01b0319169052565b6000602082016020835280845180835260408501915060408160051b86010192506020860160005b82811015610f1957868503603f19018452815180516001600160a01b03168652602080820151606088019161152e9089018261149f565b506040820151915060606040880152808251808352608089019150602084019350600092505b808310156115805783516001600160e01b03191682526020938401936001939093019290910190611554565b509650505060209384019391909101906001016114f7565b600080604083850312156115ab57600080fd5b82356001600160401b038111156115c157600080fd5b6115cd85828601611010565b92505060208301356001600160401b038111156115e957600080fd5b6115f58582860161122d565b9150509250929050565b600181811c9082168061161357607f821691505b60208210810361163357634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252601a908201527931b0b63632b91034b9903737ba10309031b7b73a3937b63632b960311b604082015260600190565b6000825161167f818460208701610e70565b9190910192915050565b80516001600160a01b0390811683526020808301518216908401526040808301519091169083015260608082015160a09184018290526000916116ce90850182610e94565b905060808301518482036080860152610bf58282610e94565b602081526000610cec6020830184611689565b601f82111561174457806000526020600020601f840160051c810160208510156117215750805b601f840160051c820191505b81811015611741576000815560010161172d565b50505b505050565b81516001600160401b0381111561176257611762610f25565b6117768161177084546115ff565b846116fa565b6020601f8211600181146117aa57600083156117925750848201515b600019600385901b1c1916600184901b178455611741565b600084815260208120601f198516915b828110156117da57878501518255602094850194600190920191016117ba565b50848210156117f85786840151600019600387901b60f8161c191681555b50505050600190811b01905550565b606083901b6001600160601b0319168152815160009061182e816014850160208701610e70565b919091016014019392505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b038716815260a06020820181905260009061188990830188611689565b828103604084015280875480835260208301915060208160051b84010189600052602060002060005b83811015611b6657858303601f1901855281546001600160a01b038116845260608401906118ea6020860160a083901c60ff1661149f565b5060606040850152600183018054808352600091825260208083209301905b806007840110156119f5578354611923838260e01b6114c1565b61193e6020840160c083901b6001600160e01b0319166114c1565b6119596040840160a083901b6001600160e01b0319166114c1565b61197460608401608083901b6001600160e01b0319166114c1565b61198f60808401606083901b6001600160e01b0319166114c1565b6119aa60a08401604083901b6001600160e01b0319166114c1565b6119c560c08401602083901b6001600160e01b0319166114c1565b6119dc60e084016001600160e01b031983166114c1565b5061010082019150600184019350600883019250611909565b92549280831015611a1a57611a0d828560e01b6114c1565b6020820191506001830192505b80831015611a4757611a3a8260c086901b6001600160e01b0319166114c1565b6020820191506001830192505b80831015611a7457611a678260a086901b6001600160e01b0319166114c1565b6020820191506001830192505b80831015611aa157611a9482608086901b6001600160e01b0319166114c1565b6020820191506001830192505b80831015611ace57611ac182606086901b6001600160e01b0319166114c1565b6020820191506001830192505b80831015611afb57611aee82604086901b6001600160e01b0319166114c1565b6020820191506001830192505b80831015611b2857611b1b82602086901b6001600160e01b0319166114c1565b6020820191506001830192505b80831015611b4b57611b44826001600160e01b031986166114c1565b6020820191505b506020979097019694505050600291909101906001016118b2565b50506001600160a01b03891660608701528581036080870152611b8a81888a61183c565b9c9b505050505050505050505050565b634e487b7160e01b600052603260045260246000fd5b6000808354611bbe816115ff565b600182168015611bd55760018114611bea57611c1a565b60ff1983168652811515820286019350611c1a565b86600052602060002060005b83811015611c1257815488820152600190910190602001611bf6565b505081860193505b50919594505050505056fe6080604052348015600f57600080fd5b50611c778061001f6000396000f3fe6080604052600436106100435760003560e01c80636a60c3b7146100f75780638da5cb5b14610122578063cde7b2c114610137578063f2fde38b146101575761004a565b3661004a57005b600080356001600160e01b0319168152600080516020611bd6833981519152602081905260409091205481906001600160a01b0316806100d15760405162461bcd60e51b815260206004820181905260248201527f4469616d6f6e643a2046756e6374696f6e20646f6573206e6f7420657869737460448201526064015b60405180910390fd5b3660008037600080366000845af43d6000803e8080156100f0573d6000f35b3d6000fd5b005b34801561010357600080fd5b50305b6040516001600160a01b03909116815260200160405180910390f35b34801561012e57600080fd5b50610106610177565b34801561014357600080fd5b506100f5610152366004611668565b610186565b34801561016357600080fd5b506100f56101723660046117b2565b6104b9565b60006101816104cd565b905090565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff1615906001600160401b03166000811580156101cb5750825b90506000826001600160401b031660011480156101e75750303b155b9050811580156101f5575080155b156102135760405163f92ee8a960e01b815260040160405180910390fd5b84546001600160401b0319166001178555831561023c57845460ff60401b1916600160401b1785555b60016102466104e9565b6301ffc9a760e01b600090815260039190910160205260409020805460ff191691151591909117905560016102796104e9565b631c5596d560e11b600090815260039190910160205260409020805460ff191691151591909117905560016102ac6104e9565b6307f5828d60e41b600090815260039190910160205260409020805460ff191691151591909117905560016102df6104e9565b6380ac58cd60e01b600090815260039190910160205260409020805460ff191691151591909117905560016103126104e9565b635b5e139f60e01b600090815260039190910160205260409020805460ff191691151591909117905560016103456104e9565b63780e9d6360e01b60009081526003919091016020908152604091829020805460ff1916931515939093179092558051601f89018390048302810183019091528781526103b0918b918b918b908b90819084018382808284376000920191909152506104fb92505050565b6103b98b610702565b8a6103c2610762565b80546001600160a01b0319166001600160a01b039290921691909117905560608a01516103ed610762565b60408051651cde5b589bdb60d21b81526005929092016006830152519081900360260190209061041d9082611855565b50896080015161042b610762565b60408051636e616d6560e01b8152600592909201600483015251908190036024019020906104599082611855565b506104666202a300610786565b83156104ac57845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b5050505050505050505050565b6104c1610813565b6104ca81610702565b50565b60006104d76104e9565b600401546001600160a01b0316919050565b600080516020611bd683398151915290565b60005b83518110156106b757600084828151811061051b5761051b611913565b60200260200101516020015190506000600281111561053c5761053c611929565b81600281111561054e5761054e611929565b0361059c5761059785838151811061056857610568611913565b60200260200101516000015186848151811061058657610586611913565b602002602001015160400151610883565b6106ae565b60018160028111156105b0576105b0611929565b036105f9576105978583815181106105ca576105ca611913565b6020026020010151600001518684815181106105e8576105e8611913565b6020026020010151604001516109f8565b600281600281111561060d5761060d611929565b036106565761059785838151811061062757610627611913565b60200260200101516000015186848151811061064557610645611913565b602002602001015160400151610b79565b60405162461bcd60e51b815260206004820152602760248201527f4c69624469616d6f6e644375743a20496e636f727265637420466163657443756044820152663a20b1ba34b7b760c91b60648201526084016100c8565b506001016104fe565b507f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb6738383836040516106eb9392919061198f565b60405180910390a16106fd8282610c89565b505050565b600061070c6104e9565b6004810180546001600160a01b038581166001600160a01b031983168117909355604051939450169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b7f3b28ada7424160f36dba04e603ff68d11ac4a3eeb1ef7a9911d79d949607b74090565b60006107906104e9565b905080600501546000146107f75760405162461bcd60e51b815260206004820152602860248201527f4c69624469616d6f6e643a2054696d656c6f636b20616c726561647920696e696044820152671d1a585b1a5e995960c21b60648201526084016100c8565b60008211610808576202a30061080a565b815b60059091015550565b61081b6104e9565b600401546001600160a01b031633146108815760405162461bcd60e51b815260206004820152602260248201527f4c69624469616d6f6e643a204d75737420626520636f6e7472616374206f776e60448201526132b960f11b60648201526084016100c8565b565b60008151116108a45760405162461bcd60e51b81526004016100c890611a9e565b60006108ae6104e9565b90506001600160a01b0383166108d65760405162461bcd60e51b81526004016100c890611ae9565b6001600160a01b0383166000908152600182016020526040812054906001600160601b038216900361090c5761090c8285610e95565b60005b83518110156109f157600084828151811061092c5761092c611913565b6020908102919091018101516001600160e01b031981166000908152918690526040909120549091506001600160a01b031680156109ca5760405162461bcd60e51b815260206004820152603560248201527f4c69624469616d6f6e644375743a2043616e2774206164642066756e6374696f6044820152746e207468617420616c72656164792065786973747360581b60648201526084016100c8565b6109d68583868a610eff565b836109e081611b4b565b9450506001909201915061090f9050565b5050505050565b6000815111610a195760405162461bcd60e51b81526004016100c890611a9e565b6000610a236104e9565b90506001600160a01b038316610a4b5760405162461bcd60e51b81526004016100c890611ae9565b6001600160a01b0383166000908152600182016020526040812054906001600160601b0382169003610a8157610a818285610e95565b60005b83518110156109f1576000848281518110610aa157610aa1611913565b6020908102919091018101516001600160e01b031981166000908152918690526040909120549091506001600160a01b039081169087168103610b475760405162461bcd60e51b815260206004820152603860248201527f4c69624469616d6f6e644375743a2043616e2774207265706c6163652066756e60448201527731ba34b7b7103bb4ba341039b0b6b290333ab731ba34b7b760411b60648201526084016100c8565b610b52858284610f9f565b610b5e8583868a610eff565b83610b6881611b4b565b94505060019092019150610a849050565b6000815111610b9a5760405162461bcd60e51b81526004016100c890611a9e565b6000610ba46104e9565b90506001600160a01b03831615610c1c5760405162461bcd60e51b815260206004820152603660248201527f4c69624469616d6f6e644375743a2052656d6f76652066616365742061646472604482015275657373206d757374206265206164647265737328302960501b60648201526084016100c8565b60005b8251811015610c83576000838281518110610c3c57610c3c611913565b6020908102919091018101516001600160e01b031981166000908152918590526040909120549091506001600160a01b0316610c79848284610f9f565b5050600101610c1f565b50505050565b6001600160a01b038216610d0f57805115610d0b5760405162461bcd60e51b815260206004820152603c60248201527f4c69624469616d6f6e644375743a205f696e697420697320616464726573732860448201527b3029206275745f63616c6c64617461206973206e6f7420656d70747960201b60648201526084016100c8565b5050565b6000815111610d865760405162461bcd60e51b815260206004820152603d60248201527f4c69624469616d6f6e644375743a205f63616c6c6461746120697320656d707460448201527f7920627574205f696e6974206973206e6f74206164647265737328302900000060648201526084016100c8565b6001600160a01b0382163014610db857610db882604051806060016040528060288152602001611bf66028913961135c565b600080836001600160a01b031683604051610dd39190611b77565b600060405180830381855af49150503d8060008114610e0e576040519150601f19603f3d011682016040523d82523d6000602084013e610e13565b606091505b509150915081610c8357805115610e3e578060405162461bcd60e51b81526004016100c89190611b93565b60405162461bcd60e51b815260206004820152602660248201527f4c69624469616d6f6e644375743a205f696e69742066756e6374696f6e2072656044820152651d995c9d195960d21b60648201526084016100c8565b610eb781604051806060016040528060248152602001611c1e6024913961135c565b6002820180546001600160a01b0390921660008181526001948501602090815260408220860185905594840183559182529290200180546001600160a01b0319169091179055565b6001600160e01b0319831660008181526020868152604080832080546001600160601b03909716600160a01b026001600160a01b0397881617815594909516808352600180890183529583208054968701815583528183206008870401805460e09890981c60046007909816979097026101000a96870263ffffffff9097021990971695909517909555529290915281546001600160a01b031916179055565b6001600160a01b0382166110155760405162461bcd60e51b815260206004820152603760248201527f4c69624469616d6f6e644375743a2043616e27742072656d6f76652066756e636044820152761d1a5bdb881d1a185d08191bd95cdb89dd08195e1a5cdd604a1b60648201526084016100c8565b306001600160a01b038316036110845760405162461bcd60e51b815260206004820152602e60248201527f4c69624469616d6f6e644375743a2043616e27742072656d6f766520696d6d7560448201526d3a30b1363290333ab731ba34b7b760911b60648201526084016100c8565b6001600160e01b03198116600090815260208481526040808320546001600160a01b0386168452600180880190935290832054600160a01b9091046001600160601b031692916110d391611ba6565b90508082146111c5576001600160a01b0384166000908152600186016020526040812080548390811061110857611108611913565b600091825260208083206008830401546001600160a01b038916845260018a019091526040909220805460079092166004026101000a90920460e01b92508291908590811061115957611159611913565b600091825260208083206008830401805463ffffffff60079094166004026101000a938402191660e09590951c929092029390931790556001600160e01b03199290921682528690526040902080546001600160a01b0316600160a01b6001600160601b038516021790555b6001600160a01b038416600090815260018601602052604090208054806111ee576111ee611bbf565b60008281526020808220600860001990940193840401805463ffffffff600460078716026101000a0219169055919092556001600160e01b031985168252869052604081208190558190036109f157600285015460009061125190600190611ba6565b6001600160a01b038616600090815260018089016020526040909120015490915080821461130057600087600201838154811061129057611290611913565b6000918252602090912001546002890180546001600160a01b0390921692508291849081106112c1576112c1611913565b600091825260208083209190910180546001600160a01b0319166001600160a01b03948516179055929091168152600189810190925260409020018190555b8660020180548061131357611313611bbf565b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b0388168252600189810190915260408220015550505050505050565b813b8181610c835760405162461bcd60e51b81526004016100c89190611b93565b80356001600160a01b038116811461139457600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b03811182821017156113d1576113d1611399565b60405290565b60405160a081016001600160401b03811182821017156113d1576113d1611399565b604051601f8201601f191681016001600160401b038111828210171561142157611421611399565b604052919050565b600082601f83011261143a57600080fd5b81356001600160401b0381111561145357611453611399565b611466601f8201601f19166020016113f9565b81815284602083860101111561147b57600080fd5b816020850160208301376000918101602001919091529392505050565b60006001600160401b038211156114b1576114b1611399565b5060051b60200190565b600082601f8301126114cc57600080fd5b81356114df6114da82611498565b6113f9565b8082825260208201915060208360051b86010192508583111561150157600080fd5b602085015b838110156116165780356001600160401b0381111561152457600080fd5b86016060818903601f1901121561153a57600080fd5b6115426113af565b61154e6020830161137d565b815260408201356003811061156257600080fd5b602082015260608201356001600160401b0381111561158057600080fd5b60208184010192505088601f83011261159857600080fd5b81356115a66114da82611498565b8082825260208201915060208360051b86010192508b8311156115c857600080fd5b6020850194505b828510156116005784356001600160e01b0319811681146115ef57600080fd5b8252602094850194909101906115cf565b6040840152505084525060209283019201611506565b5095945050505050565b60008083601f84011261163257600080fd5b5081356001600160401b0381111561164957600080fd5b60208301915083602082850101111561166157600080fd5b9250929050565b60008060008060008060a0878903121561168157600080fd5b61168a8761137d565b955060208701356001600160401b038111156116a557600080fd5b870160a0818a0312156116b757600080fd5b6116bf6113d7565b6116c88261137d565b81526116d66020830161137d565b60208201526116e76040830161137d565b604082015260608201356001600160401b0381111561170557600080fd5b6117118b828501611429565b60608301525060808201356001600160401b0381111561173057600080fd5b61173c8b828501611429565b60808301525095505060408701356001600160401b0381111561175e57600080fd5b61176a89828a016114bb565b9450506117796060880161137d565b925060808701356001600160401b0381111561179457600080fd5b6117a089828a01611620565b979a9699509497509295939492505050565b6000602082840312156117c457600080fd5b6117cd8261137d565b9392505050565b600181811c908216806117e857607f821691505b60208210810361180857634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156106fd57806000526020600020601f840160051c810160208510156118355750805b601f840160051c820191505b818110156109f15760008155600101611841565b81516001600160401b0381111561186e5761186e611399565b6118828161187c84546117d4565b8461180e565b6020601f8211600181146118b6576000831561189e5750848201515b600019600385901b1c1916600184901b1784556109f1565b600084815260208120601f198516915b828110156118e657878501518255602094850194600190920191016118c6565b50848210156119045786840151600019600387901b60f8161c191681555b50505050600190811b01905550565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b60005b8381101561195a578181015183820152602001611942565b50506000910152565b6000815180845261197b81602086016020860161193f565b601f01601f19169290920160200192915050565b6000606082016060835280865180835260808501915060808160051b86010192506020880160005b82811015611a6f57868503607f19018452815180516001600160a01b0316865260208101516060870190600381106119ff57634e487b7160e01b600052602160045260246000fd5b806020890152506040820151915060606040880152808251808352608089019150602084019350600092505b80831015611a575783516001600160e01b03191682526020938401936001939093019290910190611a2b565b509650505060209384019391909101906001016119b7565b5050506001600160a01b0386166020850152508281036040840152611a948185611963565b9695505050505050565b6020808252602b908201527f4c69624469616d6f6e644375743a204e6f2073656c6563746f727320696e206660408201526a1858d95d081d1bc818dd5d60aa1b606082015260800190565b6020808252602c908201527f4c69624469616d6f6e644375743a204164642066616365742063616e2774206260408201526b65206164647265737328302960a01b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b60006001600160601b0382166002600160601b03198101611b6e57611b6e611b35565b60010192915050565b60008251611b8981846020870161193f565b9190910192915050565b6020815260006117cd6020830184611963565b81810381811115611bb957611bb9611b35565b92915050565b634e487b7160e01b600052603160045260246000fdfec8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c4c69624469616d6f6e644375743a205f696e6974206164647265737320686173206e6f20636f64654c69624469616d6f6e644375743a204e657720666163657420686173206e6f20636f6465a264697066735822122033e829527f8795379ee5bfafaf4e6e85c30d7f7251e3bf1db7718016342f585b64736f6c634300081c0033a2646970667358221220798320c43026247f145ea2ed2e00c32b1ca337e6081761395e2245afee28778b64736f6c634300081c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100995760003560e01c806307039ff91461009e5780631d034c6b146100bc578063261a323e146100d157806358a9ba37146100f45780637b5e3a5e1461011f5780639c3516bc14610132578063a7fc7a0714610145578063b429afeb14610158578063e100ce511461016b578063e1c28bef1461018b578063f3821a8714610193575b600080fd5b6100a66101a6565b6040516100b39190610ec0565b60405180910390f35b6100cf6100ca366004611030565b610286565b005b6100e46100df366004611030565b610306565b60405190151581526020016100b3565b6101076101023660046110d0565b610340565b6040516001600160a01b0390911681526020016100b3565b6100cf61012d366004611392565b610499565b610107610140366004611030565b6105d2565b6100cf61015336600461146e565b610612565b6100e461016636600461146e565b610678565b61017e610179366004611030565b610699565b6040516100b391906114cf565b6100cf6107ef565b6100cf6101a1366004611598565b610837565b60606101b061089e565b60010180546040805160208084028201810190925282815292919060009084015b8282101561027d5783829060005260206000200180546101f0906115ff565b80601f016020809104026020016040519081016040528092919081815260200182805461021c906115ff565b80156102695780601f1061023e57610100808354040283529160200191610269565b820191906000526020600020905b81548152906001019060200180831161024c57829003601f168201915b5050505050815260200190600101906101d1565b50505050905090565b3360009081526020819052604090205460ff161515600114806102a857503033145b6102cd5760405162461bcd60e51b81526004016102c490611639565b60405180910390fd5b6102d561089e565b600001600201816040516102e9919061166d565b908152602001604051809103902060006103039190610d2e565b50565b60008061031161089e565b60405161031f90859061166d565b908152604051908190036020019020546001600160a01b0316141592915050565b3360009081526020819052604081205460ff1615156001148061036257503033145b61037e5760405162461bcd60e51b81526004016102c490611639565b600061038861089e565b606088015160405161039a919061166d565b908152604051908190036020019020546001600160a01b0316146103e95760405162461bcd60e51b815260206004820152600660248201526565786973747360d01b60448201526064016102c4565b61042930878787876040518060200161040190610d4f565b601f1982820381018352601f909101166040528861041d61089e565b969594939291906108c2565b9050856060015160405161043d919061166d565b6040518091039020816001600160a01b0316306001600160a01b03167f4f2c5a087f1c980b963a6e3e4265622b6c0d2df4ad839a8394a4e68bdf814a938960405161048891906116e7565b60405180910390a495945050505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff1615906001600160401b03166000811580156104de5750825b90506000826001600160401b031660011480156104fa5750303b155b905081158015610508575080155b156105265760405163f92ee8a960e01b815260040160405180910390fd5b84546001600160401b0319166001178555831561054f57845460ff60401b1916600160401b1785555b61056b8660000151876020015161056461089e565b9190610a4a565b855161057561089e565b600401906105839082611749565b5083156105ca57845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b505050505050565b600061060c3083604051806020016105e990610d4f565b601f1982820381018352601f9091011660405261060461089e565b929190610bba565b92915050565b3360009081526020819052604090205460ff1615156001148061063457503033145b6106505760405162461bcd60e51b81526004016102c490611639565b610303816001600160a01b03166000908152602081905260409020805460ff19166001179055565b6001600160a01b03811660009081526020819052604081205460ff1661060c565b60606106a361089e565b600001600201826040516106b7919061166d565b9081526020016040518091039020805480602002602001604051908101604052809291908181526020016000905b828210156107e45760008481526020908190206040805160608101909152600285810290920180546001600160a01b03811683529193909290840191600160a01b900460ff169081111561073b5761073b611489565b600281111561074c5761074c611489565b8152602001600182018054806020026020016040519081016040528092919081815260200182805480156107cc57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b0319168152602001906004019060208260030104928301926001038202915080841161078e5790505b505050505081525050815260200190600101906106e5565b505050509050919050565b3360009081526020819052604090205460ff1615156001148061081157503033145b61082d5760405162461bcd60e51b81526004016102c490611639565b610835610bfe565b565b3360009081526020819052604090205460ff1615156001148061085957503033145b6108755760405162461bcd60e51b81526004016102c490611639565b8161087e61089e565b6004019061088c9082611749565b5061089a828261056461089e565b5050565b7fc0847719db856b4649f5945ac2d5ad21b3a9b6cc6e5915f5e0d7e81737456def90565b60006108fc60008989606001516040516020016108e0929190611807565b6040516020818303038152906040528051906020012085610c55565b90506001600160a01b0381166109445760405162461bcd60e51b815260206004820152600d60248201526c18dc99585d1957d9985a5b1959609a1b60448201526064016102c4565b606087015160405182918b9161095a919061166d565b9081526040516020918190038201902080546001600160a01b0319166001600160a01b039390931692909217909155606088015160018b810180549182018155600090815292909220909101906109b19082611749565b50806001600160a01b031663cde7b2c133898c600001600201866040516109d8919061166d565b9081526040519081900360200181206001600160e01b031960e086901b168252610a0c9392918c908c908c90600401611865565b600060405180830381600087803b158015610a2657600080fd5b505af1158015610a3a573d6000803e3d6000fd5b5050505098975050505050505050565b805160005b81811015610b25576040516002860190610a6a90869061166d565b9081526020016040518091039020838281518110610a8a57610a8a611b9a565b60209081029190910181015182546001810184556000938452928290208151600294850290910180546001600160a01b039092166001600160a01b0319831681178255938301519294909384926001600160a81b0319161790600160a01b908490811115610afa57610afa611489565b021790555060408201518051610b1a916001840191602090910190610d5c565b505050600101610a4f565b506003840154600090815b81811015610b8a578551602087012060038801805483908110610b5557610b55611b9a565b90600052602060002001604051610b6c9190611bb0565b604051809103902003610b825760019250610b8a565b600101610b30565b50816105ca576003860180546001810182556000918252602090912001610bb18682611749565b50505050505050565b6000610bf58484604051602001610bd2929190611807565b604051602081830303815290604052805190602001208380519060200120610cf3565b95945050505050565b3360009081526020819052604090205460ff16151560011480610c2057503033145b610c3c5760405162461bcd60e51b81526004016102c490611639565b336000908152602081905260409020805460ff19169055565b600083471015610c815760405163cf47918160e01b8152476004820152602481018590526044016102c4565b8151600003610ca357604051631328927760e21b815260040160405180910390fd5b8282516020840186f590503d151981151615610cc5576040513d6000823e3d81fd5b6001600160a01b038116610cec5760405163b06ebf3d60e01b815260040160405180910390fd5b9392505050565b6000610cec8383306000604051836040820152846020820152828152600b8101905060ff8153605590206001600160a01b0316949350505050565b50805460008255600202906000526020600020908101906103039190610e08565b611c9680611c2683390190565b82805482825590600052602060002090600701600890048101928215610df85791602002820160005b83821115610dc657835183826101000a81548163ffffffff021916908360e01c02179055509260200192600401602081600301049283019260010302610d85565b8015610df65782816101000a81549063ffffffff0219169055600401602081600301049283019260010302610dc6565b505b50610e04929150610e36565b5090565b80821115610e045780546001600160a81b03191681556000610e2d6001830182610e4b565b50600201610e08565b5b80821115610e045760008155600101610e37565b5080546000825560070160089004906000526020600020908101906103039190610e36565b60005b83811015610e8b578181015183820152602001610e73565b50506000910152565b60008151808452610eac816020860160208601610e70565b601f01601f19169290920160200192915050565b6000602082016020835280845180835260408501915060408160051b86010192506020860160005b82811015610f1957603f19878603018452610f04858351610e94565b94506020938401939190910190600101610ee8565b50929695505050505050565b634e487b7160e01b600052604160045260246000fd5b60405160a081016001600160401b0381118282101715610f5d57610f5d610f25565b60405290565b604051606081016001600160401b0381118282101715610f5d57610f5d610f25565b604051601f8201601f191681016001600160401b0381118282101715610fad57610fad610f25565b604052919050565b6000806001600160401b03841115610fcf57610fcf610f25565b50601f8301601f1916602001610fe481610f85565b915050828152838383011115610ff957600080fd5b828260208301376000602084830101529392505050565b600082601f83011261102157600080fd5b610cec83833560208501610fb5565b60006020828403121561104257600080fd5b81356001600160401b0381111561105857600080fd5b61106484828501611010565b949350505050565b80356001600160a01b038116811461108357600080fd5b919050565b60008083601f84011261109a57600080fd5b5081356001600160401b038111156110b157600080fd5b6020830191508360208285010111156110c957600080fd5b9250929050565b6000806000806000608086880312156110e857600080fd5b85356001600160401b038111156110fe57600080fd5b860160a0818903121561111057600080fd5b611118610f3b565b6111218261106c565b815261112f6020830161106c565b60208201526111406040830161106c565b604082015260608201356001600160401b0381111561115e57600080fd5b61116a8a828501611010565b60608301525060808201356001600160401b0381111561118957600080fd5b6111958a828501611010565b60808301525095506111ab90506020870161106c565b935060408601356001600160401b038111156111c657600080fd5b6111d288828901611088565b90945092505060608601356001600160401b038111156111f157600080fd5b6111fd88828901611010565b9150509295509295909350565b60006001600160401b0382111561122357611223610f25565b5060051b60200190565b600082601f83011261123e57600080fd5b813561125161124c8261120a565b610f85565b8082825260208201915060208360051b86010192508583111561127357600080fd5b602085015b838110156113885780356001600160401b0381111561129657600080fd5b86016060818903601f190112156112ac57600080fd5b6112b4610f63565b6112c06020830161106c565b81526040820135600381106112d457600080fd5b602082015260608201356001600160401b038111156112f257600080fd5b60208184010192505088601f83011261130a57600080fd5b813561131861124c8261120a565b8082825260208201915060208360051b86010192508b83111561133a57600080fd5b6020850194505b828510156113725784356001600160e01b03198116811461136157600080fd5b825260209485019490910190611341565b6040840152505084525060209283019201611278565b5095945050505050565b6000602082840312156113a457600080fd5b81356001600160401b038111156113ba57600080fd5b8201606081850312156113cc57600080fd5b6113d4610f63565b81356001600160401b038111156113ea57600080fd5b6113f686828501611010565b82525060208201356001600160401b0381111561141257600080fd5b61141e8682850161122d565b60208301525060408201356001600160401b0381111561143d57600080fd5b80830192505084601f83011261145257600080fd5b61146185833560208501610fb5565b6040820152949350505050565b60006020828403121561148057600080fd5b610cec8261106c565b634e487b7160e01b600052602160045260246000fd5b600381106114bd57634e487b7160e01b600052602160045260246000fd5b9052565b6001600160e01b0319169052565b6000602082016020835280845180835260408501915060408160051b86010192506020860160005b82811015610f1957868503603f19018452815180516001600160a01b03168652602080820151606088019161152e9089018261149f565b506040820151915060606040880152808251808352608089019150602084019350600092505b808310156115805783516001600160e01b03191682526020938401936001939093019290910190611554565b509650505060209384019391909101906001016114f7565b600080604083850312156115ab57600080fd5b82356001600160401b038111156115c157600080fd5b6115cd85828601611010565b92505060208301356001600160401b038111156115e957600080fd5b6115f58582860161122d565b9150509250929050565b600181811c9082168061161357607f821691505b60208210810361163357634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252601a908201527931b0b63632b91034b9903737ba10309031b7b73a3937b63632b960311b604082015260600190565b6000825161167f818460208701610e70565b9190910192915050565b80516001600160a01b0390811683526020808301518216908401526040808301519091169083015260608082015160a09184018290526000916116ce90850182610e94565b905060808301518482036080860152610bf58282610e94565b602081526000610cec6020830184611689565b601f82111561174457806000526020600020601f840160051c810160208510156117215750805b601f840160051c820191505b81811015611741576000815560010161172d565b50505b505050565b81516001600160401b0381111561176257611762610f25565b6117768161177084546115ff565b846116fa565b6020601f8211600181146117aa57600083156117925750848201515b600019600385901b1c1916600184901b178455611741565b600084815260208120601f198516915b828110156117da57878501518255602094850194600190920191016117ba565b50848210156117f85786840151600019600387901b60f8161c191681555b50505050600190811b01905550565b606083901b6001600160601b0319168152815160009061182e816014850160208701610e70565b919091016014019392505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b038716815260a06020820181905260009061188990830188611689565b828103604084015280875480835260208301915060208160051b84010189600052602060002060005b83811015611b6657858303601f1901855281546001600160a01b038116845260608401906118ea6020860160a083901c60ff1661149f565b5060606040850152600183018054808352600091825260208083209301905b806007840110156119f5578354611923838260e01b6114c1565b61193e6020840160c083901b6001600160e01b0319166114c1565b6119596040840160a083901b6001600160e01b0319166114c1565b61197460608401608083901b6001600160e01b0319166114c1565b61198f60808401606083901b6001600160e01b0319166114c1565b6119aa60a08401604083901b6001600160e01b0319166114c1565b6119c560c08401602083901b6001600160e01b0319166114c1565b6119dc60e084016001600160e01b031983166114c1565b5061010082019150600184019350600883019250611909565b92549280831015611a1a57611a0d828560e01b6114c1565b6020820191506001830192505b80831015611a4757611a3a8260c086901b6001600160e01b0319166114c1565b6020820191506001830192505b80831015611a7457611a678260a086901b6001600160e01b0319166114c1565b6020820191506001830192505b80831015611aa157611a9482608086901b6001600160e01b0319166114c1565b6020820191506001830192505b80831015611ace57611ac182606086901b6001600160e01b0319166114c1565b6020820191506001830192505b80831015611afb57611aee82604086901b6001600160e01b0319166114c1565b6020820191506001830192505b80831015611b2857611b1b82602086901b6001600160e01b0319166114c1565b6020820191506001830192505b80831015611b4b57611b44826001600160e01b031986166114c1565b6020820191505b506020979097019694505050600291909101906001016118b2565b50506001600160a01b03891660608701528581036080870152611b8a81888a61183c565b9c9b505050505050505050505050565b634e487b7160e01b600052603260045260246000fd5b6000808354611bbe816115ff565b600182168015611bd55760018114611bea57611c1a565b60ff1983168652811515820286019350611c1a565b86600052602060002060005b83811015611c1257815488820152600190910190602001611bf6565b505081860193505b50919594505050505056fe6080604052348015600f57600080fd5b50611c778061001f6000396000f3fe6080604052600436106100435760003560e01c80636a60c3b7146100f75780638da5cb5b14610122578063cde7b2c114610137578063f2fde38b146101575761004a565b3661004a57005b600080356001600160e01b0319168152600080516020611bd6833981519152602081905260409091205481906001600160a01b0316806100d15760405162461bcd60e51b815260206004820181905260248201527f4469616d6f6e643a2046756e6374696f6e20646f6573206e6f7420657869737460448201526064015b60405180910390fd5b3660008037600080366000845af43d6000803e8080156100f0573d6000f35b3d6000fd5b005b34801561010357600080fd5b50305b6040516001600160a01b03909116815260200160405180910390f35b34801561012e57600080fd5b50610106610177565b34801561014357600080fd5b506100f5610152366004611668565b610186565b34801561016357600080fd5b506100f56101723660046117b2565b6104b9565b60006101816104cd565b905090565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff1615906001600160401b03166000811580156101cb5750825b90506000826001600160401b031660011480156101e75750303b155b9050811580156101f5575080155b156102135760405163f92ee8a960e01b815260040160405180910390fd5b84546001600160401b0319166001178555831561023c57845460ff60401b1916600160401b1785555b60016102466104e9565b6301ffc9a760e01b600090815260039190910160205260409020805460ff191691151591909117905560016102796104e9565b631c5596d560e11b600090815260039190910160205260409020805460ff191691151591909117905560016102ac6104e9565b6307f5828d60e41b600090815260039190910160205260409020805460ff191691151591909117905560016102df6104e9565b6380ac58cd60e01b600090815260039190910160205260409020805460ff191691151591909117905560016103126104e9565b635b5e139f60e01b600090815260039190910160205260409020805460ff191691151591909117905560016103456104e9565b63780e9d6360e01b60009081526003919091016020908152604091829020805460ff1916931515939093179092558051601f89018390048302810183019091528781526103b0918b918b918b908b90819084018382808284376000920191909152506104fb92505050565b6103b98b610702565b8a6103c2610762565b80546001600160a01b0319166001600160a01b039290921691909117905560608a01516103ed610762565b60408051651cde5b589bdb60d21b81526005929092016006830152519081900360260190209061041d9082611855565b50896080015161042b610762565b60408051636e616d6560e01b8152600592909201600483015251908190036024019020906104599082611855565b506104666202a300610786565b83156104ac57845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b5050505050505050505050565b6104c1610813565b6104ca81610702565b50565b60006104d76104e9565b600401546001600160a01b0316919050565b600080516020611bd683398151915290565b60005b83518110156106b757600084828151811061051b5761051b611913565b60200260200101516020015190506000600281111561053c5761053c611929565b81600281111561054e5761054e611929565b0361059c5761059785838151811061056857610568611913565b60200260200101516000015186848151811061058657610586611913565b602002602001015160400151610883565b6106ae565b60018160028111156105b0576105b0611929565b036105f9576105978583815181106105ca576105ca611913565b6020026020010151600001518684815181106105e8576105e8611913565b6020026020010151604001516109f8565b600281600281111561060d5761060d611929565b036106565761059785838151811061062757610627611913565b60200260200101516000015186848151811061064557610645611913565b602002602001015160400151610b79565b60405162461bcd60e51b815260206004820152602760248201527f4c69624469616d6f6e644375743a20496e636f727265637420466163657443756044820152663a20b1ba34b7b760c91b60648201526084016100c8565b506001016104fe565b507f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb6738383836040516106eb9392919061198f565b60405180910390a16106fd8282610c89565b505050565b600061070c6104e9565b6004810180546001600160a01b038581166001600160a01b031983168117909355604051939450169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b7f3b28ada7424160f36dba04e603ff68d11ac4a3eeb1ef7a9911d79d949607b74090565b60006107906104e9565b905080600501546000146107f75760405162461bcd60e51b815260206004820152602860248201527f4c69624469616d6f6e643a2054696d656c6f636b20616c726561647920696e696044820152671d1a585b1a5e995960c21b60648201526084016100c8565b60008211610808576202a30061080a565b815b60059091015550565b61081b6104e9565b600401546001600160a01b031633146108815760405162461bcd60e51b815260206004820152602260248201527f4c69624469616d6f6e643a204d75737420626520636f6e7472616374206f776e60448201526132b960f11b60648201526084016100c8565b565b60008151116108a45760405162461bcd60e51b81526004016100c890611a9e565b60006108ae6104e9565b90506001600160a01b0383166108d65760405162461bcd60e51b81526004016100c890611ae9565b6001600160a01b0383166000908152600182016020526040812054906001600160601b038216900361090c5761090c8285610e95565b60005b83518110156109f157600084828151811061092c5761092c611913565b6020908102919091018101516001600160e01b031981166000908152918690526040909120549091506001600160a01b031680156109ca5760405162461bcd60e51b815260206004820152603560248201527f4c69624469616d6f6e644375743a2043616e2774206164642066756e6374696f6044820152746e207468617420616c72656164792065786973747360581b60648201526084016100c8565b6109d68583868a610eff565b836109e081611b4b565b9450506001909201915061090f9050565b5050505050565b6000815111610a195760405162461bcd60e51b81526004016100c890611a9e565b6000610a236104e9565b90506001600160a01b038316610a4b5760405162461bcd60e51b81526004016100c890611ae9565b6001600160a01b0383166000908152600182016020526040812054906001600160601b0382169003610a8157610a818285610e95565b60005b83518110156109f1576000848281518110610aa157610aa1611913565b6020908102919091018101516001600160e01b031981166000908152918690526040909120549091506001600160a01b039081169087168103610b475760405162461bcd60e51b815260206004820152603860248201527f4c69624469616d6f6e644375743a2043616e2774207265706c6163652066756e60448201527731ba34b7b7103bb4ba341039b0b6b290333ab731ba34b7b760411b60648201526084016100c8565b610b52858284610f9f565b610b5e8583868a610eff565b83610b6881611b4b565b94505060019092019150610a849050565b6000815111610b9a5760405162461bcd60e51b81526004016100c890611a9e565b6000610ba46104e9565b90506001600160a01b03831615610c1c5760405162461bcd60e51b815260206004820152603660248201527f4c69624469616d6f6e644375743a2052656d6f76652066616365742061646472604482015275657373206d757374206265206164647265737328302960501b60648201526084016100c8565b60005b8251811015610c83576000838281518110610c3c57610c3c611913565b6020908102919091018101516001600160e01b031981166000908152918590526040909120549091506001600160a01b0316610c79848284610f9f565b5050600101610c1f565b50505050565b6001600160a01b038216610d0f57805115610d0b5760405162461bcd60e51b815260206004820152603c60248201527f4c69624469616d6f6e644375743a205f696e697420697320616464726573732860448201527b3029206275745f63616c6c64617461206973206e6f7420656d70747960201b60648201526084016100c8565b5050565b6000815111610d865760405162461bcd60e51b815260206004820152603d60248201527f4c69624469616d6f6e644375743a205f63616c6c6461746120697320656d707460448201527f7920627574205f696e6974206973206e6f74206164647265737328302900000060648201526084016100c8565b6001600160a01b0382163014610db857610db882604051806060016040528060288152602001611bf66028913961135c565b600080836001600160a01b031683604051610dd39190611b77565b600060405180830381855af49150503d8060008114610e0e576040519150601f19603f3d011682016040523d82523d6000602084013e610e13565b606091505b509150915081610c8357805115610e3e578060405162461bcd60e51b81526004016100c89190611b93565b60405162461bcd60e51b815260206004820152602660248201527f4c69624469616d6f6e644375743a205f696e69742066756e6374696f6e2072656044820152651d995c9d195960d21b60648201526084016100c8565b610eb781604051806060016040528060248152602001611c1e6024913961135c565b6002820180546001600160a01b0390921660008181526001948501602090815260408220860185905594840183559182529290200180546001600160a01b0319169091179055565b6001600160e01b0319831660008181526020868152604080832080546001600160601b03909716600160a01b026001600160a01b0397881617815594909516808352600180890183529583208054968701815583528183206008870401805460e09890981c60046007909816979097026101000a96870263ffffffff9097021990971695909517909555529290915281546001600160a01b031916179055565b6001600160a01b0382166110155760405162461bcd60e51b815260206004820152603760248201527f4c69624469616d6f6e644375743a2043616e27742072656d6f76652066756e636044820152761d1a5bdb881d1a185d08191bd95cdb89dd08195e1a5cdd604a1b60648201526084016100c8565b306001600160a01b038316036110845760405162461bcd60e51b815260206004820152602e60248201527f4c69624469616d6f6e644375743a2043616e27742072656d6f766520696d6d7560448201526d3a30b1363290333ab731ba34b7b760911b60648201526084016100c8565b6001600160e01b03198116600090815260208481526040808320546001600160a01b0386168452600180880190935290832054600160a01b9091046001600160601b031692916110d391611ba6565b90508082146111c5576001600160a01b0384166000908152600186016020526040812080548390811061110857611108611913565b600091825260208083206008830401546001600160a01b038916845260018a019091526040909220805460079092166004026101000a90920460e01b92508291908590811061115957611159611913565b600091825260208083206008830401805463ffffffff60079094166004026101000a938402191660e09590951c929092029390931790556001600160e01b03199290921682528690526040902080546001600160a01b0316600160a01b6001600160601b038516021790555b6001600160a01b038416600090815260018601602052604090208054806111ee576111ee611bbf565b60008281526020808220600860001990940193840401805463ffffffff600460078716026101000a0219169055919092556001600160e01b031985168252869052604081208190558190036109f157600285015460009061125190600190611ba6565b6001600160a01b038616600090815260018089016020526040909120015490915080821461130057600087600201838154811061129057611290611913565b6000918252602090912001546002890180546001600160a01b0390921692508291849081106112c1576112c1611913565b600091825260208083209190910180546001600160a01b0319166001600160a01b03948516179055929091168152600189810190925260409020018190555b8660020180548061131357611313611bbf565b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b0388168252600189810190915260408220015550505050505050565b813b8181610c835760405162461bcd60e51b81526004016100c89190611b93565b80356001600160a01b038116811461139457600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b03811182821017156113d1576113d1611399565b60405290565b60405160a081016001600160401b03811182821017156113d1576113d1611399565b604051601f8201601f191681016001600160401b038111828210171561142157611421611399565b604052919050565b600082601f83011261143a57600080fd5b81356001600160401b0381111561145357611453611399565b611466601f8201601f19166020016113f9565b81815284602083860101111561147b57600080fd5b816020850160208301376000918101602001919091529392505050565b60006001600160401b038211156114b1576114b1611399565b5060051b60200190565b600082601f8301126114cc57600080fd5b81356114df6114da82611498565b6113f9565b8082825260208201915060208360051b86010192508583111561150157600080fd5b602085015b838110156116165780356001600160401b0381111561152457600080fd5b86016060818903601f1901121561153a57600080fd5b6115426113af565b61154e6020830161137d565b815260408201356003811061156257600080fd5b602082015260608201356001600160401b0381111561158057600080fd5b60208184010192505088601f83011261159857600080fd5b81356115a66114da82611498565b8082825260208201915060208360051b86010192508b8311156115c857600080fd5b6020850194505b828510156116005784356001600160e01b0319811681146115ef57600080fd5b8252602094850194909101906115cf565b6040840152505084525060209283019201611506565b5095945050505050565b60008083601f84011261163257600080fd5b5081356001600160401b0381111561164957600080fd5b60208301915083602082850101111561166157600080fd5b9250929050565b60008060008060008060a0878903121561168157600080fd5b61168a8761137d565b955060208701356001600160401b038111156116a557600080fd5b870160a0818a0312156116b757600080fd5b6116bf6113d7565b6116c88261137d565b81526116d66020830161137d565b60208201526116e76040830161137d565b604082015260608201356001600160401b0381111561170557600080fd5b6117118b828501611429565b60608301525060808201356001600160401b0381111561173057600080fd5b61173c8b828501611429565b60808301525095505060408701356001600160401b0381111561175e57600080fd5b61176a89828a016114bb565b9450506117796060880161137d565b925060808701356001600160401b0381111561179457600080fd5b6117a089828a01611620565b979a9699509497509295939492505050565b6000602082840312156117c457600080fd5b6117cd8261137d565b9392505050565b600181811c908216806117e857607f821691505b60208210810361180857634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156106fd57806000526020600020601f840160051c810160208510156118355750805b601f840160051c820191505b818110156109f15760008155600101611841565b81516001600160401b0381111561186e5761186e611399565b6118828161187c84546117d4565b8461180e565b6020601f8211600181146118b6576000831561189e5750848201515b600019600385901b1c1916600184901b1784556109f1565b600084815260208120601f198516915b828110156118e657878501518255602094850194600190920191016118c6565b50848210156119045786840151600019600387901b60f8161c191681555b50505050600190811b01905550565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b60005b8381101561195a578181015183820152602001611942565b50506000910152565b6000815180845261197b81602086016020860161193f565b601f01601f19169290920160200192915050565b6000606082016060835280865180835260808501915060808160051b86010192506020880160005b82811015611a6f57868503607f19018452815180516001600160a01b0316865260208101516060870190600381106119ff57634e487b7160e01b600052602160045260246000fd5b806020890152506040820151915060606040880152808251808352608089019150602084019350600092505b80831015611a575783516001600160e01b03191682526020938401936001939093019290910190611a2b565b509650505060209384019391909101906001016119b7565b5050506001600160a01b0386166020850152508281036040840152611a948185611963565b9695505050505050565b6020808252602b908201527f4c69624469616d6f6e644375743a204e6f2073656c6563746f727320696e206660408201526a1858d95d081d1bc818dd5d60aa1b606082015260800190565b6020808252602c908201527f4c69624469616d6f6e644375743a204164642066616365742063616e2774206260408201526b65206164647265737328302960a01b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b60006001600160601b0382166002600160601b03198101611b6e57611b6e611b35565b60010192915050565b60008251611b8981846020870161193f565b9190910192915050565b6020815260006117cd6020830184611963565b81810381811115611bb957611bb9611b35565b92915050565b634e487b7160e01b600052603160045260246000fdfec8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c4c69624469616d6f6e644375743a205f696e6974206164647265737320686173206e6f20636f64654c69624469616d6f6e644375743a204e657720666163657420686173206e6f20636f6465a264697066735822122033e829527f8795379ee5bfafaf4e6e85c30d7f7251e3bf1db7718016342f585b64736f6c634300081c0033a2646970667358221220798320c43026247f145ea2ed2e00c32b1ca337e6081761395e2245afee28778b64736f6c634300081c0033",
  "libraries": {
    "AddressSet": "0x8aB21bf41B908d9CBee3E78e97033E3916840cA8",
    "AttributeLib": "0x9d0749b64bEDB024B1AaF596c84029E67635D43c",
    "Base64": "0x8d10857B6d2bEA12d67A888F3E995ea142Db701E",
    "Bytes32Set": "0xB01Cf1Baf9ABFa5309AE3ff649B31ae87A80AE62",
    "CarbonCreditLib": "0x44520E8dA039d4D7D460f5DBF6C1eC347De53A7C",
    "DiamondFactoryLib": "0x50353159348c63A448eDAfC6d5ef81CF9C1cdE9a",
    "DiamondLib": "0x2Be86045394c8096b3b9d9449A08Cc74afEd5717",
    "ERC721AEnumerationLib": "0x6a9A6D75AECEfB8dC969D5Ef5ea3EcF57e29706d",
    "ERC721ALib": "0x8F980CBDb943c2794FdA47D82d81a71d31A815DE",
    "Identity": "0x4C6fE457018d32B9aEc2aA99F655b5aCD7d0D658",
    "IdentityFactory": "0x5c970fD1E772548Be3Dc3de62381Fd8b2b3fAb96",
    "IdentitySystemStorage": "0x05d7966Acfa90f529e3844B1d1b7702dBde7789c",
    "LibDiamond": "0x30Fb10d923CfFC1151B8CFe683A937F414854570",
    "MerkleProver": "0x6361c8F2C7Fb1498C15C5e90Ed477ee8cEeC9f5f",
    "MetadataLib": "0xEA17bE869d528F2c3e4F7cae231ebE4BE42BeB75",
    "MultiSaleLib": "0x3b12B21202DaC69552E7b1f9D4D3E31085c7a378",
    "Strings": "0x26375f3210F1F8C90f53c663AC44F3d4a86b12A6",
    "StringsLib": "0x928c0A50586514D291087403befe3540E3631ECd",
    "SVGTemplatesLib": "0xFD3DfE346d5d5c8C90313036BC1b1E3De29FCb33",
    "UInt256Set": "0x908B9bE15117446dE01d076Ecb75D9210E182D97",
    "VariablePriceLib": "0x92E3cBf7226518CF757c48446067de1485CCCcBb"
  },
  "devdoc": {
    "errors": {
      "Create2EmptyBytecode()": [
        {
          "details": "There's no code to deploy."
        }
      ],
      "FailedDeployment()": [
        {
          "details": "The deployment failed."
        }
      ],
      "InsufficientBalance(uint256,uint256)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "addController(address)": {
        "details": "Add an address allowed to control this contract"
      },
      "createFromSet((address,address,address,string,string),address,bytes,string)": {
        "params": {
          "_calldata": "the calldata to pass to the diamond init contract",
          "diamondInit": "the diamond init contract",
          "params": "diamond init parameters"
        }
      },
      "exists(string)": {
        "params": {
          "symbol": "the symbol of the diamond to check"
        }
      },
      "getDiamondAddress(string)": {
        "params": {
          "symbol": "the symbol of the diamond"
        },
        "returns": {
          "_0": "the address of the diamond"
        }
      },
      "initialize((string,(address,uint8,bytes4[])[],bytes))": {
        "params": {
          "initData": "the initialization data for the factory"
        }
      },
      "isController(address)": {
        "details": "Check if this address is a controller"
      },
      "relinquishControl()": {
        "details": "Remove the sender address from the list of controllers"
      },
      "removeFacets(string)": {
        "params": {
          "facetSet": "the facet set to remove"
        }
      },
      "setFacets(string,(address,uint8,bytes4[])[])": {
        "params": {
          "facetAddress": "the facet to set",
          "facetSet": "the index of the facet to set"
        }
      },
      "symbols()": {
        "returns": {
          "_0": "the symbols"
        }
      }
    },
    "title": "Diamond Factory",
    "version": 1
  },
  "userdoc": {
    "events": {
      "ControllerAdded(address,address)": {
        "notice": "emitted when a controller is added."
      },
      "ControllerRemoved(address,address)": {
        "notice": "emitted when a controller is removed."
      }
    },
    "kind": "user",
    "methods": {
      "createFromSet((address,address,address,string,string),address,bytes,string)": {
        "notice": "create a new diamond token with the given symbol"
      },
      "exists(string)": {
        "notice": "check if the token exists"
      },
      "getDiamondAddress(string)": {
        "notice": "get the address of the diamond"
      },
      "getFacets(string)": {
        "notice": "get the facets for the diamond"
      },
      "initialize((string,(address,uint8,bytes4[])[],bytes))": {
        "notice": "initiiate the factory"
      },
      "removeFacets(string)": {
        "notice": "remote a facet set from the factory"
      },
      "setFacets(string,(address,uint8,bytes4[])[])": {
        "notice": "set a number of template facets on this factory"
      },
      "symbols()": {
        "notice": "get all the symbols from the factory"
      }
    },
    "notice": "This contract is used to create new Diamond contracts.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 36753,
        "contract": "contracts/DiamondFactory.sol:DiamondFactory",
        "label": "_controllers",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}