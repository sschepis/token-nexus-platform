{
  "address": "0x6361c8F2C7Fb1498C15C5e90Ed477ee8cEeC9f5f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "a",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "b",
          "type": "uint256"
        }
      ],
      "name": "getHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "root",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "leaf",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        }
      ],
      "name": "verify",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x484b9ad64ed193758dc0dc348a630761ce19281d5b7a2a396e95f2981b6ebcc7",
  "receipt": {
    "to": null,
    "from": "0x9508f0Da19eC1C52D9C52611e4433159492bb93b",
    "contractAddress": "0x6361c8F2C7Fb1498C15C5e90Ed477ee8cEeC9f5f",
    "transactionIndex": 40,
    "gasUsed": "221305",
    "logsBloom": "0x
    "blockHash": "0x7357e0dcbb711ccb55797c858d48cfca436eb58055f48ea2d3228110b9d96f1c",
    "transactionHash": "0x484b9ad64ed193758dc0dc348a630761ce19281d5b7a2a396e95f2981b6ebcc7",
    "logs": [],
    "blockNumber": 26013666,
    "cumulativeGasUsed": "4041567",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "ccf876918ad4728259522ce4e695c811",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"getHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/MerkleProver.sol\":\"MerkleProver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":11},\"remappings\":[]},\"sources\":{\"contracts/libraries/MerkleProver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nlibrary MerkleProver {\\n\\n  function verify(\\n    bytes32 root,\\n    bytes32 leaf,\\n    bytes32[] memory proof\\n  )\\n    public\\n    pure\\n    returns (bool)\\n  {\\n    // Added check for empty proof when leaf is root\\n    if (leaf == root && proof.length == 0) {\\n        return false;\\n    }\\n\\n    bytes32 computedHash = leaf;\\n\\n    for (uint256 i = 0; i < proof.length; i++) {\\n      bytes32 proofElement = proof[i];\\n\\n      if (computedHash <= proofElement) {\\n        // Hash(current computed hash + current element of the proof)\\n        computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n      } else {\\n        // Hash(current element of the proof + current computed hash)\\n        computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n      }\\n    }\\n\\n    // Check if the computed hash (root) is equal to the provided root\\n    return computedHash == root;\\n  }\\n\\n  function getHash(address a, uint256 b) public pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(a, b));\\n  }\\n\\n}\\n\",\"keccak256\":\"0x12aa34557602713b1af15d026c2a47e8e87806d3abf8c1d9a33feb5021a75b8b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x610309610039600b82828239805160001a607314602c57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c80633423e54814610045578063ed05582b1461006d575b600080fd5b6100586100533660046101a4565b6100cb565b60405190151581526020015b60405180910390f35b6100bd61007b366004610285565b6040516001600160601b0319606084901b1660208201526034810182905260009060540160405160208183030381529060405280519060200120905092915050565b604051908152602001610064565b600083831480156100db57508151155b156100e857506000610187565b8260005b8351811015610181576000848281518110610109576101096102bd565b6020026020010151905080831161014b576040805160208101859052908101829052606001604051602081830303815290604052805190602001209250610178565b60408051602081018390529081018490526060016040516020818303038152906040528051906020012092505b506001016100ec565b50841490505b9392505050565b634e487b7160e01b600052604160045260246000fd5b6000806000606084860312156101b957600080fd5b833592506020840135915060408401356001600160401b038111156101dd57600080fd5b8401601f810186136101ee57600080fd5b80356001600160401b038111156102075761020761018e565b604051600582901b90603f8201601f191681016001600160401b03811182821017156102355761023561018e565b60405291825260208184018101929081018984111561025357600080fd5b6020850194505b838510156102765784358082526020958601959093500161025a565b50809450505050509250925092565b6000806040838503121561029857600080fd5b82356001600160a01b03811681146102af57600080fd5b946020939093013593505050565b634e487b7160e01b600052603260045260246000fdfea26469706673582212201ec850c486a91dfa7cb0963b9c724867b49193db09ab20b8acdd8e65192ac67264736f6c634300081c0033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c80633423e54814610045578063ed05582b1461006d575b600080fd5b6100586100533660046101a4565b6100cb565b60405190151581526020015b60405180910390f35b6100bd61007b366004610285565b6040516001600160601b0319606084901b1660208201526034810182905260009060540160405160208183030381529060405280519060200120905092915050565b604051908152602001610064565b600083831480156100db57508151155b156100e857506000610187565b8260005b8351811015610181576000848281518110610109576101096102bd565b6020026020010151905080831161014b576040805160208101859052908101829052606001604051602081830303815290604052805190602001209250610178565b60408051602081018390529081018490526060016040516020818303038152906040528051906020012092505b506001016100ec565b50841490505b9392505050565b634e487b7160e01b600052604160045260246000fd5b6000806000606084860312156101b957600080fd5b833592506020840135915060408401356001600160401b038111156101dd57600080fd5b8401601f810186136101ee57600080fd5b80356001600160401b038111156102075761020761018e565b604051600582901b90603f8201601f191681016001600160401b03811182821017156102355761023561018e565b60405291825260208184018101929081018984111561025357600080fd5b6020850194505b838510156102765784358082526020958601959093500161025a565b50809450505050509250925092565b6000806040838503121561029857600080fd5b82356001600160a01b03811681146102af57600080fd5b946020939093013593505050565b634e487b7160e01b600052603260045260246000fdfea26469706673582212201ec850c486a91dfa7cb0963b9c724867b49193db09ab20b8acdd8e65192ac67264736f6c634300081c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}