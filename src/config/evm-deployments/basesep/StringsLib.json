{
  "address": "0x928c0A50586514D291087403befe3540E3631ECd",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "sourceBytes",
          "type": "bytes[]"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "matchString",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "replaceString",
              "type": "string"
            }
          ],
          "internalType": "struct Replacement[]",
          "name": "replacements_",
          "type": "tuple[]"
        }
      ],
      "name": "replace",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xc2406fd0ed0bdc4e8a2f9c61405cd681e4bc613c3c71708de20289562f734ff9",
  "receipt": {
    "to": null,
    "from": "0x9508f0Da19eC1C52D9C52611e4433159492bb93b",
    "contractAddress": "0x928c0A50586514D291087403befe3540E3631ECd",
    "transactionIndex": 12,
    "gasUsed": "337853",
    "logsBloom": "0x
    "blockHash": "0x36d77560a89a37a46ea33390f8edb2ad5b12bcc1a828eef76251f9d60a9f78b7",
    "transactionHash": "0xc2406fd0ed0bdc4e8a2f9c61405cd681e4bc613c3c71708de20289562f734ff9",
    "logs": [],
    "blockNumber": 26013678,
    "cumulativeGasUsed": "865467",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "ccf876918ad4728259522ce4e695c811",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"sourceBytes\",\"type\":\"bytes[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"matchString\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"replaceString\",\"type\":\"string\"}],\"internalType\":\"struct Replacement[]\",\"name\":\"replacements_\",\"type\":\"tuple[]\"}],\"name\":\"replace\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/StringsLib.sol\":\"StringsLib\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":11},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IStrings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nstruct Replacement {\\n    string matchString;\\n    string replaceString;\\n}\\n\",\"keccak256\":\"0x0df4530f0e41983002d8732a50f802d069b85d0f2fedad4dc58bf4b73ea39146\",\"license\":\"MIT\"},\"contracts/libraries/StringsLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nimport \\\"../interfaces/IStrings.sol\\\";\\n\\nlibrary StringsLib {\\n\\n    function parseInt(string memory s) internal pure returns (uint256 res) {\\n        uint256 sLength = bytes(s).length;\\n        for (uint256 i = 0; i < sLength; i++) {\\n            if ((uint8(bytes(s)[i]) - 48) < 0 || (uint8(bytes(s)[i]) - 48) > 9) {\\n                return 0;\\n            }\\n            res += (uint8(bytes(s)[i]) - 48) * 10**(bytes(s).length - i - 1);\\n        }\\n        return res;\\n\\n    }\\n\\n    function startsWith(string memory haystack, string memory needle)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        bytes memory haystackBytes = bytes(haystack);\\n        bytes memory needleBytes = bytes(needle);\\n        uint256 haystackLength = haystackBytes.length;\\n        uint256 needleLength = needleBytes.length;\\n        if (needleLength > haystackLength) {\\n            return false;\\n        }\\n        for (uint256 i = 0; i < needleLength; i++) {\\n            if (haystackBytes[i] != needleBytes[i]) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    function endsWith(string memory haystack, string memory needle)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        bytes memory haystackBytes = bytes(haystack);\\n        bytes memory needleBytes = bytes(needle);\\n        uint256 haystackLength = haystackBytes.length;\\n        uint256 needleLength = needleBytes.length;\\n        if (needleLength > haystackLength) {\\n            return false;\\n        }\\n        for (uint256 i = 0; i < needleLength; i++) {\\n            if (\\n                haystackBytes[haystackLength - i - 1] !=\\n                needleBytes[needleLength - i - 1]\\n            ) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    function substring(string memory haystack, uint256 startpos)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        bytes memory haystackBytes = bytes(haystack);\\n        uint256 length = haystackBytes.length;\\n        uint256 endpos = length - startpos;\\n        bytes memory substringBytes = new bytes(endpos);\\n        for (uint256 i = 0; i < endpos; i++) {\\n            substringBytes[i] = haystackBytes[startpos + i];\\n        }\\n        return string(substringBytes);\\n    }\\n\\n    function substring(string memory haystack, uint256 startpos, uint256 endpos)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        bytes memory haystackBytes = bytes(haystack);\\n        uint256 substringLength = endpos - startpos;\\n        bytes memory substringBytes = new bytes(substringLength);\\n        for (uint256 i = 0; i < substringLength; i++) {\\n            substringBytes[i] = haystackBytes[startpos + i];\\n        }\\n        return string(substringBytes);\\n    }\\n\\n    function concat(string[] memory _strings)\\n        internal\\n        pure\\n        returns (string memory _concat)\\n    {\\n        _concat = \\\"\\\";\\n        uint256 stringsLength = _strings.length;\\n        for (uint256 i = 0; i < stringsLength; i++) {\\n            _concat = string(abi.encodePacked(_concat, _strings[i]));\\n        }\\n        return _concat;\\n    }\\n\\n    function split(string memory _string, string memory _delimiter) internal pure returns (string[] memory _split) {\\n        _split = new string[](0);\\n        uint256 _delimiterLength = bytes(_delimiter).length;\\n        uint256 _stringLength = bytes(_string).length;\\n        uint256 _splitLength = 0;\\n        uint256 _splitIndex = 0;\\n        uint256 _startpos = 0;\\n        uint256 _endpos = 0;\\n        for (uint256 i = 0; i < _stringLength; i++) {\\n            if (bytes(_string)[i] == bytes(_delimiter)[0]) {\\n                _endpos = i;\\n                if (_endpos - _startpos > 0) {\\n                    _split[_splitIndex] = substring(_string, _startpos);\\n                    _splitIndex++;\\n                    _splitLength++;\\n                }\\n                _startpos = i + _delimiterLength;\\n            }\\n        }\\n        if (_startpos < _stringLength) {\\n            _split[_splitIndex] = substring(_string, _startpos);\\n            _splitIndex++;\\n            _splitLength++;\\n        }\\n        return _split;\\n    }\\n\\n    function join(string[] memory _strings, string memory _delimiter) internal pure returns (string memory _joined) {\\n        uint256 stringsLength = _strings.length;\\n        for (uint256 i = 0; i < stringsLength; i++) {\\n            _joined = string(abi.encodePacked(_joined, _strings[i]));\\n            if (i < _strings.length - 1) {\\n                _joined = string(abi.encodePacked(_joined, _delimiter));\\n            }\\n        }\\n        return _joined;\\n    }\\n\\n    function replace(string memory _string, string memory _search, string memory _replace) internal pure returns (string memory _replaced) {\\n        _replaced = _string;\\n        uint256 _searchLength = bytes(_search).length;\\n        uint256 _stringLength = bytes(_string).length;\\n        uint256 _replacedLength = _stringLength;\\n        uint256 _startpos = 0;\\n        uint256 _endpos = 0;\\n        for (uint256 i = 0; i < _stringLength; i++) {\\n            if (bytes(_string)[i] == bytes(_search)[0]) {\\n                _endpos = i;\\n                if (_endpos - _startpos > 0) {\\n                    _replaced = substring(_replaced, _startpos);\\n                    _replacedLength -= _endpos - _startpos;\\n                }\\n                _replaced = string(abi.encodePacked(_replaced, _replace));\\n                _replacedLength += bytes(_replace).length;\\n                _startpos = i + _searchLength;\\n            }\\n        }\\n        if (_startpos < _stringLength) {\\n            _replaced = substring(_replaced, _startpos);\\n            _replacedLength -= _stringLength - _startpos;\\n        }\\n        return _replaced;\\n    }\\n\\n    function trim(string memory _string) internal pure returns (string memory _trimmed) {\\n        _trimmed = _string;\\n        uint256 _stringLength = bytes(_string).length;\\n        uint256 _startpos = 0;\\n        uint256 _endpos = 0;\\n        for (uint256 i = 0; i < _stringLength; i++) {\\n            if (bytes(_string)[i] != 0x20) {\\n                _startpos = i;\\n                break;\\n            }\\n        }\\n        for (uint256 i = _stringLength - 1; i >= 0; i--) {\\n            if (bytes(_string)[i] != 0x20) {\\n                _endpos = i;\\n                break;\\n            }\\n        }\\n        if (_startpos < _endpos) {\\n            _trimmed = substring(_trimmed, _startpos);\\n            _trimmed = substring(_trimmed, 0, _endpos - _startpos + 1);\\n        }\\n        return _trimmed;\\n    }\\n\\n    function toUint16(string memory s) internal pure returns (uint16 res_) {\\n        uint256 res = 0;\\n        uint256 sLength = bytes(s).length;\\n        for (uint256 i = 0; i < sLength; i++) {\\n            if ((uint8(bytes(s)[i]) - 48) < 0 || (uint8(bytes(s)[i]) - 48) > 9) {\\n                return 0;\\n            }\\n            res += (uint8(bytes(s)[i]) - 48) * 10**(bytes(s).length - i - 1);\\n        }\\n        res_ = uint16(res);\\n    }\\n\\n\\n    function replace(string[] memory input, string memory matchTag, string[] memory repl) internal pure returns (string memory) {\\n        string memory svgBody;\\n        for(uint256 i = 0; i < input.length; i++) {\\n            string memory svgString = input[i];\\n            string memory outValue;\\n            if(StringsLib.startsWith(svgString, matchTag)) {\\n                string memory restOfLine = StringsLib.substring(svgString, bytes(matchTag).length);\\n                uint256 replIndex = StringsLib.parseInt(restOfLine);\\n                outValue = repl[replIndex];\\n            } else {\\n                outValue = svgString;\\n            }\\n            svgBody = string(abi.encodePacked(svgBody, outValue));\\n        }\\n        return svgBody;\\n    }\\n\\n    function replace(bytes[] memory sourceBytes, Replacement[] memory replacements_) public pure returns (string memory) {\\n        //bytes[] memory sourceBytes = _getSourceBytes();\\n        string memory outputFile = \\\"\\\";\\n        uint256 sourceBytesLength = sourceBytes.length;\\n        for (uint256 i = 0; i < sourceBytesLength; i++) {\\n            bytes memory sourceByte = sourceBytes[i];\\n            string memory outputLine  = string(sourceBytes[i]);\\n            for (uint256 j = 0; j < replacements_.length; j++) {\\n                Replacement memory replacement = replacements_[j];\\n                if (keccak256(sourceByte) == keccak256(bytes(replacement.matchString))) {\\n                    outputLine = replacement.replaceString;\\n                }\\n            }\\n            outputFile = string(abi.encodePacked(outputFile, outputLine));\\n        }\\n        return outputFile;\\n    }    \\n}\\n\",\"keccak256\":\"0xe7997c850465105fcfa7ea7b78f1ea9349d726696de51652f05575069d293ef4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x610525610039600b82828239805160001a607314602c57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c806320134c5c1461003a575b600080fd5b61004d61004836600461035f565b610063565b60405161005a9190610477565b60405180910390f35b604080516020810190915260008082528351606092915b81811015610142576000868281518110610096576100966104aa565b6020026020010151905060008783815181106100b4576100b46104aa565b6020026020010151905060005b87518110156101125760008882815181106100de576100de6104aa565b6020026020010151905080600001518051906020012084805190602001200361010957806020015192505b506001016100c1565b5084816040516020016101269291906104c0565b60408051808303601f190181529190529450505060010161007a565b5090949350505050565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b03811182821017156101845761018461014c565b60405290565b604051601f8201601f191681016001600160401b03811182821017156101b2576101b261014c565b604052919050565b60006001600160401b038211156101d3576101d361014c565b5060051b60200190565b6000806001600160401b038411156101f7576101f761014c565b50601f8301601f191660200161020c8161018a565b91505082815283838301111561022157600080fd5b828260208301376000602084830101529392505050565b600082601f83011261024957600080fd5b610258838335602085016101dd565b9392505050565b600082601f83011261027057600080fd5b813561028361027e826101ba565b61018a565b8082825260208201915060208360051b8601019250858311156102a557600080fd5b602085015b838110156103555780356001600160401b038111156102c857600080fd5b86016040818903601f190112156102de57600080fd5b6102e6610162565b60208201356001600160401b038111156102ff57600080fd5b61030e8a602083860101610238565b82525060408201356001600160401b0381111561032a57600080fd5b6103398a602083860101610238565b60208301525080855250506020830192506020810190506102aa565b5095945050505050565b6000806040838503121561037257600080fd5b82356001600160401b0381111561038857600080fd5b8301601f8101851361039957600080fd5b80356103a761027e826101ba565b8082825260208201915060208360051b8501019250878311156103c957600080fd5b602084015b8381101561041e5780356001600160401b038111156103ec57600080fd5b8501603f81018a136103fd57600080fd5b61040f8a6020830135604084016101dd565b845250602092830192016103ce565b50945050505060208301356001600160401b0381111561043d57600080fd5b6104498582860161025f565b9150509250929050565b60005b8381101561046e578181015183820152602001610456565b50506000910152565b6020815260008251806020840152610496816040850160208701610453565b601f01601f19169190910160400192915050565b634e487b7160e01b600052603260045260246000fd5b600083516104d2818460208801610453565b8351908301906104e6818360208801610453565b0194935050505056fea2646970667358221220155f0af0cfcbf2ab8aec8f96883bf91868e1d944cd576f3101570df72d14314e64736f6c634300081c0033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c806320134c5c1461003a575b600080fd5b61004d61004836600461035f565b610063565b60405161005a9190610477565b60405180910390f35b604080516020810190915260008082528351606092915b81811015610142576000868281518110610096576100966104aa565b6020026020010151905060008783815181106100b4576100b46104aa565b6020026020010151905060005b87518110156101125760008882815181106100de576100de6104aa565b6020026020010151905080600001518051906020012084805190602001200361010957806020015192505b506001016100c1565b5084816040516020016101269291906104c0565b60408051808303601f190181529190529450505060010161007a565b5090949350505050565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b03811182821017156101845761018461014c565b60405290565b604051601f8201601f191681016001600160401b03811182821017156101b2576101b261014c565b604052919050565b60006001600160401b038211156101d3576101d361014c565b5060051b60200190565b6000806001600160401b038411156101f7576101f761014c565b50601f8301601f191660200161020c8161018a565b91505082815283838301111561022157600080fd5b828260208301376000602084830101529392505050565b600082601f83011261024957600080fd5b610258838335602085016101dd565b9392505050565b600082601f83011261027057600080fd5b813561028361027e826101ba565b61018a565b8082825260208201915060208360051b8601019250858311156102a557600080fd5b602085015b838110156103555780356001600160401b038111156102c857600080fd5b86016040818903601f190112156102de57600080fd5b6102e6610162565b60208201356001600160401b038111156102ff57600080fd5b61030e8a602083860101610238565b82525060408201356001600160401b0381111561032a57600080fd5b6103398a602083860101610238565b60208301525080855250506020830192506020810190506102aa565b5095945050505050565b6000806040838503121561037257600080fd5b82356001600160401b0381111561038857600080fd5b8301601f8101851361039957600080fd5b80356103a761027e826101ba565b8082825260208201915060208360051b8501019250878311156103c957600080fd5b602084015b8381101561041e5780356001600160401b038111156103ec57600080fd5b8501603f81018a136103fd57600080fd5b61040f8a6020830135604084016101dd565b845250602092830192016103ce565b50945050505060208301356001600160401b0381111561043d57600080fd5b6104498582860161025f565b9150509250929050565b60005b8381101561046e578181015183820152602001610456565b50506000910152565b6020815260008251806020840152610496816040850160208701610453565b601f01601f19169190910160400192915050565b634e487b7160e01b600052603260045260246000fd5b600083516104d2818460208801610453565b8351908301906104e6818360208801610453565b0194935050505056fea2646970667358221220155f0af0cfcbf2ab8aec8f96883bf91868e1d944cd576f3101570df72d14314e64736f6c634300081c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}