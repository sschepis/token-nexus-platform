{
  "address": "0x4C6fE457018d32B9aEc2aA99F655b5aCD7d0D658",
  "abi": [
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "executionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "Approved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "enum AttributeType",
          "name": "attributeType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        }
      ],
      "name": "AttributeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "claimId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "topic",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "scheme",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "ClaimAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "claimId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "topic",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "scheme",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "ClaimChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "claimId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "topic",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "scheme",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "ClaimRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "claimRequestId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "topic",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "scheme",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "ClaimRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "controllerAddress",
          "type": "address"
        }
      ],
      "name": "ControllerAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "controllerAddress",
          "type": "address"
        }
      ],
      "name": "ControllerRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "executionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "Executed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "executionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "ExecutionFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "executionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "ExecutionRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "purpose",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "keyType",
          "type": "uint256"
        }
      ],
      "name": "KeyAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "purpose",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "keyType",
          "type": "uint256"
        }
      ],
      "name": "KeyRemoved",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_topic",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_scheme",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_issuer",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        },
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "addClaim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "claimRequestId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_controller",
          "type": "address"
        }
      ],
      "name": "addController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_key",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_purpose",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_keyType",
          "type": "uint256"
        }
      ],
      "name": "addKey",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_approve",
          "type": "bool"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_claimId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_topic",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_scheme",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_issuer",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        },
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "changeClaim",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "executionId",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_key",
          "type": "string"
        }
      ],
      "name": "getAttribute",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string"
            },
            {
              "internalType": "enum AttributeType",
              "name": "attributeType",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "value",
              "type": "string"
            }
          ],
          "internalType": "struct Attribute",
          "name": "_attrib",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_claimId",
          "type": "bytes32"
        }
      ],
      "name": "getClaim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "topic",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "scheme",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_topic",
          "type": "uint256"
        }
      ],
      "name": "getClaimIdsByTopic",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "claimIds_",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getClaimTopics",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "getExecution",
      "outputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        },
        {
          "internalType": "bool",
          "name": "_executed",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_approved",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_key",
          "type": "bytes32"
        }
      ],
      "name": "getKey",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "purposes",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "keyType",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_key",
          "type": "bytes32"
        }
      ],
      "name": "getKeyPurposes",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "_purposes",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_purpose",
          "type": "uint256"
        }
      ],
      "name": "getKeysByPurpose",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "_keys",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_identityRegistry",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_trustedIssuerRegistry",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isController",
      "outputs": [
        {
          "internalType": "bool",
          "name": "allowed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isVerified",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_key",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_purpose",
          "type": "uint256"
        }
      ],
      "name": "keyHasPurpose",
      "outputs": [
        {
          "internalType": "bool",
          "name": "exists",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "relinquishControl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_claimId",
          "type": "bytes32"
        }
      ],
      "name": "removeClaim",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_key",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_purpose",
          "type": "uint256"
        }
      ],
      "name": "removeKey",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "internalType": "enum AttributeType",
          "name": "attributeType",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "value",
          "type": "string"
        }
      ],
      "name": "setAttribute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x5f148a5d268b7b1d18509c1583f00c94f80093da92dd55a918bd5ecfea76773f",
  "receipt": {
    "to": null,
    "from": "0x9508f0Da19eC1C52D9C52611e4433159492bb93b",
    "contractAddress": "0x4C6fE457018d32B9aEc2aA99F655b5aCD7d0D658",
    "transactionIndex": 68,
    "gasUsed": "2175276",
    "logsBloom": "0x
    "blockHash": "0xfe199d6b30c0a23db799259363006f6b3a78f5477cd32fb1ea0e3ab22956f913",
    "transactionHash": "0x5f148a5d268b7b1d18509c1583f00c94f80093da92dd55a918bd5ecfea76773f",
    "logs": [],
    "blockNumber": 26013654,
    "cumulativeGasUsed": "21429212",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "e39248fcba6c46a8a0b49ab62402d196",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"executionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"Approved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"enum AttributeType\",\"name\":\"attributeType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"name\":\"AttributeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"claimId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"topic\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"scheme\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"ClaimAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"claimId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"topic\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"scheme\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"ClaimChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"claimId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"topic\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"scheme\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"ClaimRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"claimRequestId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"topic\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"scheme\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"ClaimRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"controllerAddress\",\"type\":\"address\"}],\"name\":\"ControllerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"controllerAddress\",\"type\":\"address\"}],\"name\":\"ControllerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"executionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Executed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"executionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"ExecutionFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"executionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"ExecutionRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"purpose\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"keyType\",\"type\":\"uint256\"}],\"name\":\"KeyAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"purpose\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"keyType\",\"type\":\"uint256\"}],\"name\":\"KeyRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_topic\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_scheme\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_issuer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"addClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claimRequestId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"addController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_purpose\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_keyType\",\"type\":\"uint256\"}],\"name\":\"addKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_approve\",\"type\":\"bool\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_claimId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_topic\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_scheme\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_issuer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"changeClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"executionId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_key\",\"type\":\"string\"}],\"name\":\"getAttribute\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"enum AttributeType\",\"name\":\"attributeType\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"internalType\":\"struct Attribute\",\"name\":\"_attrib\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_claimId\",\"type\":\"bytes32\"}],\"name\":\"getClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"topic\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"scheme\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_topic\",\"type\":\"uint256\"}],\"name\":\"getClaimIdsByTopic\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"claimIds_\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClaimTopics\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getExecution\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"_executed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_approved\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"getKey\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"purposes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"keyType\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"getKeyPurposes\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_purposes\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_purpose\",\"type\":\"uint256\"}],\"name\":\"getKeysByPurpose\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_keys\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_identityRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_trustedIssuerRegistry\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isController\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isVerified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_purpose\",\"type\":\"uint256\"}],\"name\":\"keyHasPurpose\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relinquishControl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_claimId\",\"type\":\"bytes32\"}],\"name\":\"removeClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_purpose\",\"type\":\"uint256\"}],\"name\":\"removeKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"enum AttributeType\",\"name\":\"attributeType\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"name\":\"setAttribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is used to store the claims of a user\",\"errors\":{\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"addController(address)\":{\"details\":\"Add an address allowed to control this contract\"},\"changeClaim(bytes32,uint256,uint256,address,bytes,bytes,string)\":{\"details\":\"Implementation is minimal to satisfy the interface requirement\"},\"getExecution(uint256)\":{\"details\":\"This function is part of the ERC734 interface but not implemented in this version\"},\"initialize(address,address,address)\":{\"params\":{\"_identityRegistry\":\"the identity registry\",\"_owner\":\"the owner of the contract\",\"_trustedIssuerRegistry\":\"the trusted issuer registry\"}},\"isController(address)\":{\"details\":\"Check if this address is a controller\"},\"isVerified()\":{\"returns\":{\"_0\":\"true if the identity has at least one valid claim, false otherwise\"}},\"relinquishControl()\":{\"details\":\"Remove the sender address from the list of controllers\"},\"supportsInterface(bytes4)\":{\"details\":\"Interface identification is specified in ERC-165. This function  uses less than 30,000 gas.\",\"params\":{\"interfaceId\":\"The interface identifier, as specified in ERC-165\"},\"returns\":{\"_0\":\"`true` if the contract implements `interfaceID` and  `interfaceID` is not 0xffffffff, `false` otherwise\"}}},\"title\":\"Identity\",\"version\":1},\"userdoc\":{\"events\":{\"ControllerAdded(address,address)\":{\"notice\":\"emitted when a controller is added.\"},\"ControllerRemoved(address,address)\":{\"notice\":\"emitted when a controller is removed.\"}},\"kind\":\"user\",\"methods\":{\"addClaim(uint256,uint256,address,bytes,bytes,string)\":{\"notice\":\"add a claim to the identity\"},\"addKey(bytes32,uint256,uint256)\":{\"notice\":\"add a key to the identity\"},\"changeClaim(bytes32,uint256,uint256,address,bytes,bytes,string)\":{\"notice\":\"Change an existing claim\"},\"getAttribute(string)\":{\"notice\":\"get an attribute for a tokenid keyed by string\"},\"getClaim(bytes32)\":{\"notice\":\"get the claim of an identity\"},\"getClaimIdsByTopic(uint256)\":{\"notice\":\"get the claim ids of an identity\"},\"getExecution(uint256)\":{\"notice\":\"Get execution details for a given execution ID\"},\"getKey(bytes32)\":{\"notice\":\"get a key from the identity\"},\"getKeyPurposes(bytes32)\":{\"notice\":\"get the purposes of a key\"},\"getKeysByPurpose(uint256)\":{\"notice\":\"get the keys of a purpose\"},\"initialize(address,address,address)\":{\"notice\":\"initialize the contract\"},\"isVerified()\":{\"notice\":\"Check if this identity has been verified\"},\"keyHasPurpose(bytes32,uint256)\":{\"notice\":\"check if a key has a purpose\"},\"removeKey(bytes32,uint256)\":{\"notice\":\"remove a key from the identity\"},\"supportsInterface(bytes4)\":{\"notice\":\"Query if a contract implements an interface\"}},\"notice\":\"This contract represents an identity of a user\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/identity/Identity.sol\":\"Identity\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":11},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../token/ERC721/IERC721.sol\\\";\\n\",\"keccak256\":\"0xc4d7ebf63eb2f6bf3fee1b6c0ee775efa9f31b4843a5511d07eea147e212932d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721Receiver} from \\\"../token/ERC721/IERC721Receiver.sol\\\";\\n\",\"keccak256\":\"0x12808acc0c2cbc0b9068755711fd79483b4f002e850d25e0e72e735765b6cd99\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0x4ea01544758fd2c7045961904686bfe232d2220a04ecaa2d6b08dac17827febf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC-721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC-721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5dc63d1c6a12fe1b17793e1745877b2fcbe1964c3edfd0a482fac21ca8f18261\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC-721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC-721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xb5afb8e8eebc4d1c6404df2f5e1e6d2c3d24fd01e5dfc855314951ecfaae462d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Errors} from \\\"./Errors.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert Errors.InsufficientBalance(address(this).balance, amount);\\n        }\\n\\n        (bool success, bytes memory returndata) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            _revert(returndata);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {Errors.FailedCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert Errors.InsufficientBalance(address(this).balance, value);\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\\n     * of an unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {Errors.FailedCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            assembly (\\\"memory-safe\\\") {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaaa1d17c1129b127a4a401db2fbd72960e2671474be3d08cae71ccdc42f7624c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of common custom errors used in multiple contracts\\n *\\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\\n * It is recommended to avoid relying on the error API for critical functionality.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Errors {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedCall();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error FailedDeployment();\\n\\n    /**\\n     * @dev A necessary precompile is missing.\\n     */\\n    error MissingPrecompile(address);\\n}\\n\",\"keccak256\":\"0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"contracts/identity/Identity.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IIdentity } from \\\"../interfaces/IIdentity.sol\\\";\\nimport { Controllable } from \\\"../utilities/Controllable.sol\\\";\\nimport { Initializable } from \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport { IAttribute, Attribute, AttributeType } from \\\"../interfaces/IAttribute.sol\\\";\\n\\nimport \\\"../identity/IdentityStorage.sol\\\";\\n\\n/// @title Identity\\n/// @notice This contract represents an identity of a user\\n/// @dev This contract is used to store the claims of a user\\ncontract Identity is IIdentity, Controllable, Initializable {\\n\\t\\n\\tusing IdentitySystemStorage for IdentitySystemStorage.IdentitySystem;\\n\\n\\tmapping(bytes32 => Key) keys;\\n\\tmapping(uint256 => bytes32[]) keysByPurpose;\\n\\n\\tmapping(string => Attribute) attributes;\\n\\tmapping(uint256 => string[]) attributeKeys;\\n\\n\\taddress identityRegistry;\\n\\taddress trustedIssuerRegistry;\\n\\t\\n\\t// Events\\n\\tevent AttributeSet(string key, AttributeType attributeType, string value);\\n\\n\\t// modifier checks if the sender is a trusted issuer\\n\\tmodifier onlyTrustedIssuer() {\\n\\t\\tIdentitySystemStorage.IdentitySystem storage _storage = IdentitySystemStorage.diamondStorage();\\n\\t\\trequire(\\n\\t\\t\\tmsg.sender == address(this) ||\\n\\t\\t\\t_storage.isTrustedIssuer(msg.sender),\\n\\t\\t\\t\\\"Sender is not a trusted issuer\\\"\\n\\t\\t);\\n\\t\\t_;\\n\\t}\\n\\n\\t// modifier checks if the sender is a trusted issuer for a specific claim topic\\n\\tmodifier isTrustedForClaimTopic(uint256 _claimTopic) {\\n\\t\\tIdentitySystemStorage.IdentitySystem storage _storage = IdentitySystemStorage.diamondStorage();\\n\\t\\trequire(_storage.hasTrustedIssuerClaimTopic(msg.sender, _claimTopic), \\\"Issuer not authorized for claim topic\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t// modifier checks if the sender is a trusted issuer for a set of claim topics\\n\\tmodifier isTrustedForClaimTopics( bool[] memory _claimTopics, uint256[] memory _allclaimTopics) {\\n\\t\\tIdentitySystemStorage.IdentitySystem storage _storage = IdentitySystemStorage.diamondStorage();\\n\\t\\tfor (uint256 i = 0; i < _allclaimTopics.length; i++) {\\n\\t\\t\\tif (_claimTopics[i]) {\\n\\t\\t\\t\\trequire(_storage.hasTrustedIssuerClaimTopic(msg.sender, _allclaimTopics[i]), \\\"Issuer not authorized for claim topic\\\");\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t_;\\n\\t}\\n\\n    /// @notice get an attribute for a tokenid keyed by string\\n    function getAttribute(\\n        string memory _key\\n    ) external view returns (Attribute memory _attrib) {\\n\\t\\treturn attributes[_key];\\n\\t}\\n\\n\\tfunction setAttribute(\\n\\t        string memory key,\\n\\t\\t\\tAttributeType attributeType,\\n\\t\\t\\tstring memory value\\n\\t    ) external onlyTrustedIssuer {\\n\\t\\t\\tattributes[key] = Attribute(key, attributeType, value);\\n\\t\\t\\tattributeKeys[uint256(attributeType)].push(key);\\n\\t\\t\\temit AttributeSet(key, attributeType, value);\\n\\t\\t}\\n\\n\\t/**\\n\\t * initialize the contract\\n\\t * @param _owner the owner of the contract\\n\\t * @param _identityRegistry the identity registry\\n\\t * @param _trustedIssuerRegistry the trusted issuer registry\\n\\t */\\n\\tfunction initialize(address _owner, address _identityRegistry, address _trustedIssuerRegistry) external initializer {\\n\\t\\t_addController(_owner);\\n\\t\\tidentityRegistry = _identityRegistry;\\n\\t\\ttrustedIssuerRegistry = _trustedIssuerRegistry;\\n\\t}\\n\\n\\tstruct Key {\\n\\t\\tuint256[] purposes;\\n\\t\\tuint256 keyType;\\n\\t\\tbytes32 key;\\n\\t}\\n\\n\\t/**\\n\\t * @notice add a key to the identity\\n\\t */\\n\\tfunction addKey(bytes32 _key, uint256 _purpose, uint256 _keyType) external override onlyTrustedIssuer {\\n\\t\\trequire(keys[_key].key != _key, \\\"Key already exists\\\");\\n\\n\\t\\tkeys[_key].key = _key;\\n\\t\\tkeys[_key].purposes.push(_purpose);\\n\\t\\tkeys[_key].keyType = _keyType;\\n\\n\\t\\tkeysByPurpose[_purpose].push(_key);\\n\\n\\t\\temit KeyAdded(_key, _purpose, _keyType);\\n\\t}\\n\\n\\t/**\\n\\t * @notice remove a key from the identity\\n\\t */\\n\\tfunction removeKey(bytes32 _key, uint256 _purpose) external override onlyTrustedIssuer {\\n\\t\\trequire(keys[_key].key == _key, \\\"No such key\\\");\\n\\t\\tfor (uint i = 0; i < keys[_key].purposes.length; i++) {\\n\\t\\t\\tif (keys[_key].purposes[i] == _purpose) {\\n\\t\\t\\t\\tdelete keys[_key].purposes[i];\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\temit KeyRemoved(_key, _purpose, keys[_key].keyType);\\n\\n\\t\\tdelete keys[_key];\\n\\t}\\n\\n\\t/**\\n\\t * @notice get a key from the identity\\n\\t */\\n\\tfunction getKey(\\n\\t\\tbytes32 _key\\n\\t) external view override returns (uint256[] memory purposes, uint256 keyType, bytes32 key) {\\n\\t\\treturn (keys[_key].purposes, keys[_key].keyType, keys[_key].key);\\n\\t}\\n\\n\\t/**\\n\\t * @notice get the purposes of a key\\n\\t */\\n\\tfunction getKeyPurposes(bytes32 _key) external view override returns (uint256[] memory _purposes) {\\n\\t\\treturn (keys[_key].purposes);\\n\\t}\\n\\n\\t/**\\n\\t * @notice get the keys of a purpose\\n\\t */\\n\\tfunction getKeysByPurpose(uint256 _purpose) external view override returns (bytes32[] memory _keys) {\\n\\t\\treturn (keysByPurpose[_purpose]);\\n\\t}\\n\\n\\t/**\\n\\t * @notice check if a key has a purpose\\n\\t */\\n\\tfunction _keyHasPurpose(bytes32 _key, uint256 _purpose) internal view returns (bool exists) {\\n\\t\\tif (keys[_key].key == 0) return false;\\n\\t\\tfor (uint i = 0; i < keys[_key].purposes.length; i++) {\\n\\t\\t\\tif (keys[_key].purposes[i] == _purpose) {\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n\\n\\t/**\\n\\t * @notice check if a key has a purpose\\n\\t */\\n\\tfunction keyHasPurpose(bytes32 _key, uint256 _purpose) external view returns (bool exists) {\\n\\t\\treturn _keyHasPurpose(_key, _purpose);\\n\\t}\\n\\n\\tfunction execute(address _to, uint256 _value, bytes calldata _data) external payable onlyTrustedIssuer returns (uint256 executionId) {\\n\\t        require(_keyHasPurpose(keccak256(abi.encodePacked(msg.sender)), 1), \\\"Sender does not have management rights\\\");\\n\\t        \\n\\t        executionId = uint256(keccak256(abi.encodePacked(block.timestamp, msg.sender, _to, _value, _data)));\\n\\t        \\n\\t        (bool success, ) = _to.call{value: _value}(_data);\\n\\t        require(success, \\\"ETH transfer failed\\\"); // Added require statement\\n\\t        if (success) {\\n\\t            emit Executed(executionId, _to, _value, _data);\\n\\t        } else {\\n\\t            emit ExecutionFailed(executionId, _to, _value, _data);\\n\\t        }\\n\\t        \\n\\t        return executionId;\\n\\t    }\\n\\n\\tfunction approve(uint256 _id, bool _approve) external override onlyTrustedIssuer {\\n\\t\\t// require(_keyHasPurpose(keccak256(abi.encodePacked(msg.sender)), 1), \\\"Sender does not have rights\\\");\\n\\t\\t// if (_approve) {\\n\\t\\t// \\temit Approved(_id, true);\\n\\t\\t// } else {\\n\\t\\t// \\temit Approved(_id, false);\\n\\t\\t// }\\n\\t}\\n\\n\\tmapping(bytes32 => Claim) internal claims;\\n\\tbytes32[] internal claimIds;\\n\\n\\tmapping(uint256 => bytes32[]) internal claimsByTopic;\\n\\tbytes32[] internal claimTopics;\\n\\n\\t/**\\n\\t * @notice get the claim of an identity\\n\\t */\\n\\tfunction getClaim(bytes32 _claimId)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\toverride\\n\\t\\treturns (\\n\\t\\t\\tuint256 topic,\\n\\t\\t\\tuint256 scheme,\\n\\t\\t\\taddress issuer,\\n\\t\\t\\tbytes memory signature,\\n\\t\\t\\tbytes memory data,\\n\\t\\t\\tstring memory uri\\n\\t\\t) {\\n\\t\\tClaim storage claim = claims[_claimId];\\n\\t\\treturn (claim.topic, claim.scheme, claim.issuer, claim.signature, claim.data, claim.uri);\\n\\t}\\n\\n\\t/**\\n\\t * @notice get the claim ids of an identity\\n\\t */\\n\\tfunction getClaimIdsByTopic(uint256 _topic) external view override returns (bytes32[] memory claimIds_) {\\n\\t\\tclaimIds_ = claimsByTopic[_topic];\\n\\t}\\n\\n\\t/**\\n\\t * @notice add a claim to the identity\\n\\t */\\n\\tfunction addClaim(\\n\\t\\tuint256 _topic,\\n\\t\\tuint256 _scheme,\\n\\t\\taddress _issuer,\\n\\t\\tbytes memory _signature,\\n\\t\\tbytes memory _data,\\n\\t\\tstring memory _uri\\n\\t) external override isTrustedForClaimTopic(_topic) returns (uint256 claimRequestId) {\\n\\n\\t\\tbytes32 claimId = keccak256(abi.encodePacked(_issuer, _topic));\\n\\n\\t\\tClaim storage claim = claims[claimId];\\n\\t\\tclaim.topic = _topic;\\n\\t\\tclaim.scheme = _scheme;\\n\\t\\tclaim.issuer = _issuer;\\n\\t\\tclaim.signature = _signature;\\n\\t\\tclaim.data = _data;\\n\\t\\tclaim.uri = _uri;\\n\\n\\t\\tclaimsByTopic[_topic].push(claimId);\\n\\t\\tclaimTopics.push(claimId);\\n\\n\\t\\tclaims[claimId] = claim;\\n\\t\\tclaimIds.push(claimId);\\n\\n\\t\\temit ClaimAdded(claimId, _topic, _scheme, _issuer, _signature, _data, _uri);\\n\\n\\t\\treturn _topic;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Change an existing claim\\n\\t * @dev Implementation is minimal to satisfy the interface requirement\\n\\t */\\n\\tfunction changeClaim(\\n\\t\\tbytes32 _claimId,\\n\\t\\tuint256 _topic,\\n\\t\\tuint256 _scheme,\\n\\t\\taddress _issuer,\\n\\t\\tbytes memory _signature,\\n\\t\\tbytes memory _data,\\n\\t\\tstring memory _uri\\n\\t) external override isTrustedForClaimTopic(_topic) returns (bool) {\\n\\t\\t// Verify the claim exists before attempting to change it\\n\\t\\tClaim storage claim = claims[_claimId];\\n\\t\\trequire(claim.issuer != address(0), \\\"Claim does not exist\\\");\\n\\t\\t\\n\\t\\t// Update the claim directly instead of removing and re-adding\\n\\t\\tclaim.topic = _topic;\\n\\t\\tclaim.scheme = _scheme;\\n\\t\\tclaim.issuer = _issuer;\\n\\t\\tclaim.signature = _signature;\\n\\t\\tclaim.data = _data;\\n\\t\\tclaim.uri = _uri;\\n\\t\\t\\n\\t\\temit ClaimChanged(_claimId, _topic, _scheme, _issuer, _signature, _data, _uri);\\n\\t\\t\\n\\t\\treturn true;\\n\\t}\\n\\n\\tfunction removeClaim(bytes32 _claimId) external override onlyTrustedIssuer returns (bool success) {\\n\\t\\tClaim storage claim = claims[_claimId];\\n\\t\\trequire(claim.issuer != address(0), \\\"Claim does not exist\\\");\\n\\t\\tdelete claims[_claimId];\\n\\t\\temit ClaimRemoved(_claimId, claim.topic, claim.scheme, claim.issuer, claim.signature, claim.data, claim.uri);\\n\\t\\treturn true;\\n\\t}\\n\\n\\tfunction supportsInterface(bytes4 interfaceId) external pure override returns (bool) {\\n\\t\\treturn interfaceId == type(IIdentity).interfaceId;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Get execution details for a given execution ID\\n\\t * @dev This function is part of the ERC734 interface but not implemented in this version\\n\\t */\\n\\tfunction getExecution(\\n\\t\\tuint256\\n\\t)\\n\\t\\texternal\\n\\t\\tpure\\n\\t\\toverride\\n\\t\\treturns (address _addr, uint256 _value, bytes memory _data, bool _executed, uint256 _approved)\\n\\t{\\n\\t\\t// Use descriptive variables to match return values\\n\\t\\t_addr = address(0);\\n\\t\\t_value = 0;\\n\\t\\t_data = \\\"\\\";\\n\\t\\t_executed = false;\\n\\t\\t_approved = 0;\\n\\t\\t\\n\\t\\t// Descriptive error message explaining why it's not implemented and what to use instead\\n\\t\\trevert(\\\"IDENTITY_EXECUTION_NOT_IMPLEMENTED: Execution functionality is not supported in this implementation. Use direct function calls instead.\\\");\\n\\t}\\n\\n\\t function getClaimTopics() external view override returns (uint256[] memory) {\\n\\t\\t uint256[] memory _claimTopics = new uint256[](claimTopics.length);\\n\\t\\t for (uint256 i = 0; i < claimTopics.length; i++) {\\n\\t\\t\\t _claimTopics[i] = claims[claimTopics[i]].topic;\\n\\t\\t }\\n\\t\\t return _claimTopics;\\n\\t }\\n\\n\\t /**\\n\\t  * @notice Check if this identity has been verified\\n\\t  * @return true if the identity has at least one valid claim, false otherwise\\n\\t  */\\n\\t function isVerified() external view returns (bool) {\\n\\t  // An identity is considered verified if it has at least one claim\\n\\t  return claimIds.length > 0;\\n\\t }\\n}\\n\",\"keccak256\":\"0x3fd2a5844ddebeae95f95599eb88364a24701c09d23a0541e5950143e0ae8ac9\",\"license\":\"MIT\"},\"contracts/identity/IdentityStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IERC721A.sol\\\";\\nimport {TrustedIssuer} from \\\"../interfaces/ITrustedIssuersRegistry.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC721.sol\\\";\\nimport {IIdentity} from \\\"../interfaces/IIdentity.sol\\\";\\nimport {Claim} from \\\"../interfaces/IClaim.sol\\\";\\nimport \\\"../interfaces/IMarketplace.sol\\\";\\nimport {MultiSaleStorage} from \\\"../interfaces/IMultiSale.sol\\\";\\nimport \\\"../libraries/TradeDealLib.sol\\\";\\nimport \\\"../libraries/FeeDistributorLib.sol\\\"; // Add import for FeeDistributorLib\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nlibrary IdentitySystemStorage {\\n    using IdentitySystemStorage for IdentitySystemStorage.IdentitySystem;\\n    using Address for address;\\nbytes32 internal constant MULTISALE_STORAGE_POSITION =\\n        keccak256(\\\"diamond.nextblock.bitgem.app.MultiSaleStorage.storage\\\");\\n\\n    function multiSaleStorage()\\n        internal\\n        pure\\n        returns (MultiSaleStorage storage ds)\\n    {\\n        bytes32 position = MULTISALE_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    // CollateralStorage struct definition\\n    struct CollateralStorage {\\n        address nft;\\n        address invoicePool;\\n        address vabb;\\n        address usdcPool;\\n        address interest;\\n        uint256 interestRate;\\n        uint256 collateralToInterestRatio;\\n    }\\n\\n    error ApprovalCallerNotOwnerNorApproved();\\n    error ApprovalQueryForNonexistentToken();\\n    error ApproveToCaller();\\n    error ApprovalToCurrentOwner();\\n    error BalanceQueryForZeroAddress();\\n    error MintedQueryForZeroAddress();\\n    error BurnedQueryForZeroAddress();\\n    error AuxQueryForZeroAddress();\\n    error MintToZeroAddress();\\n    error MintZeroQuantity();\\n    error OwnerIndexOutOfBounds();\\n    error OwnerQueryForNonexistentToken();\\n    error TokenIndexOutOfBounds();\\n    error TransferCallerNotOwnerNorApproved();\\n    error TransferFromIncorrectOwner();\\n    error TransferToNonERC721ReceiverImplementer();\\n    error TransferToZeroAddress();\\n    error URIQueryForNonexistentToken();\\n\\n    struct IdentitySystem {\\n        // ERC721A storage\\n        ERC721AContract erc721Contract;\\n        // TrustedIssuer storage\\n        mapping(address => TrustedIssuer) trustedIssuers;\\n        address[] trustedIssuerAddresses;\\n        mapping(address => mapping(uint256 => bool)) trustedIssuerClaimTopics;\\n        mapping(address => uint256[]) trustedIssuerClaimTopicsList;\\n        mapping(uint256 => bool) topics;\\n        uint256[] topicList;\\n        // Identity storage\\n        mapping(address => address) identities;\\n        mapping(address => address) identityOwnersMap;\\n        address[] identityOwners;\\n        // Claim storage\\n        mapping(address => mapping(uint256 => uint256)) claims;\\n        mapping(address => uint256[]) claimList;\\n        // Claim storage\\n        mapping(uint256 => Claim) tokenClaims;\\n        Claim[] tokenClaimList;\\n        // ERC721Permissioned storage\\n        address delegatedMinter;\\n        mapping(uint256 => bool) frozen;\\n\\n        uint256 itemIds;\\n        uint256 itemsSold;\\n        mapping(uint256 => MarketItem) idToMarketItem;\\n        mapping(uint256 => bool) idToListed;\\n        MarketItem[] items;\\n\\n        // Merkle proof tracking for MultiSale\\n        mapping(bytes32 => bool) usedMerkleLeaves;\\n        \\n        // Collateral storage\\n        CollateralStorage collateralStorage;\\n        \\n        // Trade Deal storage\\n        TradeDealLib.TradeDealStorage tradeDealStorage;\\n\\n        // Fee Distributor storage\\n        FeeDistributorLib.FeeDistributorStorage feeDistributorStorage;\\n    }\\n\\n    bytes32 constant IDENTITY_SYSTEM_STORAGE_POSITION =\\n        keccak256(\\\"diamond.identity.system.storage\\\");\\n\\n    function diamondStorage()\\n        internal\\n        pure\\n        returns (IdentitySystemStorage.IdentitySystem storage ds)\\n    {\\n        bytes32 position = IDENTITY_SYSTEM_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    function _tokenExists(\\n        IdentitySystem storage self,\\n        uint256 _tokenId\\n    ) internal view returns (bool) {\\n        return self.erc721Contract._ownerships[_tokenId].addr != address(0);\\n    }\\n\\n    function _getIdentity(\\n        IdentitySystem storage self,\\n        address _userAddress\\n    ) internal view returns (address addr) {\\n        return self.identities[_userAddress];\\n    }\\n\\n    function getIdentityOwner(\\n        IdentitySystem storage self,\\n        address _identity\\n    ) internal view returns (address) {\\n        return self.identityOwnersMap[_identity];\\n    }\\n\\n    function isIdentityAddress(\\n        IdentitySystem storage self,\\n        address _identity\\n    ) internal view returns (bool) {\\n        return self.identityOwnersMap[_identity] != address(0);\\n    }\\n\\n    function isRegistered(\\n        IdentitySystem storage self,\\n        address _userAddress\\n    ) internal view returns (bool) {\\n        return self.identities[_userAddress] != address(0);\\n    }\\n\\n    function isIdentityOwner(\\n        IdentitySystem storage self,\\n        address _userAddress\\n    ) internal view returns (bool) {\\n        return\\n            self.identityOwnersMap[self.identities[_userAddress]] ==\\n            _userAddress;\\n    }\\n\\n    // trusted issuer\\n\\n    function isTrustedIssuer(\\n        IdentitySystem storage self,\\n        address _issuer\\n    ) internal view returns (bool) {\\n        return self.trustedIssuers[_issuer].claimIssuer != address(0);\\n    }\\n\\n    function addTrustedIssuer(\\n        IdentitySystem storage self,\\n        address _trustedIssuer,\\n        uint[] calldata _claimTopics\\n    ) internal {\\n        self.trustedIssuers[_trustedIssuer] = TrustedIssuer({\\n            claimIssuer: _trustedIssuer,\\n            claimTopics: _claimTopics\\n        });\\n        self.trustedIssuerAddresses.push(_trustedIssuer);\\n    }\\n\\n    function removeTrustedIssuer(\\n        IdentitySystem storage self,\\n        address _trustedIssuer\\n    ) internal {\\n        delete self.trustedIssuers[_trustedIssuer];\\n        for (uint256 i = 0; i < self.trustedIssuerAddresses.length; i++) {\\n            if (self.trustedIssuerAddresses[i] == _trustedIssuer) {\\n                self.trustedIssuerAddresses[i] = self.trustedIssuerAddresses[\\n                    self.trustedIssuerAddresses.length - 1\\n                ];\\n                self.trustedIssuerAddresses.pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n    // claim topics\\n\\n    function addClaimTopic(\\n        IdentitySystem storage self,\\n        uint256 _claimTopic\\n    ) internal {\\n        self.topics[_claimTopic] = true;\\n        self.topicList.push(_claimTopic);\\n    }\\n\\n    function removeClaimTopic(\\n        IdentitySystem storage self,\\n        uint256 _claimTopic\\n    ) internal {\\n        delete self.topics[_claimTopic];\\n        for (uint256 i = 0; i < self.topicList.length; i++) {\\n            if (self.topicList[i] == _claimTopic) {\\n                self.topicList[i] = self.topicList[self.topicList.length - 1];\\n                self.topicList.pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n    function getClaimTopics(\\n        IdentitySystem storage self\\n    ) internal view returns (uint256[] memory) {\\n        return self.topicList;\\n    }\\n\\n    function hasClaimTopic(\\n        IdentitySystem storage self,\\n        uint256 _claimTopic\\n    ) internal view returns (bool) {\\n        return self.topics[_claimTopic];\\n    }\\n\\n    // trusted issuer / claim topics\\n\\n    function updateIssuerClaimTopics(\\n        IdentitySystem storage self,\\n        address _trustedIssuer,\\n        uint[] calldata _claimTopics\\n    ) internal {\\n        self.trustedIssuers[_trustedIssuer].claimTopics = _claimTopics;\\n        for (\\n            uint256 i = 0;\\n            i < self.trustedIssuerClaimTopicsList[_trustedIssuer].length;\\n            i++\\n        ) {\\n            delete self.trustedIssuerClaimTopics[_trustedIssuer][\\n                self.trustedIssuerClaimTopicsList[_trustedIssuer][i]\\n            ];\\n        }\\n    }\\n\\n    function addTrustedIssuerClaimTopic(\\n        IdentitySystem storage self,\\n        address _issuer,\\n        uint _claimTopic\\n    ) internal {\\n        self.trustedIssuerClaimTopics[_issuer][_claimTopic] = true;\\n        self.trustedIssuerClaimTopicsList[_issuer].push(_claimTopic);\\n    }\\n\\n    function removeTrustedIssuerClaimTopic(\\n        IdentitySystem storage self,\\n        address _issuer,\\n        uint _claimTopic\\n    ) internal {\\n        delete self.trustedIssuerClaimTopics[_issuer][_claimTopic];\\n        for (\\n            uint256 i = 0;\\n            i < self.trustedIssuerClaimTopicsList[_issuer].length;\\n            i++\\n        ) {\\n            if (self.trustedIssuerClaimTopicsList[_issuer][i] == _claimTopic) {\\n                self.trustedIssuerClaimTopicsList[_issuer][i] = self\\n                    .trustedIssuerClaimTopicsList[_issuer][\\n                        self.trustedIssuerClaimTopicsList[_issuer].length - 1\\n                    ];\\n                self.trustedIssuerClaimTopicsList[_issuer].pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n    modifier isTrustedIssuerForClaimTopic(uint256 _claimTopic) {\\n        IdentitySystem storage _storage = IdentitySystemStorage.diamondStorage();\\n        require(_storage.isTrustedIssuer(msg.sender), \\\"Not a trusted issuer\\\");\\n        require(\\n            _storage.hasTrustedIssuerClaimTopic(msg.sender, _claimTopic),\\n            \\\"Issuer not authorized for claim topic\\\"\\n        );\\n        _;\\n    }\\n\\n    function hasTrustedIssuerClaimTopic(\\n        IdentitySystem storage self,\\n        address _issuer,\\n        uint256 _claimTopic\\n    ) internal view returns (bool) {\\n        if (!self.isTrustedIssuer(_issuer)) return false;\\n        uint256[] storage claimTopics = self\\n            .trustedIssuers[_issuer]\\n            .claimTopics;\\n        for (uint256 i = 0; i < claimTopics.length; i++) {\\n            if (claimTopics[i] == _claimTopic) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function addIdentity(\\n        IdentitySystem storage self,\\n        address _userAddress,\\n        address _identity\\n    ) internal {\\n        self.identities[_userAddress] = _identity;\\n        self.identityOwners.push(_userAddress);\\n        self.identityOwnersMap[_identity] = _userAddress;\\n    }\\n\\n    function removeIdentity(\\n        IdentitySystem storage self,\\n        address _userAddress\\n    ) internal {\\n        address identityAddress = self.identities[_userAddress]; // Capture identity address before deletion\\n        delete self.identities[_userAddress];\\n        for (uint256 i = 0; i < self.identityOwners.length; i++) {\\n            if (self.identityOwners[i] == _userAddress) {\\n                self.identityOwners[i] = self.identityOwners[\\n                    self.identityOwners.length - 1\\n                ];\\n                self.identityOwners.pop();\\n                self.identityOwnersMap[identityAddress] = address(0); // Use captured identityAddress\\n                break;\\n            }\\n        }\\n    }\\n\\n    function hasIdentity(\\n        IdentitySystem storage self,\\n        address _userAddress\\n    ) internal view returns (bool) {\\n        address identity = self.identities[_userAddress];\\n        return identity != address(0);\\n    }\\n\\n    function hasClaims(\\n        IdentitySystem storage self,\\n        address _userAddress\\n    ) internal view returns (bool) {\\n        return self.identities[_userAddress] != address(0);\\n    }\\n\\n    function isVerified(\\n        IdentitySystem storage self,\\n        address _userAddress\\n    ) internal view returns (bool) {\\n        return hasIdentity(self, _userAddress) && hasClaims(self, _userAddress);\\n    }\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(\\n        IdentitySystem storage self,\\n        address msgSender,\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data,\\n        bool safe\\n    ) internal {\\n        // Overflows are incredibly unrealistic.\\n        // balance or numberMinted overflow if current value of either + quantity > 1.8e19 (2**64) - 1\\n        // updatedIndex overflows if _currentIndex + quantity > 1.2e77 (2**256) - 1\\n        uint256 startTokenId = self.erc721Contract._currentIndex;\\n        if (to == address(0)) revert MintToZeroAddress();\\n        if (quantity == 0) revert MintZeroQuantity();\\n\\n        self._beforeTokenTransfer(address(0), to, startTokenId, true);\\n\\n        unchecked {\\n            self.erc721Contract._addressData[to].balance += uint64(quantity);\\n            self.erc721Contract._addressData[to].numberMinted += uint64(quantity);\\n\\n            self.erc721Contract._ownerships[startTokenId].addr = to;\\n            self.erc721Contract._ownerships[startTokenId].startTimestamp = uint64(\\n                block.timestamp\\n            );\\n\\n            uint256 updatedIndex = startTokenId;\\n\\n            // log quantity\\n\\n            for (uint256 i; i < quantity; i++) {\\n                emit Transfer(address(0), to, updatedIndex);\\n                if (\\n                    safe &&\\n                    !_checkOnERC721Received(\\n                        msgSender,\\n                        address(0),\\n                        to,\\n                        updatedIndex,\\n                        _data\\n                    )\\n                ) {\\n                    revert TransferToNonERC721ReceiverImplementer();\\n                }\\n                self.erc721Contract._currentIndex = updatedIndex + 1;\\n                updatedIndex++;\\n                self._addTokenToAllTokensEnumeration(updatedIndex); // Add this line\\n            }\\n        }\\n\\n        _afterTokenTransfer(self, address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(\\n        IdentitySystem storage self,\\n        address owner\\n    ) internal view returns (uint256) {\\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\\n        return uint256(self.erc721Contract._addressData[owner].balance);\\n    }\\n\\n    /**\\n     * Returns the number of tokens minted by `owner`.\\n     */\\n    function _numberMinted(\\n        IdentitySystem storage self,\\n        address owner\\n    ) internal view returns (uint256) {\\n        if (owner == address(0)) revert MintedQueryForZeroAddress();\\n        return uint256(self.erc721Contract._addressData[owner].numberMinted);\\n    }\\n\\n    /**\\n     * Returns the number of tokens burned by or on behalf of `owner`.\\n     */\\n    function _numberBurned(\\n        IdentitySystem storage self,\\n        address owner\\n    ) internal view returns (uint256) {\\n        if (owner == address(0)) revert BurnedQueryForZeroAddress();\\n        return uint256(self.erc721Contract._addressData[owner].numberBurned);\\n    }\\n\\n    /**\\n     * Returns the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\\n     */\\n    function _getAux(\\n        IdentitySystem storage self,\\n        address owner\\n    ) internal view returns (uint64) {\\n        if (owner == address(0)) revert AuxQueryForZeroAddress();\\n        return self.erc721Contract._addressData[owner].aux;\\n    }\\n\\n    /**\\n     * Sets the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\\n     * If there are multiple variables, please pack them into a uint64.\\n     */\\n    function _setAux(\\n        IdentitySystem storage self,\\n        address owner,\\n        uint64 aux\\n    ) internal {\\n        if (owner == address(0)) revert AuxQueryForZeroAddress();\\n        self.erc721Contract._addressData[owner].aux = aux;\\n    }\\n\\n    function ownershipOf(\\n        IdentitySystem storage self,\\n        uint256 tokenId\\n    ) internal view returns (TokenOwnership memory) {\\n        uint256 curr = tokenId;\\n        unchecked {\\n            if (curr < self.erc721Contract._currentIndex) {\\n                TokenOwnership memory ownership = self.erc721Contract._ownerships[curr];\\n                if (!ownership.burned) {\\n                    if (ownership.addr != address(0)) {\\n                        return ownership;\\n                    }\\n                    // Invariant:\\n                    // There will always be an ownership that has an address and is not burned\\n                    // before an ownership that does not have an address and is not burned.\\n                    // Hence, curr will not underflow.\\n                    while (true) {\\n                        curr--;\\n                        ownership = self.erc721Contract._ownerships[curr];\\n                        if (ownership.addr != address(0)) {\\n                            return ownership;\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        revert OwnerQueryForNonexistentToken();\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     */\\n    function _exists(\\n        IdentitySystem storage self,\\n        uint256 tokenId\\n    ) internal view returns (bool) {\\n        return\\n            tokenId < self.erc721Contract._currentIndex && !self.erc721Contract._ownerships[tokenId].burned;\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(\\n        IdentitySystem storage self,\\n        uint256 tokenId\\n    ) internal view returns (address) {\\n        if (!_exists(self, tokenId)) revert ApprovalQueryForNonexistentToken();\\n        return self.erc721Contract._tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(\\n        IdentitySystem storage self,\\n        address sender,\\n        address operator,\\n        bool approved\\n    ) internal {\\n        self.erc721Contract._operatorApprovals[sender][operator] = approved;\\n        emit ApprovalForAll(sender, operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(\\n        IdentitySystem storage self,\\n        address owner,\\n        address operator\\n    ) internal view returns (bool) {\\n        return self.erc721Contract._operatorApprovals[owner][operator];\\n    }\\n\\n    function currentIndex(\\n        IdentitySystem storage self\\n    ) internal view returns (uint256) {\\n        return self.erc721Contract._currentIndex;\\n    }\\n    \\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        IdentitySystem storage self,\\n        address msgSender,\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bool _force\\n    ) internal {\\n        TokenOwnership memory prevOwnership = self.ownershipOf(tokenId);\\n\\n        bool isApprovedOrOwner = (msgSender == prevOwnership.addr ||\\n            self.isApprovedForAll(prevOwnership.addr, msgSender) ||\\n            self.getApproved(tokenId) == msgSender);\\n\\n        if (!isApprovedOrOwner && !_force)\\n            revert TransferCallerNotOwnerNorApproved();\\n        if (prevOwnership.addr != from && !_force) revert TransferFromIncorrectOwner();\\n        if (to == address(0)) revert TransferToZeroAddress();\\n\\n        self._beforeTokenTransfer(from, to, tokenId, _force);\\n\\n        if (from == address(0)) {\\n            self._addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            self._removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            self._removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            self._addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n\\n        // Clear approvals from the previous owner\\n        self._approve(address(0), tokenId, prevOwnership.addr);\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\\n        unchecked {\\n            self.erc721Contract._addressData[from].balance -= 1;\\n            self.erc721Contract._addressData[to].balance += 1;\\n\\n            self.erc721Contract._ownerships[tokenId].addr = to;\\n            self.erc721Contract._ownerships[tokenId].startTimestamp = uint64(block.timestamp);\\n\\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\n            uint256 nextTokenId = tokenId + 1;\\n            if (self.erc721Contract._ownerships[nextTokenId].addr == address(0)) {\\n                // This will suffice for checking _exists(nextTokenId),\\n                // as a burned slot cannot contain the zero address.\\n                if (nextTokenId < self.erc721Contract._currentIndex) {\\n                    self.erc721Contract._ownerships[nextTokenId].addr = prevOwnership.addr;\\n                    self.erc721Contract._ownerships[nextTokenId].startTimestamp = prevOwnership\\n                        .startTimestamp;\\n                }\\n            }\\n        }\\n        \\n        emit Transfer(from, to, tokenId);\\n        _afterTokenTransfer(self, from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(IdentitySystem storage self, address from, uint256 tokenId) internal {\\n        self._beforeTokenTransfer(from, address(0), tokenId, true);\\n\\n        // Clear approvals from the previous owner\\n        _approve(self, address(0), tokenId, from);\\n\\n        self._removeTokenFromOwnerEnumeration(from, tokenId);\\n        self._removeTokenFromAllTokensEnumeration(tokenId);\\n\\n        unchecked {\\n            self.erc721Contract._addressData[from].balance -= 1;\\n            self.erc721Contract._addressData[from].numberBurned += 1;\\n\\n            // Keep track of who burned the token, and the timestamp of burning.\\n            self.erc721Contract._ownerships[tokenId].addr = from;\\n            self.erc721Contract._ownerships[tokenId].startTimestamp = uint64(block.timestamp);\\n            self.erc721Contract._ownerships[tokenId].burned = true;\\n\\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the burn initiator owns it.\\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\n            uint256 nextTokenId = tokenId + 1;\\n            if (self.erc721Contract._ownerships[nextTokenId].addr == address(0)) {\\n                // This will suffice for checking _exists(nextTokenId),\\n                // as a burned slot cannot contain the zero address.\\n                if (nextTokenId < self.erc721Contract._currentIndex) {\\n                    self.erc721Contract._ownerships[nextTokenId].addr = from;\\n                    self.erc721Contract._ownerships[nextTokenId].startTimestamp = self.erc721Contract._ownerships[tokenId].startTimestamp;\\n                }\\n            }\\n        }\\n        emit Transfer(from, address(0), tokenId);\\n        _afterTokenTransfer(self, from, address(0), tokenId, 1);\\n\\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\\n        unchecked {\\n            self.erc721Contract._burnCounter++;\\n        }\\n    }\\n\\n    function exists(IdentitySystem storage self, uint256 tokenId) internal view returns (bool) {\\n        return _exists(self, tokenId);\\n    }\\n\\n\\n    function setTokenClaimTopics(IdentitySystem storage self, uint256 tokenId, uint256[] memory claimTopics) internal {\\n        require(self.exists(tokenId), \\\"ERC721: token does not exist\\\");\\n        for (uint256 i = 0; i < claimTopics.length; i++) {\\n            self.tokenClaims[tokenId] = Claim({\\n                topic: claimTopics[i],\\n                scheme: 0,\\n                issuer: address(this),\\n                signature: \\\"\\\",\\n                data: \\\"\\\",\\n                uri: \\\"\\\"\\n            });\\n        }\\n    }\\n\\n    function getTokenClaimTopics(uint256 tokenId) public view returns (Claim[] memory) {\\n        IdentitySystemStorage.IdentitySystem storage identitySystem = IdentitySystemStorage.diamondStorage();\\n        require(identitySystem._exists(tokenId), \\\"ERC721: token does not exist\\\");\\n        Claim[] memory claimTopics = new Claim[](identitySystem.tokenClaimList.length);\\n        for (uint256 i = 0; i < identitySystem.tokenClaimList.length; i++) {\\n            claimTopics[i] = identitySystem.tokenClaims[tokenId];\\n        }\\n        return claimTopics;\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(\\n        IdentitySystem storage self,\\n        address to,\\n        uint256 tokenId,\\n        address owner\\n    ) internal {\\n        self.erc721Contract._tokenApprovals[tokenId] = to;\\n        emit Approval(owner, to, tokenId);\\n    }\\n\\n    function _ownerOf(\\n        IdentitySystem storage self,\\n        uint256 tokenId\\n    ) internal view returns (address) {\\n        return ownershipOf(self, tokenId).addr;\\n    }\\n\\n    function _isContract(\\n        address account\\n    ) internal view returns (bool) {\\n        // According to EIP-1052, an address is a contract if it has code.\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address msgSender,\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal returns (bool) {\\n        if (_isContract(to)) {\\n            try\\n                IERC721Receiver(to).onERC721Received(\\n                    msgSender,\\n                    from,\\n                    tokenId,\\n                    _data\\n                )\\n            returns (bytes4 retval) {\\n                return retval == IERC721Receiver(to).onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert TransferToNonERC721ReceiverImplementer();\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    function tokensOfOwner(\\n        IdentitySystem storage self,\\n        address owner\\n    ) internal view returns (uint256[] memory) {\\n        require(owner != address(0), \\\"IdentityStorage: owner query for zero address\\\");\\n        \\n        uint256 ownerTokenCount = IERC721(address(this)).balanceOf(owner);\\n        if (ownerTokenCount == 0) {\\n            // Return an empty array\\n            return new uint256[](0);\\n        }\\n        \\n        uint256[] memory tokens = new uint256[](ownerTokenCount);\\n        for (uint256 i = 0; i < ownerTokenCount; i++) {\\n            tokens[i] = self.erc721Contract._ownedTokens[owner][i];\\n        }\\n        \\n        return tokens;\\n    }\\n\\n    function tokenOfOwnerByIndex(\\n        IdentitySystem storage self,\\n        address owner, \\n        uint256 index) internal view returns (uint256) {\\n        require(index < IERC721(address(this)).balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return self.erc721Contract._ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply(\\n        IdentitySystem storage self\\n    ) internal view returns (uint256) {\\n        return self.erc721Contract._allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(\\n        IdentitySystem storage self,\\n        uint256 index\\n    ) internal view returns (uint256) {\\n        require(index < totalSupply(self), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return self.erc721Contract._allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(\\n        IdentitySystem storage self,\\n        address to, \\n        uint256 tokenId) internal {\\n        uint256 length = IERC721(address(this)).balanceOf(to);\\n        self.erc721Contract._ownedTokens[to][length] = tokenId;\\n        self.erc721Contract._ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(\\n        IdentitySystem storage self,\\n        uint256 tokenId) internal {\\n        self.erc721Contract._allTokensIndex[tokenId] = self.erc721Contract._allTokens.length + 1;\\n        self.erc721Contract._allTokens.push(tokenId);\\n    }\\n\\n    function _getIdentityAddress(IdentitySystem storage self, address _address) internal view returns (address) {\\n        address identityAddress = self._getIdentity(_address);\\n        return identityAddress != address(0) ? identityAddress : _address;\\n    }\\n\\n    function _hasClaim(IdentitySystem storage self, address _address, uint256 _claimTopic) internal view returns (bool) {\\n        address idObj = self._getIdentityAddress(_address);\\n        for (uint256 i = 0; i < self.claimList[idObj].length; i++) {\\n            if (self.claimList[idObj][i] == _claimTopic) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(\\n        IdentitySystem storage self,\\n        address from,\\n        uint256 tokenId\\n    ) internal {\\n        // address owner = IERC721(address(this)).ownerOf(tokenId);\\n        address thisAddress = address(this);\\n\\n\\n        // require(owner == thisAddress, \\\"ERC721: transfer of token that is not own\\\");\\n        uint256 lastTokenIndex = IERC721(thisAddress).balanceOf(from) - 1; \\n        uint256 tokenIndex = self.erc721Contract._ownedTokensIndex[tokenId];\\n\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = self.erc721Contract._ownedTokens[from][lastTokenIndex];\\n\\n            self.erc721Contract._ownedTokens[from][tokenIndex] = lastTokenId;\\n            self.erc721Contract._ownedTokensIndex[lastTokenId] = tokenIndex;\\n        }\\n\\n        delete self.erc721Contract._ownedTokensIndex[tokenId];\\n        delete self.erc721Contract._ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(\\n        IdentitySystem storage self,\\n        uint256 tokenId\\n    ) internal {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n        uint256 lastTokenIndex = self.erc721Contract._allTokens.length - 1;\\n        uint256 tokenIndex = self.erc721Contract._allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = self.erc721Contract._allTokens[lastTokenIndex];\\n\\n        self.erc721Contract._allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        self.erc721Contract._allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete self.erc721Contract._allTokensIndex[tokenId];\\n        self.erc721Contract._allTokens.pop();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\\n     * And also called before burning one token.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n\\n    function _beforeTokenTransfer(\\n        IdentitySystem storage self,\\n        address from,\\n        address to,\\n        uint256,\\n        bool force\\n    ) internal view {\\n        // Allow transfers from or to the contract itself without additional checks\\n        if(force) return;\\n\\n        bool hasCommonClaim = false;\\n        uint256 claimType = 1; // Start from claim type 1\\n\\n        while (!hasCommonClaim) {\\n            bool hasFromClaim = self._hasClaim(from, claimType) ||\\n                from == address(this);\\n            if (hasFromClaim && self._hasClaim(to, claimType)) {\\n                hasCommonClaim = true;\\n            } else {\\n                claimType++;\\n                if (claimType == 0) {\\n                    // Overflow, we've checked all possible claim types\\n                    break;\\n                }\\n            }\\n        }\\n\\n        require(\\n            hasCommonClaim,\\n            \\\"ERC721: sender and receiver do not have a common claim\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\\n     * minting.\\n     * And also called after one token has been burned.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` has been minted for `to`.\\n     * - When `to` is zero, `tokenId` has been burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _afterTokenTransfer(\\n        IdentitySystem storage self,\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal {}\\n}\\n\",\"keccak256\":\"0xf50b66d8939e5f8a880230069fbf66473febd2f7b5566201913a9fce3f5b2042\",\"license\":\"MIT\"},\"contracts/interfaces/IAttribute.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.6;\\r\\n\\r\\nenum AttributeType {\\r\\n    Unknown,\\r\\n    String ,\\r\\n    Bytes32,\\r\\n    Uint256,\\r\\n    Uint8,\\r\\n    Uint256Array,\\r\\n    Uint8Array\\r\\n}\\r\\n\\r\\nstruct Attribute {\\r\\n    string key;\\r\\n    AttributeType attributeType;\\r\\n    string value;\\r\\n}\\r\\n\\r\\n// attribute storage\\r\\nstruct AttributeContract {\\r\\n    mapping(uint256 => bool)  burnedIds;\\r\\n    mapping(uint256 => mapping(string => Attribute))  attributes;\\r\\n    mapping(uint256 => string[]) attributeKeys;\\r\\n    mapping(uint256 =>  mapping(string => uint256)) attributeKeysIndexes;\\r\\n}\\r\\n\\r\\n\\r\\n/// @notice a pool of tokens that users can deposit into and withdraw from\\r\\ninterface IAttribute {\\r\\n    /// @notice get an attribute for a tokenid keyed by string\\r\\n    function getAttribute(\\r\\n        uint256 id,\\r\\n        string memory key\\r\\n    ) external view returns (Attribute calldata _attrib);\\r\\n}\\r\\n\",\"keccak256\":\"0x120f4f33b8c5026e047bbff0e64c0316d5f4e2a0822ca49f40d01fba9e9a4aa4\",\"license\":\"MIT\"},\"contracts/interfaces/IClaim.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nstruct Claim {\\n    uint256 topic;\\n    uint256 scheme;\\n    address issuer;\\n    bytes signature;\\n    bytes data;\\n    string uri;\\n}\",\"keccak256\":\"0xb104f9f6208a657a595ec893c71f3393e192919b918f51ebd8727ecdffdaadc8\",\"license\":\"MIT\"},\"contracts/interfaces/IClaimIssuer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IIdentity.sol\\\";\\n\\nstruct Claim {\\n    uint256 topic;\\n    uint256 scheme;\\n    address issuer;\\n    bytes signature;\\n    bytes data;\\n    string uri;\\n    bool isRemoved;\\n}\\n\\ninterface IClaimIssuer is IIdentity {\\n\\n    event ClaimRevoked(bytes indexed signature);\\n\\n    function revokeClaim(bytes32 _claimId, address _identity) external returns(bool);\\n    function revokeClaimBySignature(bytes calldata signature) external;\\n    function isClaimRevoked(bytes calldata _sig) external view returns (bool);\\n    function isClaimValid(\\n        IIdentity _identity,\\n        uint256 claimTopic,\\n        bytes calldata sig,\\n        bytes calldata data)\\n    external view returns (bool);\\n    function getRecoveredAddress(bytes calldata sig, bytes32 dataHash) external pure returns (address);\\n    \\n}\",\"keccak256\":\"0xf94927c44289cafe7442ff3e69f6949f3f97ab784a27b0b5d79f3757da7f1dd8\",\"license\":\"MIT\"},\"contracts/interfaces/ICollateral.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ICollateral {\\n    function mint(address to, uint256 amount) external;\\n    function burn(address from, uint256 amount) external;\\n    function balanceOf(address account) external view returns (uint256);\\n    function totalSupply() external view returns (uint256);\\n    function transfer(address to, uint256 amount) external returns (bool);\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x8afcc7f0c7188519cb18758992c886817e4bd330bc30f887edb72258f080a079\",\"license\":\"MIT\"},\"contracts/interfaces/IControllable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\n/// @notice a controllable contract interface. allows for controllers to perform privileged actions. controllera can other controllers and remove themselves.\\r\\ninterface IControllable {\\r\\n\\r\\n    /// @notice emitted when a controller is added.\\r\\n    event ControllerAdded(\\r\\n        address indexed contractAddress,\\r\\n        address indexed controllerAddress\\r\\n    );\\r\\n\\r\\n    /// @notice emitted when a controller is removed.\\r\\n    event ControllerRemoved(\\r\\n        address indexed contractAddress,\\r\\n        address indexed controllerAddress\\r\\n    );\\r\\n\\r\\n    /// @notice adds a controller.\\r\\n    /// @param controller the controller to add.\\r\\n    function addController(address controller) external;\\r\\n\\r\\n    /// @notice removes a controller.\\r\\n    /// @param controller the address to check\\r\\n    /// @return true if the address is a controller\\r\\n    function isController(address controller) external view returns (bool);\\r\\n\\r\\n    /// @notice remove ourselves from the list of controllers.\\r\\n    function relinquishControl() external;\\r\\n}\\r\\n\",\"keccak256\":\"0x15f5c4f8732a9caffb811a8ebf9aeba41a108e58634607c0700a46a891edf2ec\",\"license\":\"MIT\"},\"contracts/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.6;\\r\\n\\r\\n/******************************************************************************\\\\\\r\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\r\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\r\\n/******************************************************************************/\\r\\n\\r\\ninterface IDiamondCut {\\r\\n    enum FacetCutAction {Add, Replace, Remove}\\r\\n    // Add=0, Replace=1, Remove=2\\r\\n\\r\\n    struct FacetCut {\\r\\n        address facetAddress;\\r\\n        FacetCutAction action;\\r\\n        bytes4[] functionSelectors;\\r\\n    }\\r\\n\\r\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\r\\n    ///         a function with delegatecall\\r\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\r\\n    /// @param _init The address of the contract or facet to execute _calldata\\r\\n    /// @param _calldata A function call, including function selector and arguments\\r\\n    ///                  _calldata is executed with delegatecall on _init\\r\\n    function diamondCut(\\r\\n        FacetCut[] calldata _diamondCut,\\r\\n        address _init,\\r\\n        bytes calldata _calldata\\r\\n    ) external;\\r\\n    \\r\\n    /// @notice Propose an upgrade to be executed after the timelock period\\r\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\r\\n    /// @param _init The address of the contract or facet to execute _calldata\\r\\n    /// @param _calldata A function call, including function selector and arguments\\r\\n    function proposeDiamondCut(\\r\\n        FacetCut[] calldata _diamondCut,\\r\\n        address _init,\\r\\n        bytes calldata _calldata\\r\\n    ) external;\\r\\n    \\r\\n    /// @notice Execute a previously proposed upgrade after the timelock period\\r\\n    function executeDiamondCut() external;\\r\\n    \\r\\n    /// @notice Cancel a proposed upgrade\\r\\n    function cancelDiamondCut() external;\\r\\n\\r\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\r\\n    event DiamondCutProposed(address indexed proposer, uint256 indexed proposalTime, uint256 executionTime);\\r\\n    event DiamondCutCancelled(address indexed canceller);\\r\\n}\\r\\n\",\"keccak256\":\"0x340a039f0dd63cf19bc669551feec28879457d8b741711ef3513168d620f11bc\",\"license\":\"MIT\"},\"contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\ninterface IERC165 {\\n    /// @notice Query if a contract implements an interface\\n    /// @param interfaceId The interface identifier, as specified in ERC-165\\n    /// @dev Interface identification is specified in ERC-165. This function\\n    ///  uses less than 30,000 gas.\\n    /// @return `true` if the contract implements `interfaceID` and\\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x65006dc04090531acd9805684a1f27252b8abb0c1990fcf0ba8db33f50791a0d\",\"license\":\"MIT\"},\"contracts/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\n/// @title ERC-173 Contract Ownership Standard\\n///  Note: the ERC-165 identifier for this interface is 0x7f5828d0\\n/* is ERC165 */\\ninterface IERC173 {\\n    /// @dev This emits when ownership of a contract changes.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Get the address of the owner\\n    /// @return owner_ The address of the owner.\\n    function owner() external view returns (address owner_);\\n\\n    /// @notice Set the address of the new owner of the contract\\n    /// @dev Set _newOwner to address(0) to renounce any ownership.\\n    /// @param _newOwner The address of the new owner of the contract\\n    function transferOwnership(address _newOwner) external;\\n}\\n\",\"keccak256\":\"0x84fe28f479bf96f1819514dd8493ae15955eda0dbabcbb5f24c3c935075a31d4\",\"license\":\"MIT\"},\"contracts/interfaces/IERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\n/* solhint-disable indent */\\n\\n// Compiler will pack this into a single 256bit word.\\nstruct TokenOwnership {\\n    address addr; // The address of the owner.\\n    uint64 startTimestamp; // Keeps track of the start time of ownership with minimal overhead for tokenomics.\\n    bool burned; // Whether the token has been burned.\\n}\\n\\n// Compiler will pack this into a single 256bit word.\\nstruct AddressData {\\n    \\n    uint64 balance; // Realistically, 2**64-1 is more than enough.\\n    uint64 numberMinted; // Keeps track of mint count with minimal overhead for tokenomics.\\n    uint64 numberBurned; // Keeps track of burn count with minimal overhead for tokenomics.\\n    // For miscellaneous variable(s) pertaining to the address\\n    // (e.g. number of whitelist mint slots used).\\n    // If there are multiple variables, please pack them into a uint64.\\n    uint64 aux;\\n}\\n\\nstruct ERC721AContract {\\n    // The tokenId of the next token to be minted.\\n    uint256 _currentIndex;\\n\\n    // The number of tokens burned.\\n    uint256 _burnCounter;\\n\\n    // Token name\\n    string _name;\\n\\n    // Token symbol\\n    string _symbol;\\n\\n    // the base uri\\n    string __uri;\\n\\n    // Mapping from token ID to ownership details\\n    // An empty struct value does not necessarily mean the token is unowned. See ownershipOf implementation for details.\\n    mapping(uint256 => TokenOwnership) _ownerships;\\n\\n    // Mapping owner address to address data\\n    mapping(address => AddressData) _addressData;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) _operatorApprovals;\\n    \\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) _allTokensIndex;\\n}\\n\\n/// @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\nevent Approval(\\n    address indexed owner,\\n    address indexed approved,\\n    uint256 indexed tokenId\\n);\\n\\n/// @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\nevent ApprovalForAll(\\n    address indexed owner,\\n    address indexed operator,\\n    bool approved\\n);\\n\\n/**\\n * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n */\\nevent Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\",\"keccak256\":\"0x440b25b3f001e44dd0effadc01c479e08957c9f432900aea0f6637dea8fb8129\",\"license\":\"MIT\"},\"contracts/interfaces/IERC721Permissioned.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\ninterface IERC721Permissioned {\\n\\n    event TransferForced(address indexed from, address indexed to, uint256 indexed tokenId);\\n    event DelegatedMinterSet(address indexed newDelegatedMinter);\\n    event Mint(address indexed to, uint256 indexed tokenId);\\n    event Burn(address indexed from, uint256 indexed tokenId);\\n    event Freeze(address indexed from, uint256 indexed tokenId);\\n    event FreezeBatch(address indexed from, uint256[] tokenIds);\\n    event Release(address indexed from, uint256 indexed tokenId);\\n\\n    // force a transfer from the user to the to address irrepective of registry\\n    // TODO: Does this mean that the transfer will go even if both addresses aren't\\n    //      registered? If so, this is a security issue.\\n    function forcedTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _amount,\\n        bytes calldata _data\\n    ) external returns (bool);\\n\\n    function setDelegatedMinter(address _newDelegatedMinter) external returns (bool);\\n    function delegatedMinter() external view returns (address);\\n\\n    function mint(address _to, bytes calldata data) external returns (uint256);\\n    function burn(uint256 _tokenId) external returns (bool);\\n\\n    function freeze(uint256 tokenID) external;\\n    function release(uint256 tokenID) external;\\n\\n}\\n\",\"keccak256\":\"0xb3f9c69ddfc01e8fb43822dbab1c213a7719ae09f1edc0bbdd5def2f85dc469d\",\"license\":\"MIT\"},\"contracts/interfaces/IERC734.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport { IERC165 } from \\\"./IERC165.sol\\\";\\n\\ninterface IERC734 is IERC165 {\\n    // events\\n    event KeyAdded(bytes32 indexed key, uint256 indexed purpose, uint256 indexed keyType);\\n    event KeyRemoved(bytes32 indexed key, uint256 indexed purpose, uint256 indexed keyType);\\n    event ExecutionRequested(\\n        uint256 indexed executionId,\\n        address indexed to,\\n        uint256 indexed value,\\n        bytes data\\n    );\\n    event Executed(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\\n    event ExecutionFailed(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\\n    event Approved(uint256 indexed executionId, bool approved);\\n\\n    // functions\\n    // setters\\n    function addKey(bytes32 _key, uint256 _purpose, uint256 _keyType) external;\\n    function removeKey(bytes32 _key, uint256 _purpose) external;\\n    function approve(uint256 _id, bool _approve) external;\\n\\n    // getters\\n    function getKey(bytes32 _key) external view returns(uint256[] memory purposes, uint256 keyType, bytes32 key);\\n    function getKeyPurposes(bytes32 _key) external view returns(uint256[] memory);\\n    function getKeysByPurpose(uint256 _purpose) external view returns(bytes32[] memory);\\n    function getExecution(uint256 _id) external view returns(address to, uint256 value, bytes memory data, bool approved, uint256 executionType);\\n}\\n\",\"keccak256\":\"0xa1bbf071037ac2d697a9134e90ac01a4ca93b206d15283182d8d01f7edda46c0\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IERC735.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\ninterface IERC735 {\\n    event ClaimRequested(uint256 indexed claimRequestId, uint256 indexed topic, uint256 scheme, address indexed issuer, bytes signature, bytes data, string uri);\\n    event ClaimAdded(bytes32 indexed claimId, uint256 indexed topic, uint256 scheme, address indexed issuer, bytes signature, bytes data, string uri);\\n    event ClaimRemoved(bytes32 indexed claimId, uint256 indexed topic, uint256 scheme, address indexed issuer, bytes signature, bytes data, string uri);\\n    event ClaimChanged(bytes32 indexed claimId, uint256 indexed topic, uint256 scheme, address indexed issuer, bytes signature, bytes data, string uri);\\n\\n    function getClaim(bytes32 _claimId) external returns(uint256 topic, uint256 scheme, address issuer, bytes memory signature, bytes memory data, string memory uri);\\n    function getClaimIdsByTopic(uint256 _topic) external returns(bytes32[] memory claimIds);\\n    function addClaim(\\n        uint256 _topic, \\n        uint256 _scheme, \\n        address _issuer, \\n        bytes memory _signature, \\n        bytes memory _data, \\n        string memory _uri) external returns (uint256 claimRequestId);\\n    function changeClaim(bytes32 _claimId, uint256 _topic, uint256 _scheme, address _issuer, bytes memory _signature, bytes memory _data, string memory _uri) external returns (bool success);\\n    function removeClaim(bytes32 _claimId) external returns (bool success);\\n}\\n\\n/*\\nHow IdentityRegistry works:\\n\\n1. User creates an Identity contract\\n2. User calls IdentityRegistry.addIdentity(address _identity, IIdentity identityData)\\n3. IdentityRegistry emits IdentityAdded(address indexed _address, IIdentity identity)\\n4. IdentityRegistry emits ClaimAdded(address indexed identity, uint256 indexed claimTopic, bytes claim)\\n5. IdentityRegistry emits WalletLinked(address indexed walletAddress, bytes32 indexed onchainID)\\n\\n*/\",\"keccak256\":\"0xd9696a4c45abd2c8e0cc7cd8f02bd18612d0dcb0c573c928ab225de624c01d92\",\"license\":\"MIT\"},\"contracts/interfaces/IFeeDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IFeeDistributor\\n * @dev Interface for a fee distribution system.\\n */\\ninterface IFeeDistributor {\\n    /**\\n     * @notice Sets the addresses that will receive fees and their corresponding weights.\\n     * @dev Weights determine the proportion of fees each receiver gets.\\n     * @param _feeReceivers Array of addresses to receive fees.\\n     * @param _feeWeights Array of weights corresponding to each receiver. Must sum to a specific value (e.g., 10000 for basis points).\\n     */\\n    function setFeeReceivers(\\n        address[] calldata _feeReceivers,\\n        uint256[] calldata _feeWeights\\n    ) external;\\n\\n    /**\\n     * @notice Gets the current fee receivers and their weights.\\n     * @return feeReceivers Array of addresses currently set to receive fees.\\n     * @return feeWeights Array of weights corresponding to each receiver.\\n     */\\n    function getFeeReceivers()\\n        external\\n        view\\n        returns (\\n            address[] memory feeReceivers,\\n            uint256[] memory feeWeights\\n        );\\n\\n    /**\\n     * @notice Calculates the adjusted principal amount and individual fee amounts based on the total principal.\\n     * @dev This function is view-only and does not perform any state changes or transfers.\\n     * @param principalAmount The total amount before fee deduction.\\n     * @return adjustedAmount The principal amount remaining after deducting total fees.\\n     * @return feeAmounts Array of individual fee amounts calculated for each receiver.\\n     */\\n    function calculateAmounts(uint256 principalAmount) \\n        external\\n        view\\n        returns (\\n            uint256 adjustedAmount,\\n            uint256[] memory feeAmounts\\n        );\\n\\n    /**\\n     * @notice Distributes a principal amount, sending calculated fees to receivers and the adjusted amount to the principal receiver.\\n     * @dev Requires the contract to hold sufficient funds (e.g., USDC) to perform the transfers.\\n     * @param principalAmountReceiver The address to receive the adjusted principal amount.\\n     * @param _principalAmount The total amount to be distributed.\\n     * @return adjustedAmountReceiver The address that received the adjusted principal amount.\\n     * @return adjustedAmount The adjusted principal amount transferred.\\n     * @return feeReceivers The addresses that received the fee amounts.\\n     * @return feeAmounts The individual fee amounts transferred.\\n     */\\n    function distributeAmounts(\\n        address principalAmountReceiver,\\n        uint256 _principalAmount\\n    ) external returns (\\n        address adjustedAmountReceiver,\\n        uint256 adjustedAmount,\\n        address[] memory feeReceivers,\\n        uint256[] memory feeAmounts\\n    );\\n\\n    /**\\n     * @dev Emitted when the fee receivers and weights are updated.\\n     * @param feeReceivers The new array of fee receiver addresses.\\n     * @param feeWeights The new array of corresponding fee weights.\\n     */\\n    event FeeReceiversSet(\\n        address[] feeReceivers,\\n        uint256[] feeWeights\\n    );\\n\\n    /**\\n     * @dev Emitted when principal and fee amounts are successfully distributed.\\n     * @param principalAmountReceiver The address that received the adjusted principal amount.\\n     * @param principalAmount The original principal amount before fee deduction.\\n     * @param adjustedAmountReceiver The address that received the adjusted principal amount (same as principalAmountReceiver).\\n     * @param adjustedAmount The adjusted principal amount transferred.\\n     * @param feeReceivers The addresses that received the fee amounts.\\n     * @param feeAmounts The individual fee amounts transferred.\\n     */\\n    event AmountsDistributed(\\n        address principalAmountReceiver,\\n        uint256 principalAmount,\\n        address adjustedAmountReceiver,\\n        uint256 adjustedAmount,\\n        address[] feeReceivers,\\n        uint256[] feeAmounts\\n    );\\n\\n    /**\\n     * @dev Emitted when the Fee Distributor is initialized.\\n     * @param distributionToken The address of the ERC20 token set for distribution.\\n     * @param totalWeightBasis The basis used for calculating fee weights (e.g., 10000).\\n     */\\n    event FeeDistributorInitialized(\\n        address indexed distributionToken,\\n        uint256 totalWeightBasis\\n    );\\n}\",\"keccak256\":\"0x39f54a07e1e1a958b94e58c96b1bd287f3b7bedf40f310b1c1bd5e678297524e\",\"license\":\"MIT\"},\"contracts/interfaces/IIdentity.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IERC734 } from \\\"./IERC734.sol\\\";\\nimport { IERC735 } from \\\"./IERC735.sol\\\";\\n\\ninterface IIdentity is IERC734, IERC735 {\\n    function isVerified() external view returns (bool);\\n    function getClaimTopics() external view returns (uint256[] memory);\\n}\",\"keccak256\":\"0x3441179ea9b419fccd103fa16dad25300acb771897159f124aeb816d93552044\",\"license\":\"MIT\"},\"contracts/interfaces/IInterest.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IInterest {\\n    function mint(address to, uint256 amount) external;\\n    function burn(address from, uint256 amount) external;\\n    function balanceOf(address account) external view returns (uint256);\\n    function totalSupply() external view returns (uint256);\\n    function transfer(address to, uint256 amount) external returns (bool);\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n}\",\"keccak256\":\"0xce6ebdd709be14678830dee979477aa31a8979db931234af2a0f003fd5939e78\",\"license\":\"MIT\"},\"contracts/interfaces/IMarketplace.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Structure defining a fee receiver for marketplace sales\\n * @param receiver The address that will receive the fee\\n * @param sharePerMillion The fee share in parts per million (e.g., 10,000 = 1%)\\n */\\nstruct FeeReceiver {\\n    address payable receiver;\\n    uint256 sharePerMillion;\\n}\\n\\nstruct MarketItem {\\n    address nftContract;\\n    uint256 tokenId;\\n    address seller;\\n    address owner;\\n    uint256 price;\\n    bool sold;\\n    address receiver;\\n    address paymentToken;\\n}\\n\\ninterface IMarketplace {\\n\\n    event Bids(uint256 indexed itemId, address bidder, uint256 amount);\\n    event Sales(address indexed tokenAddress, uint256 indexed tokenId, address indexed owner);\\n\\n    event Listings(\\n        address indexed nftContract,\\n        uint256 indexed tokenId,\\n        address seller,\\n        address receiver,\\n        address owner,\\n        uint256 price,\\n        bool sold,\\n        address paymentToken\\n    );\\n    event Delisted(uint256 indexed itemId);\\n\\n    function listItem(\\n        address nftContract,\\n        address payable receiver,\\n        uint256 tokenId,\\n        uint256 price,\\n        bool transferNFT,\\n        address paymentToken\\n    ) external payable;\\n\\n    function delistItem(address nftContract, uint256 itemId) external;\\n\\n    function purchaseItem(address nftContract, uint256 itemId) external payable;\\n\\n    function fetchItems() external view returns (MarketItem[] memory);\\n\\n    function fetchItem(address nftContract, uint256 tokenId) external view returns (MarketItem memory);\\n\\n    function getMarketplaceFeeReceivers() external view returns (FeeReceiver[] memory);\\n}\\n\",\"keccak256\":\"0xb28f5b53929ab41630e8f9447f98e1b8f60d488b13f8b1605beb2a0c9874dd4c\",\"license\":\"MIT\"},\"contracts/interfaces/IMultiSale.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { TokenType } from \\\"./IToken.sol\\\";\\nimport { VariablePriceContract } from \\\"./IVariablePrice.sol\\\";\\nimport { Attribute } from \\\"./IAttribute.sol\\\";\\n\\n/// @Nnotice the payment type for the token\\nenum PaymentType {\\n    Ether,\\n    ERC20\\n}\\n\\n/// @notice the multisale purchase\\nstruct MultiSalePurchase {\\n    uint256 multiSaleId;\\n    address purchaser;\\n    address receiver;\\n    uint256 quantity;\\n}\\n    \\n/// @notice the merkle proof for the token sale\\nstruct MultiSaleProof {\\n    uint256 leaf;\\n    uint256 total;\\n    bytes32[] merkleProof;\\n    bytes data;\\n}\\n\\nenum PaymentMethod {\\n    Native, // Payment with the native currency (e.g., ETH)\\n    ERC20 // Payment with an ERC20 token\\n}\\n\\n/// @notice the settings for the token sale,\\nstruct MultiSaleSettings {\\n\\n    TokenType tokenType; // the type of token being sold\\n    address token; // the token being sold\\n    uint256 tokenHash; // the token hash being sold. set to 0 to autocreate hash\\n\\n    uint256 whitelistHash; // the whitelist hash. set to 0 for owhitelist\\n    bool whitelistOnly; // if true, only whitelisted addresses can purchase\\n\\n    PaymentMethod paymentMethod; // New field to indicate payment method\\n    address paymentToken; // New field to store the ERC20 token address for payments\\n\\n    // owner and payee\\n    address owner; // the owner of the contract\\n    address payee; // the payee of the co ntract\\n\\n    string symbol; // the symbol of the token\\n    string name; // the name of the token\\n    string description; // the description of the token\\n\\n    // open state\\n    bool openState; // open or closed\\n    uint256 startTime; // block number when the sale starts\\n    uint256 endTime; // block number when the sale ends\\n\\n    // quantitiesp\\n    uint256 maxQuantity; // max number of tokens that can be sold\\n    uint256 maxQuantityPerSale; // max number of tokens that can be sold per sale\\n    uint256 minQuantityPerSale; // min number of tokens that can be sold per sale\\n    uint256 maxQuantityPerAccount; // max number of tokens that can be sold per account\\n\\n    PaymentType paymentType; // the type of payment that is being used\\n    address tokenAddress; // the address of the payment token, if payment type is TOKEN\\n\\n    uint256 nextSaleId; // the next sale id\\n    VariablePriceContract price; // the variable prices\\n\\n}\\n\\n/// @notice the multi sale contract\\nstruct MultiSaleContract {\\n    MultiSaleSettings settings;\\n\\n    uint256 nonce;\\n    uint256 totalPurchased;\\n        \\n    mapping(address => uint256) purchased;\\n    mapping(uint256 => uint256) _redeemedData;\\n    mapping(address => uint256) _redeemedDataQuantities;\\n    mapping(address => uint256) _totalDataQuantities;\\n    mapping(address => uint256) _accountQuantities;\\n}\\n\\n/// @notice the multi sale storage\\nstruct MultiSaleStorage {\\n    // the nonce\\n    uint256 tsnonce;\\n    mapping(uint256 => MultiSaleContract) _tokenSales; // token sale settings\\n    uint256[] _tokenSaleIds;\\n}\\n\\n\\ninterface IMultiSale {\\n\\n    // @notice emitted when a token sale is created\\n    event MultiSaleCreated(uint256 indexed tokenSaleId, MultiSaleSettings settings);\\n\\n    /// @notice emitted when a token is opened\\n    event MultiSaleOpen (uint256 indexed tokenSaleId, MultiSaleSettings tokenSale);\\n\\n    /// @notice emitted when a token is opened\\n    event MultiSaleClosed (uint256 indexed tokenSaleId);\\n\\n    /// @notice emitted when a token is opened\\n    event MultiSaleSold (uint256 indexed tokenSaleId, address indexed purchaser, uint256[] tokenIds, bytes data);\\n\\n    // token settings were updated\\n    event MultiSaleUpdated (uint256 indexed tokenSaleId, MultiSaleSettings tokenSale );\\n\\n}\\n\",\"keccak256\":\"0xeb1a19c763e9231081622d432eb5ee0e44f5e233b1c1b796d2be5830311553d5\",\"license\":\"MIT\"},\"contracts/interfaces/IToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\n/// @notice the definition for a token.\\r\\nstruct TokenDefinition {\\r\\n    address token;\\r\\n    string name;\\r\\n    string symbol;\\r\\n    string description;\\r\\n    uint256 totalSupply;\\r\\n    string imageName;\\r\\n    string[] imagePalette;\\r\\n    string externalUrl;\\r\\n}\\r\\n\\r\\nenum TokenType {\\r\\n    ERC20,\\r\\n    ERC721,\\r\\n    ERC1155\\r\\n}\",\"keccak256\":\"0x994fc2b4019b0b7faf4fe5cd7e39934be73edb915c7205e3285c58cd4db3516b\",\"license\":\"MIT\"},\"contracts/interfaces/ITrustedIssuersRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IClaimIssuer } from \\\"./IClaimIssuer.sol\\\";\\n\\nstruct TrustedIssuer {\\n    address claimIssuer;\\n    uint[] claimTopics;\\n}\\n\\ninterface ITrustedIssuersRegistry {\\n\\n    // events\\n    event TrustedIssuerAdded(address indexed trustedIssuer, uint[] claimTopics);\\n    event TrustedIssuerRemoved(address indexed trustedIssuer);\\n    event ClaimTopicsUpdated(address indexed trustedIssuer, uint[] claimTopics);\\n\\n    // functions\\n    // setters\\n    function addTrustedIssuer(address _trustedIssuer, uint[] calldata _claimTopics) external;\\n    function removeTrustedIssuer(address _trustedIssuer) external;\\n    function updateIssuerClaimTopics(address _trustedIssuer, uint[] calldata _claimTopics) external;\\n\\n    // getters\\n    function getTrustedIssuer(address issuerAddress) external view returns (TrustedIssuer memory);\\n    function getTrustedIssuers() external view returns (TrustedIssuer[] memory);\\n    function isTrustedIssuer(address _issuer) external view returns(bool);\\n    function getTrustedIssuerClaimTopics(address _trustedIssuer) external view returns(uint[] memory);\\n    function hasTrustedIssuerClaimTopic(address _issuer, uint _claimTopic) external view returns(bool);\\n\\n}\",\"keccak256\":\"0xe614225074d3e906995b5730a4d70e0a97aeba0140ab4391e1e5968e8dca7a5d\",\"license\":\"MIT\"},\"contracts/interfaces/IUSDCPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IUSDCPool {\\n    function deposit(uint256 amount) external;\\n    function withdraw(uint256 amount) external;\\n    function getBalance() external view returns (uint256);\\n    function distributeInterest() external;\\n}\",\"keccak256\":\"0x3d9b699c7f3efbfc17865e076d0cab7a65243384876bda78cf19595256623b0c\",\"license\":\"MIT\"},\"contracts/interfaces/IVariablePrice.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\n\\n/// @notice DIctates how the price of the token is increased post every sale\\nenum PriceModifier {\\n    None,\\n    Fixed,\\n    Exponential,\\n    InverseLog\\n}\\n\\nstruct VariablePriceContract {\\n    // the price of the token\\n    uint256 price;\\n        // how the price is modified\\n    PriceModifier priceModifier;\\n    // only used if priceModifier is EXPONENTIAL or INVERSELOG or FIXED\\n    uint256 priceModifierFactor;\\n    // max price for the token\\n    uint256 maxPrice;\\n}\\n\\nstruct VariablePriceStorage {\\n    // the price of the token\\n    VariablePriceContract variablePrices;\\n}\\n\\n/// @notice common struct definitions for tokens\\ninterface IVariablePrice {\\n    /// @notice get the increased price of the token\\n    function getIncreasedPrice() external view returns (uint256);\\n\\n    /// @notice get the increased price of the token\\n    function getTokenPrice() external view returns (VariablePriceContract memory);\\n}\\n\",\"keccak256\":\"0x2adc5e468273b7c73536ee642f8be345fb3a1f9f713b3370d7d283a0d28d2b7d\",\"license\":\"MIT\"},\"contracts/libraries/AttributeLib.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC721.sol\\\";\\n\\nimport \\\"../interfaces/IAttribute.sol\\\";\\n\\nstruct AttributeStorage {\\n    AttributeContract attributes;\\n}\\n\\nlibrary AttributeLib {\\n    event AttributeSet(address indexed tokenAddress, uint256 tokenId, Attribute attribute);\\n    event AttributeRemoved(address indexed tokenAddress, uint256 tokenId, string attributeKey);\\n\\n    bytes32 internal constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.nextblock.bitgem.app.AttributeStorage.storage\\\");\\n\\n    function attributeStorage() internal pure returns (AttributeStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    /// @notice set an attribute for a tokenid keyed by string\\n    function _getAttribute(\\n        AttributeContract storage self,\\n        uint256 tokenId,\\n        string memory key\\n    ) internal view returns (Attribute memory) {\\n        require(self.burnedIds[tokenId] == false, \\\"Token has been burned\\\");\\n        return self.attributes[tokenId][key];\\n    }\\n\\n    /// @notice get a list of keys of attributes assigned to this tokenid\\n    function _getAttributeValues(\\n        uint256 id\\n    ) internal view returns (string[] memory) {\\n        AttributeContract storage ct = AttributeLib.attributeStorage().attributes;\\n        string[] memory keys = ct.attributeKeys[id];\\n        string[] memory values = new string[](keys.length);\\n        uint256 keysLength = keys.length;\\n        for (uint256 i = 0; i < keysLength; i++) {\\n            values[i] = ct.attributes[id][keys[i]].value;\\n        }\\n        return values;\\n    }\\n    \\n    /// @notice set an attribute to a tokenid keyed by string\\n    function _setAttribute(\\n        AttributeContract storage self,\\n        uint256 tokenId,\\n        Attribute memory attribute\\n    ) internal {\\n        require(self.burnedIds[tokenId] == false, \\\"Token has been burned\\\");\\n        if (self.attributeKeysIndexes[tokenId][attribute.key] == 0 \\n            && bytes(self.attributes[tokenId][attribute.key].value).length == 0) {\\n            self.attributeKeys[tokenId].push(attribute.key);\\n            self.attributeKeysIndexes[tokenId][attribute.key] = self.attributeKeys[tokenId].length - 1;\\n        }\\n        self.attributes[tokenId][attribute.key] = attribute;\\n    }\\n    \\n    /// @notice set multiple  attributes for the token\\n    function _setAttributes(\\n        AttributeContract storage self,\\n        uint256 tokenId, \\n        Attribute[] memory _attributes)\\n        internal\\n    {\\n        require(self.burnedIds[tokenId] == false, \\\"Token has been burned\\\");\\n        uint256 attributesLength = _attributes.length;\\n        for (uint256 i = 0; i < attributesLength; i++) {\\n            _setAttribute(self, tokenId, _attributes[i]);\\n        }\\n    }\\n\\n    /// @notice get a list of keys of attributes assigned to this tokenid\\n    function _getAttributeKeys(\\n        AttributeContract storage self,\\n        uint256 tokenId\\n    ) internal view returns (string[] memory) {\\n        require(self.burnedIds[tokenId] == false, \\\"Token has been burned\\\");\\n        return self.attributeKeys[tokenId];\\n    }\\n\\n    /// @notice remove the attribute for a tokenid keyed by string\\n    function _removeAttribute(\\n        AttributeContract storage self,\\n        uint256 tokenId,\\n        string memory key\\n    ) internal {\\n        require(self.burnedIds[tokenId] == false, \\\"Token has been burned\\\");\\n        delete self.attributes[tokenId][key];\\n        uint256 ndx = self.attributeKeysIndexes[tokenId][key];\\n        for (uint256 i = ndx; i < self.attributeKeys[tokenId].length - 1; i++) {\\n            self.attributeKeys[tokenId][i] = self.attributeKeys[tokenId][i + 1];\\n            self.attributeKeysIndexes[tokenId][self.attributeKeys[tokenId][i]] = i;\\n        }\\n        delete self.attributeKeys[tokenId][self.attributeKeys[tokenId].length - 1];\\n        emit AttributeRemoved(address(this), tokenId, key);\\n    }\\n\\n    // @notice set multiple attributes for the token\\n    function _burn(\\n        AttributeContract storage self,\\n        uint256 tokenId)\\n        internal\\n    {\\n        self.burnedIds[tokenId] = true;\\n    }\\n}\\n\",\"keccak256\":\"0xf17d7da2d3938a57bf46cd52df9153bec3151df14be018c65dde609cc1b1ad7a\",\"license\":\"MIT\"},\"contracts/libraries/FeeDistributorLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../identity/IdentityStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\nlibrary FeeDistributorLib {\\n    using SafeERC20 for IERC20;\\n\\n    // Storage struct for Fee Distributor settings\\n    struct FeeDistributorStorage {\\n        address[] feeReceivers;\\n        uint256[] feeWeights;\\n        uint256 totalWeightBasis; // e.g., 10000 for basis points\\n        address distributionToken; // Address of the ERC20 token to distribute (e.g., USDC)\\n    }\\n// --- Logic Functions (Implementations TBD) ---\\n    // --- Logic Functions (Implementations TBD) ---\\n\\n    /**\\n     * @notice Initializes the Fee Distributor settings. Should only be called once.\\n     * @param ds Diamond storage pointer.\\n     * @param _distributionToken Address of the ERC20 token to be distributed.\\n     * @param _totalWeightBasis The basis for fee weights (e.g., 10000 for basis points).\\n     */\\n    function _initializeFeeDistributor(\\n        IdentitySystemStorage.IdentitySystem storage ds,\\n        address _distributionToken,\\n        uint256 _totalWeightBasis\\n    ) internal {\\n        FeeDistributorStorage storage fds = ds.feeDistributorStorage;\\n        require(fds.distributionToken == address(0), \\\"FeeDistributor: Already initialized\\\");\\n        // Allow address(0) for native currency distribution\\n        require(_totalWeightBasis > 0, \\\"FeeDistributor: Basis must be positive\\\");\\n\\n        fds.distributionToken = _distributionToken;\\n        fds.totalWeightBasis = _totalWeightBasis;\\n    }\\n\\n    /**\\n     * @notice Sets the fee receivers and their weights.\\n     * @param ds Diamond storage pointer.\\n     * @param _feeReceivers Array of addresses to receive fees.\\n     * @param _feeWeights Array of weights corresponding to each receiver.\\n     */\\n    function _setFeeReceivers(\\n        IdentitySystemStorage.IdentitySystem storage ds,\\n        address[] memory _feeReceivers,\\n        uint256[] memory _feeWeights\\n    ) internal returns (address[] memory, uint256[] memory) {\\n        FeeDistributorStorage storage fds = ds.feeDistributorStorage;\\n        require(_feeReceivers.length == _feeWeights.length, \\\"FeeDistributor: Array lengths mismatch\\\");\\n        require(_feeReceivers.length > 0, \\\"FeeDistributor: Must provide at least one receiver\\\");\\n\\n        uint256 totalWeightSum = 0;\\n        for (uint i = 0; i < _feeReceivers.length; i++) {\\n            require(_feeReceivers[i] != address(0), \\\"FeeDistributor: Invalid receiver address\\\");\\n            require(_feeWeights[i] > 0, \\\"FeeDistributor: Weight must be positive\\\");\\n            totalWeightSum += _feeWeights[i];\\n        }\\n        require(totalWeightSum == fds.totalWeightBasis, \\\"FeeDistributor: Weights must sum to basis\\\");\\n\\n        fds.feeReceivers = _feeReceivers;\\n        fds.feeWeights = _feeWeights;\\n\\n        return (_feeReceivers, _feeWeights); // Return for event emission in facet\\n    }\\n\\n    /**\\n     * @notice Gets the current fee receivers and their weights.\\n     * @param ds Diamond storage pointer.\\n     * @return feeReceivers_ Array of addresses currently set to receive fees.\\n     * @return feeWeights_ Array of weights corresponding to each receiver.\\n     */\\n    function _getFeeReceivers(\\n        IdentitySystemStorage.IdentitySystem storage ds\\n    )\\n        internal\\n        view\\n        returns (\\n            address[] memory feeReceivers_,\\n            uint256[] memory feeWeights_\\n        )\\n    {\\n        FeeDistributorStorage storage fds = ds.feeDistributorStorage;\\n        return (fds.feeReceivers, fds.feeWeights);\\n    }\\n\\n    /**\\n     * @notice Calculates the adjusted principal amount and individual fee amounts.\\n     * @param ds Diamond storage pointer.\\n     * @param principalAmount The total amount before fee deduction.\\n     * @return adjustedAmount The principal amount remaining after deducting total fees.\\n     * @return feeAmounts Array of individual fee amounts calculated for each receiver.\\n     */\\n    function _calculateAmounts(\\n        IdentitySystemStorage.IdentitySystem storage ds,\\n        uint256 principalAmount\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256 adjustedAmount,\\n            uint256[] memory feeAmounts\\n        )\\n    {\\n        FeeDistributorStorage storage fds = ds.feeDistributorStorage;\\n        address[] memory receivers = fds.feeReceivers;\\n        uint256 numReceivers = receivers.length;\\n\\n        if (numReceivers == 0) {\\n            // No fee receivers configured, return full principal (pass-through)\\n            return (principalAmount, new uint256[](0));\\n        }\\n\\n        // If fee receivers are configured, then the basis must be initialized.\\n        require(fds.totalWeightBasis > 0, \\\"FeeDistributor: Not initialized or invalid basis\\\");\\n        uint256[] memory weights = fds.feeWeights; // Get weights only if needed\\n\\n        feeAmounts = new uint256[](numReceivers);\\n        uint256 totalFeeAmount = 0;\\n\\n        for (uint i = 0; i < numReceivers; i++) {\\n            // Calculate fee: (principalAmount * weight) / basis\\n            // Protect against overflow before division\\n            uint256 fee = (principalAmount * weights[i]) / fds.totalWeightBasis;\\n            feeAmounts[i] = fee;\\n            totalFeeAmount += fee;\\n        }\\n\\n        require(totalFeeAmount <= principalAmount, \\\"FeeDistributor: Total fees exceed principal\\\");\\n        adjustedAmount = principalAmount - totalFeeAmount;\\n\\n        return (adjustedAmount, feeAmounts);\\n    }\\n\\n    /**\\n     * @notice Distributes a principal amount after deducting fees.\\n     * @dev Can distribute either native currency (if distributionToken is address(0)) or a specified ERC20 token.\\n     * @dev Assumes the contract holds sufficient balance of the currency/token to distribute.\\n     * @param ds Diamond storage pointer.\\n     * @param self The address of the calling contract (the diamond) for native transfers.\\n     * @param principalAmountReceiver The address to receive the adjusted principal amount.\\n     * @param _principalAmount The total amount to be distributed.\\n     * @return adjustedAmountReceiver_ The address that received the adjusted principal amount.\\n     * @return adjustedAmount_ The adjusted principal amount transferred.\\n     * @return feeReceivers_ The addresses that received the fee amounts.\\n     * @return feeAmounts_ The individual fee amounts transferred.\\n     */\\n    function _distributeAmounts(\\n        IdentitySystemStorage.IdentitySystem storage ds,\\n        address self, // Address of the diamond/calling contract\\n        address principalAmountReceiver,\\n        uint256 _principalAmount\\n    ) internal returns (\\n        address adjustedAmountReceiver_,\\n        uint256 adjustedAmount_,\\n        address[] memory feeReceivers_,\\n        uint256[] memory feeAmounts_\\n    ) {\\n        FeeDistributorStorage storage fds = ds.feeDistributorStorage;\\n        // No require for token != address(0) anymore, as address(0) signifies native currency\\n        require(principalAmountReceiver != address(0), \\\"FeeDistributor: Invalid principal receiver\\\");\\n\\n        // Calculate amounts\\n        (uint256 adjustedAmount, uint256[] memory feeAmounts) = _calculateAmounts(ds, _principalAmount);\\n\\n        address[] memory receivers = fds.feeReceivers;\\n        bool isNative = fds.distributionToken == address(0);\\n\\n        if (isNative) {\\n            // Native currency distribution\\n            require(self.balance >= _principalAmount, \\\"FeeDistributor: Insufficient native balance\\\");\\n            // Transfer fees\\n            for (uint i = 0; i < receivers.length; i++) {\\n                if (feeAmounts[i] > 0) {\\n                    (bool success, ) = payable(receivers[i]).call{value: feeAmounts[i]}(\\\"\\\");\\n                    require(success, \\\"FeeDistributor: Native fee transfer failed\\\");\\n                }\\n            }\\n            // Transfer adjusted principal amount\\n            if (adjustedAmount > 0) {\\n                (bool success, ) = payable(principalAmountReceiver).call{value: adjustedAmount}(\\\"\\\");\\n                require(success, \\\"FeeDistributor: Native principal transfer failed\\\");\\n            }\\n        } else {\\n            // ERC20 token distribution\\n            IERC20 token = IERC20(fds.distributionToken);\\n            require(token.balanceOf(self) >= _principalAmount, \\\"FeeDistributor: Insufficient token balance\\\");\\n            // Transfer fees\\n            for (uint i = 0; i < receivers.length; i++) {\\n                if (feeAmounts[i] > 0) {\\n                    token.safeTransfer(receivers[i], feeAmounts[i]);\\n                }\\n            }\\n            // Transfer adjusted principal amount\\n            if (adjustedAmount > 0) {\\n                token.safeTransfer(principalAmountReceiver, adjustedAmount);\\n            }\\n        }\\n\\n        // Return values for event emission\\n        return (principalAmountReceiver, adjustedAmount, receivers, feeAmounts);\\n    }\\n\\n}\",\"keccak256\":\"0x44d1e392cbb9b8e3315b4d213b26f4ae05cabf43528d5b42d3e8f6dc08a606b4\",\"license\":\"MIT\"},\"contracts/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\nimport \\\"../interfaces/IERC173.sol\\\"; // for IERC173 interface\\nimport \\\"../interfaces/IDiamondCut.sol\\\";\\n\\n// Remember to add the loupe functions from DiamondLoupeFacet to the diamond.\\n// The loupe functions are required by the EIP2535 Diamonds standard\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    // Upgrade proposal struct for timelock functionality\\n    struct UpgradeProposal {\\n        IDiamondCut.FacetCut[] diamondCut;\\n        address initAddress;\\n        bytes initCalldata;\\n        uint256 proposalTime;\\n        bool exists;\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n        // Timelock for upgrades (in seconds)\\n        uint256 upgradeTimelock;\\n        // Storage for the current upgrade proposal\\n        UpgradeProposal upgradeProposal;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit IERC173.OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n    }\\n\\n    // Timelock constants\\n    uint256 constant DEFAULT_UPGRADE_TIMELOCK = 2 days;\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else {\\n                revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit IDiamondCut.DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);            \\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress != _facetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n            removeFunction(ds, oldFacetAddress, selector);\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(_facetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            removeFunction(ds, oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\n        enforceHasContractCode(_facetAddress, \\\"LibDiamondCut: New facet has no code\\\");\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n        ds.facetAddresses.push(_facetAddress);\\n    }    \\n\\n\\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n        // an immutable function is a function defined directly in a diamond\\n        require(_facetAddress != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            require(_calldata.length == 0, \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\");\\n        } else {\\n            require(_calldata.length > 0, \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\");\\n            if (_init != address(this)) {\\n                enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n\\n    // Initialize timelock settings for upgrade proposals\\n    function initializeUpgradeTimelock(uint256 _timelock) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        require(ds.upgradeTimelock == 0, \\\"LibDiamond: Timelock already initialized\\\");\\n        ds.upgradeTimelock = _timelock > 0 ? _timelock : DEFAULT_UPGRADE_TIMELOCK;\\n    }\\n\\n    // Propose a diamond cut to be executed after the timelock\\n    function proposeDiamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        require(!ds.upgradeProposal.exists, \\\"LibDiamond: Upgrade already proposed\\\");\\n        require(ds.upgradeTimelock > 0, \\\"LibDiamond: Timelock not initialized\\\");\\n        \\n        // Create a deep copy of the diamond cut to store in the proposal\\n        IDiamondCut.FacetCut[] memory diamondCutCopy = new IDiamondCut.FacetCut[](_diamondCut.length);\\n        for (uint256 i = 0; i < _diamondCut.length; i++) {\\n            diamondCutCopy[i] = _diamondCut[i];\\n            \\n            // Deep copy the function selectors array\\n            bytes4[] memory selectors = new bytes4[](_diamondCut[i].functionSelectors.length);\\n            for (uint256 j = 0; j < _diamondCut[i].functionSelectors.length; j++) {\\n                selectors[j] = _diamondCut[i].functionSelectors[j];\\n            }\\n            diamondCutCopy[i].functionSelectors = selectors;\\n        }\\n        \\n        // Store the proposal\\n        // Create empty array in storage first\\n        delete ds.upgradeProposal.diamondCut;\\n        \\n        // Manually copy each element and its nested arrays to storage\\n        for (uint256 i = 0; i < _diamondCut.length; i++) {\\n            // Create a new struct in storage by pushing an empty element first\\n            ds.upgradeProposal.diamondCut.push();\\n            \\n            // Now set the values for this element's fields\\n            ds.upgradeProposal.diamondCut[i].facetAddress = _diamondCut[i].facetAddress;\\n            ds.upgradeProposal.diamondCut[i].action = _diamondCut[i].action;\\n            \\n            // For the selectors array, we need to handle it separately\\n            // Clear any existing selectors to ensure clean state\\n            delete ds.upgradeProposal.diamondCut[i].functionSelectors;\\n            \\n            // Copy each selector individually\\n            for (uint256 j = 0; j < _diamondCut[i].functionSelectors.length; j++) {\\n                ds.upgradeProposal.diamondCut[i].functionSelectors.push(_diamondCut[i].functionSelectors[j]);\\n            }\\n        }\\n        ds.upgradeProposal.initAddress = _init;\\n        ds.upgradeProposal.initCalldata = _calldata;\\n        ds.upgradeProposal.proposalTime = block.timestamp;\\n        ds.upgradeProposal.exists = true;\\n        \\n        emit IDiamondCut.DiamondCutProposed(msg.sender, block.timestamp, block.timestamp + ds.upgradeTimelock);\\n    }\\n    \\n    // Execute a proposed diamond cut after the timelock period\\n    function executeDiamondCut() internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        require(ds.upgradeProposal.exists, \\\"LibDiamond: No upgrade proposal exists\\\");\\n        require(\\n            block.timestamp >= ds.upgradeProposal.proposalTime + ds.upgradeTimelock,\\n            \\\"LibDiamond: Timelock period not elapsed\\\"\\n        );\\n        \\n        // Execute the diamond cut\\n        diamondCut(\\n            ds.upgradeProposal.diamondCut,\\n            ds.upgradeProposal.initAddress,\\n            ds.upgradeProposal.initCalldata\\n        );\\n        \\n        // Reset the proposal\\n        delete ds.upgradeProposal;\\n    }\\n    \\n    // Cancel a proposed diamond cut\\n    function cancelDiamondCut() internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        require(ds.upgradeProposal.exists, \\\"LibDiamond: No upgrade proposal exists\\\");\\n        \\n        // Reset the proposal\\n        delete ds.upgradeProposal;\\n        \\n        emit IDiamondCut.DiamondCutCancelled(msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x2bb59ec15c5218cff473ba4ae9f480fd346c4f91aff5e7a1850e0ad29e51b31b\",\"license\":\"MIT\"},\"contracts/libraries/TradeDealLib.sol\":{\"content\":\" // SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"../identity/IdentityStorage.sol\\\";\\nimport \\\"../interfaces/ICollateral.sol\\\";\\nimport \\\"../interfaces/IInterest.sol\\\";\\nimport \\\"../interfaces/IUSDCPool.sol\\\";\\nimport \\\"../interfaces/IAttribute.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nusing SafeERC20 for IERC20;\\nimport \\\"../interfaces/IERC721Permissioned.sol\\\";\\nimport \\\"../interfaces/IFeeDistributor.sol\\\"; // Added for fee distribution\\nimport \\\"hardhat/console.sol\\\";\\nimport \\\"../libraries/LibDiamond.sol\\\";\\nimport \\\"../libraries/AttributeLib.sol\\\";\\n\\nimport {console} from \\\"hardhat/console.sol\\\";\\n\\nlibrary TradeDealLib {\\n    // These event declarations are temporary until we complete migration\\n    // They'll be removed once we've updated all functions to return event params\\n    // rather than emit events directly\\n    \\n    // Operation mode for trade deals\\n    enum OperationMode {\\n        CENTRALIZED,    // Contract owner manages all fund operations\\n        SELF_SERVICE,   // Borrowers can directly withdraw/repay funds\\n        HYBRID,         // Mixed model with configurable permissions\\n        CUSTOM          // Fine-grained permission configuration\\n    }\\n    \\n    // Roles for the role-based access control system\\n    enum Role {\\n        NONE,        // No special role (default)\\n        ADMIN,       // Full control over the trade deal\\n        LENDER,      // Can deposit funds and receive Collateral tokens\\n        BORROWER,    // Can deposit invoices and withdraw funds (in self-service)\\n        UNDERWRITER, // Can approve/reject deals, modify terms\\n        LIQUIDATOR   // Can liquidate collateral if terms are violated\\n    }\\n    \\n    // Permission bit flags for fine-grained control\\n    uint256 constant PERMISSION_DEPOSIT_FUNDS = 1;\\n    uint256 constant PERMISSION_WITHDRAW_FUNDS = 2;\\n    uint256 constant PERMISSION_DEPOSIT_COLLATERAL = 4;\\n    uint256 constant PERMISSION_WITHDRAW_COLLATERAL = 8;\\n    uint256 constant PERMISSION_DISTRIBUTE_INTEREST = 16;\\n    \\n    event TradeDealCreated(\\n        uint256 indexed tradeDealId,\\n        string name,\\n        string symbol,\\n        uint256 interestRate,\\n        uint256 collateralToInterestRatio,\\n        bool active,\\n        address nftAddress,\\n        address collateralAddress,\\n        address interestAddress,\\n        address usdcAddress\\n    );\\n    // Removed duplicate TradeDealUpdated event definition\\n    event TradeDealActivated(uint256 indexed tradeDealId);\\n    event TradeDealDeactivated(uint256 indexed tradeDealId);\\n    event TradeDealParticipantAdded(uint256 indexed tradeDealId, address indexed participant);\\n    event TradeDealParticipantRemoved(uint256 indexed tradeDealId, address indexed participant);\\n    event InvoiceDepositedToTradeDeal(uint256 indexed tradeDealId, uint256 indexed tokenId);\\n    event InvoiceWithdrawnFromTradeDeal(uint256 indexed tradeDealId, uint256 indexed tokenId);\\n    event USDCDepositedToTradeDeal(uint256 indexed tradeDealId, uint256 amount);\\n    event USDCWithdrawnFromTradeDeal(uint256 indexed tradeDealId, uint256 amount);\\n    event InterestDistributedForTradeDeal(uint256 indexed tradeDealId, uint256 totalInterest, uint256 invoicePoolInterest, uint256 interestInterest, uint256 interestTokensMinted);\\n    event TradeDealRequiredClaimTopicsSet(uint256 indexed tradeDealId, uint256[] claimTopics);\\n    // New events for enhanced functionality\\n    event TradeDealFullyFunded(uint256 indexed tradeDealId, uint256 fundingTarget);\\n    event TradeDealFundingWithdrawn(uint256 indexed tradeDealId, address indexed recipient, uint256 amount);\\n    event TradeDealRepaid(uint256 indexed tradeDealId, address indexed repayer, uint256 amount, bool fullyRepaid);\\n    event CollateralTokensRedeemed(uint256 indexed tradeDealId, address indexed redeemer, uint256 collateralAmount, uint256 usdcAmount);\\n    // Trade Deal data structure\\n    struct TradeDeal {\\n        uint256 id;\\n        string name;\\n        string symbol;           // Symbol for the trade deal, used for Collateral token\\n        uint256 interestRate;\\n        uint256 collateralToInterestRatio;\\n        bool active;\\n        uint256[] requiredClaimTopics; // Claim topics required for participation\\n        address collateralAddress;     // Address of the Collateral token contract for this trade deal\\n        address interestAddress;     // Address of the VABI token contract for this trade deal\\n        address usdcAddress;     // Address of the USDC token contract for this trade deal\\n        OperationMode operationMode; // Operation mode (CENTRALIZED or SELF_SERVICE)\\n    }\\n\\n    struct CollateralRedemptionResult {\\n        uint256 tradeDealId;\\n        address redeemer;\\n        uint256 collateralAmount;\\n        uint256 usdcAmount;\\n    }\\n    \\n    // Extended CollateralleStorage to support trade deals\\n    struct TradeDealStorage {\\n        // Trade deal tracking\\n        mapping(uint256 => TradeDeal) tradeDeals;\\n        uint256[] tradeDealIds;\\n        uint256 nextTradeDealId;\\n        \\n        // Per-trade deal mappings\\n        mapping(uint256 => uint256[]) tradeDealInvoices; // Trade deal ID => array of invoice token IDs\\n        mapping(uint256 => uint256) tradeDealUsdcBalances; // Trade deal ID => USDC balance\\n        mapping(uint256 => mapping(address => bool)) tradeDealParticipants; // Trade deal ID => user address => is participant\\n        mapping(uint256 => uint256[]) tradeDealRequiredClaimTopics; // Trade deal ID => array of required claim topics\\n        \\n        // Role-based access control\\n        mapping(uint256 => mapping(address => Role)) userRoles; // Trade deal ID => user address => role\\n        mapping(uint256 => mapping(address => uint256)) userPermissions; // Trade deal ID => user address => permissions\\n        \\n        // New fields for enhanced functionality\\n        mapping(uint256 => uint256) tradeDealFundingTargets; // Trade deal ID => funding target\\n        mapping(uint256 => bool) tradeDealFundingWithdrawn; // Trade deal ID => whether funding has been withdrawn\\n        mapping(uint256 => uint256) tradeDealRepaidAmounts; // Trade deal ID => amount repaid\\n        mapping(uint256 => uint256) tradeDealTotalDebt; // Trade deal ID => total debt (principal + interest)\\n        \\n        // Track original depositors of invoices\\n        mapping(uint256 => mapping(uint256 => address)) invoiceDepositors; // Trade deal ID => token ID => original depositor\\n    }\\n    \\n    // Return struct for createTradeDeal function\\n    struct CreateTradeDealResult {\\n        uint256 tradeDealId;\\n        string name;\\n        string symbol;\\n        uint256 interestRate;\\n        uint256 collateralToInterestRatio;\\n        bool active;\\n        address nftAddress;\\n        address collateralAddress;\\n        address interestAddress;\\n        address usdcAddress;\\n        bool hasClaimTopics;\\n        uint256[] requiredClaimTopics;\\n        OperationMode operationMode;\\n    }\\n    \\n    // Parameters struct for createTradeDeal function\\n    struct CreateTradeDealParams {\\n        string name;\\n        string symbol;\\n        uint256 interestRate;\\n        uint256 collateralToInterestRatio;\\n        uint256[] requiredClaimTopics;\\n        address collateralAddress;\\n        address interestAddress;\\n        address usdcAddress;\\n        OperationMode operationMode;\\n    }\\n    \\n    // Create a new trade deal\\n    function _createTradeDeal(\\n        CreateTradeDealParams memory params\\n    ) internal returns (CreateTradeDealResult memory) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        uint256 tradeDealId = tds.nextTradeDealId++;\\n        \\n        TradeDeal storage tradeDeal = tds.tradeDeals[tradeDealId];\\n        tradeDeal.id = tradeDealId;\\n        tradeDeal.name = params.name;\\n        tradeDeal.symbol = params.symbol;\\n        tradeDeal.interestRate = params.interestRate;\\n        tradeDeal.collateralToInterestRatio = params.collateralToInterestRatio;\\n        tradeDeal.active = true;\\n        \\n        // Check if we should use the CollateralTokenFactoryFacet to create a new Collateral token\\n        address collateralAddress = params.collateralAddress;\\n        if (collateralAddress == address(0)) {\\n            // Try to create a new Collateral token\\n            collateralAddress = _createOrGetCollateralToken(tradeDealId, params.symbol);\\n        }\\n        \\n        tradeDeal.collateralAddress = collateralAddress;\\n        tradeDeal.interestAddress = params.interestAddress;\\n        tradeDeal.usdcAddress = params.usdcAddress;\\n        tradeDeal.operationMode = params.operationMode;\\n        \\n        // Set required claim topics\\n        bool hasClaimTopics = params.requiredClaimTopics.length > 0;\\n        if (hasClaimTopics) {\\n            uint256 requiredClaimTopicsLength = params.requiredClaimTopics.length;\\n            for (uint256 i = 0; i < requiredClaimTopicsLength; i++) {\\n                tradeDeal.requiredClaimTopics.push(params.requiredClaimTopics[i]);\\n                tds.tradeDealRequiredClaimTopics[tradeDealId].push(params.requiredClaimTopics[i]);\\n            }\\n        }\\n        // Initialize repayment tracking - funding target will be set when an invoice is deposited\\n        tds.tradeDealFundingTargets[tradeDealId] = 0; // Will be set based on NFT totalAmount when invoice is deposited\\n        tds.tradeDealRepaidAmounts[tradeDealId] = 0;\\n        tds.tradeDealTotalDebt[tradeDealId] = 0; // Will be set when fully funded\\n        tds.tradeDealFundingWithdrawn[tradeDealId] = false;\\n        tds.tradeDealFundingWithdrawn[tradeDealId] = false;\\n        \\n        tds.tradeDealIds.push(tradeDealId);\\n        \\n        // Instead of emitting events, return the data needed for the facet to emit events\\n        CreateTradeDealResult memory result;\\n        result.tradeDealId = tradeDealId;\\n        result.name = params.name;\\n        result.symbol = params.symbol;\\n        result.interestRate = params.interestRate;\\n        result.collateralToInterestRatio = params.collateralToInterestRatio;\\n        result.active = true;\\n        result.nftAddress = address(0); // Use address(0) for nftAddress since we're using the Diamond's ERC721PermissionedTokenFacet\\n        result.collateralAddress = collateralAddress;\\n        result.interestAddress = params.interestAddress;\\n        result.usdcAddress = params.usdcAddress;\\n        result.hasClaimTopics = hasClaimTopics;\\n        result.requiredClaimTopics = params.requiredClaimTopics;\\n        result.operationMode = params.operationMode;\\n        \\n        return result;\\n    }\\n    // Return struct for updateTradeDeal function\\n    struct UpdateTradeDealResult {\\n        uint256 tradeDealId;\\n        string name;\\n        string symbol;\\n        uint256 interestRate;\\n        uint256 collateralToInterestRatio;\\n        bool active;\\n        address collateralAddress;\\n        address interestAddress;\\n        address usdcAddress;\\n    }\\n    \\n    // Update an existing trade deal\\n    // Update an existing trade deal\\n    function _updateTradeDeal(\\n        uint256 tradeDealId,\\n        string memory name,\\n        string memory symbol,\\n        uint256 interestRate,\\n        uint256 collateralToInterestRatio,\\n        address collateralAddress,\\n        address interestAddress,\\n        address usdcAddress\\n    ) internal returns (UpdateTradeDealResult memory) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        require(_tradeDealExists(tradeDealId), \\\"Trade deal does not exist\\\");\\n        \\n        TradeDeal storage tradeDeal = tds.tradeDeals[tradeDealId];\\n        tradeDeal.name = name;\\n        tradeDeal.symbol = symbol;\\n        tradeDeal.interestRate = interestRate;\\n        tradeDeal.collateralToInterestRatio = collateralToInterestRatio;\\n        tradeDeal.collateralAddress = collateralAddress;\\n        tradeDeal.interestAddress = interestAddress;\\n        tradeDeal.usdcAddress = usdcAddress;\\n        \\n        // Instead of emitting an event, return the data needed for the facet to emit the event\\n        UpdateTradeDealResult memory result;\\n        result.tradeDealId = tradeDealId;\\n        result.name = name;\\n        result.symbol = symbol;\\n        result.interestRate = interestRate;\\n        result.collateralToInterestRatio = collateralToInterestRatio;\\n        result.active = tradeDeal.active;\\n        result.collateralAddress = collateralAddress;\\n        result.interestAddress = interestAddress;\\n        result.usdcAddress = usdcAddress;\\n        \\n        return result;\\n    }\\n    \\n    // Return struct for activate/deactivate trade deal\\n    struct TradeDealStateChangeResult {\\n        uint256 tradeDealId;\\n    }\\n    \\n    // Activate a trade deal\\n    function _activateTradeDeal(uint256 tradeDealId) internal returns (TradeDealStateChangeResult memory) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        require(_tradeDealExists(tradeDealId), \\\"Trade deal does not exist\\\");\\n        \\n        tds.tradeDeals[tradeDealId].active = true;\\n        \\n        // Return result instead of emitting event\\n        TradeDealStateChangeResult memory result;\\n        result.tradeDealId = tradeDealId;\\n        return result;\\n    }\\n    \\n    // Deactivate a trade deal\\n    function _deactivateTradeDeal(uint256 tradeDealId) internal returns (TradeDealStateChangeResult memory) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        require(_tradeDealExists(tradeDealId), \\\"Trade deal does not exist\\\");\\n        \\n        tds.tradeDeals[tradeDealId].active = false;\\n        \\n        // Return result instead of emitting event\\n        TradeDealStateChangeResult memory result;\\n        result.tradeDealId = tradeDealId;\\n        return result;\\n    }\\n    \\n    // Check if a trade deal exists\\n    function _tradeDealExists(uint256 tradeDealId) internal view returns (bool) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        return tradeDealId < tds.nextTradeDealId && tds.tradeDeals[tradeDealId].id == tradeDealId;\\n    }\\n    \\n    // Get trade deal info\\n    function _getTradeDealInfo(uint256 tradeDealId) internal view returns (TradeDeal memory) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        require(_tradeDealExists(tradeDealId), \\\"Trade deal does not exist\\\");\\n        \\n        return tds.tradeDeals[tradeDealId];\\n    }\\n    \\n    // Get all trade deal IDs\\n    function _getAllTradeDealIds() internal view returns (uint256[] memory) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        return tds.tradeDealIds;\\n    }\\n    \\n    // Return struct for participant management functions\\n    struct TradeDealParticipantResult {\\n        uint256 tradeDealId;\\n        address participant;\\n    }\\n    \\n    // Participant management\\n    function _addTradeDealParticipant(uint256 tradeDealId, address participant) internal returns (TradeDealParticipantResult memory) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        require(_tradeDealExists(tradeDealId), \\\"Trade deal does not exist\\\");\\n        \\n        tds.tradeDealParticipants[tradeDealId][participant] = true;\\n        \\n        // Return result instead of emitting event\\n        TradeDealParticipantResult memory result;\\n        result.tradeDealId = tradeDealId;\\n        result.participant = participant;\\n        return result;\\n    }\\n    \\n    function _removeTradeDealParticipant(uint256 tradeDealId, address participant) internal returns (TradeDealParticipantResult memory) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        require(_tradeDealExists(tradeDealId), \\\"Trade deal does not exist\\\");\\n        \\n        tds.tradeDealParticipants[tradeDealId][participant] = false;\\n        \\n        // Return result instead of emitting event\\n        TradeDealParticipantResult memory result;\\n        result.tradeDealId = tradeDealId;\\n        result.participant = participant;\\n        return result;\\n    }\\n    \\n    function _isTradeDealParticipant(uint256 tradeDealId, address user) internal view returns (bool) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        require(_tradeDealExists(tradeDealId), \\\"Trade deal does not exist\\\");\\n        \\n        // First check if the user is explicitly added as a participant\\n        if (tds.tradeDealParticipants[tradeDealId][user]) {\\n            return true;\\n        }\\n        \\n        // If no required claim topics are set, only explicit participants are allowed\\n        if (tds.tradeDealRequiredClaimTopics[tradeDealId].length == 0) {\\n            return false;\\n        }\\n        \\n        // Check if the user has any of the required claim topics\\n        address identityAddress = ds.identities[user];\\n        if (identityAddress == address(0)) {\\n            return false; // User has no identity\\n        }\\n        \\n        // Get the user's claims\\n        uint256[] storage userClaims = ds.claimList[identityAddress];\\n        \\n        // Check if the user has any of the required claim topics\\n        uint256 requiredClaimTopicsLength = tds.tradeDealRequiredClaimTopics[tradeDealId].length;\\n        for (uint256 i = 0; i < requiredClaimTopicsLength; i++) {\\n            uint256 requiredClaimTopic = tds.tradeDealRequiredClaimTopics[tradeDealId][i];\\n            \\n            for (uint256 j = 0; j < userClaims.length; j++) {\\n                if (userClaims[j] == requiredClaimTopic) {\\n                    return true; // User has a required claim\\n                }\\n            }\\n        }\\n        \\n        return false; // User has no required claims\\n    }\\n    \\n    // Return struct for invoice management functions\\n    struct InvoiceActionResult {\\n        uint256 tradeDealId;\\n        uint256 tokenId;\\n    }\\n    \\n    // Invoice management for trade deals\\n    function _depositInvoiceToTradeDeal(uint256 tradeDealId, uint256 tokenId) internal returns (InvoiceActionResult memory) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        require(_tradeDealExists(tradeDealId), \\\"Trade deal does not exist\\\");\\n        require(tds.tradeDeals[tradeDealId].active, \\\"Trade deal is not active\\\");\\n        \\n        // Use the Diamond's ERC721PermissionedTokenFacet to transfer the NFT\\n        // This bypasses the need for approval\\n        bytes memory emptyData = \\\"\\\";\\n        IERC721Permissioned(address(this)).forcedTransfer(\\n            msg.sender,\\n            address(this),\\n            tokenId,\\n            emptyData\\n        );\\n        \\n        // Track the invoice in this trade deal\\n        tds.tradeDealInvoices[tradeDealId].push(tokenId);\\n        // Record the original depositor of this invoice\\n        tds.invoiceDepositors[tradeDealId][tokenId] = msg.sender;\\n        \\n        // Get the totalAmount from the NFT and set it as the funding target\\n        uint256 totalAmount = _getNFTInvoiceTotalAmount(tokenId);\\n        tds.tradeDealFundingTargets[tradeDealId] += totalAmount;\\n        \\n        // Return result instead of emitting event\\n        InvoiceActionResult memory result;\\n        result.tradeDealId = tradeDealId;\\n        result.tokenId = tokenId;\\n        return result;\\n    }\\n\\n    function _withdrawInvoiceFromTradeDeal(uint256 tradeDealId, uint256 tokenId) internal returns (InvoiceActionResult memory) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        require(_tradeDealExists(tradeDealId), \\\"Trade deal does not exist\\\");\\n        \\n        // Verify that the NFT is owned by this contract\\n        require(IERC721(address(this)).ownerOf(tokenId) == address(this), \\\"NFT not owned by this contract\\\");\\n        \\n        // Check if the caller is the original depositor of this invoice\\n        require(\\n            tds.invoiceDepositors[tradeDealId][tokenId] == msg.sender ||\\n            msg.sender == LibDiamond.contractOwner(),\\n            \\\"Only the original depositor or contract owner can withdraw this invoice\\\"\\n        );\\n        \\n        // Remove the invoice from this trade deal's tracking\\n        uint256[] storage invoices = tds.tradeDealInvoices[tradeDealId];\\n        bool found = false;\\n        uint256 invoicesLength = invoices.length;\\n        for (uint256 i = 0; i < invoicesLength; i++) {\\n            if (invoices[i] == tokenId) {\\n                // Remove by swapping with the last element and popping\\n                invoices[i] = invoices[invoices.length - 1];\\n                invoices.pop();\\n                found = true;\\n                break;\\n            }\\n        }\\n        \\n        require(found, \\\"Invoice not found in this trade deal\\\");\\n\\n        // *** FIX: Decrease funding target when invoice is withdrawn ***\\n        uint256 invoiceAmount = _getNFTInvoiceTotalAmount(tokenId);\\n        if (tds.tradeDealFundingTargets[tradeDealId] >= invoiceAmount) {\\n             tds.tradeDealFundingTargets[tradeDealId] -= invoiceAmount;\\n        } else {\\n            // Avoid underflow if target is somehow already less than amount (shouldn't happen)\\n            tds.tradeDealFundingTargets[tradeDealId] = 0;\\n        }\\n        // *** END FIX ***\\n\\n        // Use forcedTransfer to transfer the NFT back to the sender\\n        // This bypasses the need for approval\\n        bytes memory emptyData = \\\"\\\";\\n        IERC721Permissioned(address(this)).forcedTransfer(\\n            address(this),\\n            msg.sender,\\n            tokenId,\\n            emptyData\\n        );\\n\\n        // Clean up the depositor tracking\\n        delete tds.invoiceDepositors[tradeDealId][tokenId];\\n        \\n        // Return result instead of emitting event\\n        InvoiceActionResult memory result;\\n        result.tradeDealId = tradeDealId;\\n        result.tokenId = tokenId;\\n        return result;\\n    }\\n    \\n    // Return struct for USDC management functions\\n    struct USDCActionResult {\\n        uint256 tradeDealId;\\n        uint256 amount;\\n        bool isFullyFunded;\\n        uint256 fundingTarget;\\n    }\\n    \\n    // USDC management for trade deals\\n    function _depositUSDCToTradeDeal(uint256 tradeDealId, uint256 amount) internal returns (USDCActionResult memory) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        require(_tradeDealExists(tradeDealId), \\\"Trade deal does not exist\\\");\\n        require(tds.tradeDeals[tradeDealId].active, \\\"Trade deal is not active\\\");\\n        require(!tds.tradeDealFundingWithdrawn[tradeDealId], \\\"Funding already withdrawn\\\");\\n        \\n        TradeDeal storage tradeDeal = tds.tradeDeals[tradeDealId];\\n        require(tradeDeal.usdcAddress != address(0), \\\"Trade deal USDC address not set\\\");\\n        \\n        // Get funding target and current balance\\n        uint256 fundingTarget = tds.tradeDealFundingTargets[tradeDealId];\\n        uint256 currentBalance = tds.tradeDealUsdcBalances[tradeDealId];\\n        \\n        // If funding target exists, check that deposit won't exceed it\\n        if (fundingTarget > 0) {\\n            uint256 remainingToFund = fundingTarget > currentBalance ?\\n                fundingTarget - currentBalance : 0;\\n                \\n            require(amount <= remainingToFund, \\\"Amount exceeds remaining funding needed\\\");\\n        }\\n        \\n        // Log the depositor address and amount\\n        address depositor = msg.sender;\\n        \\n        // Use the USDC token's transferFrom method to transfer tokens from the sender to this contract\\n        IERC20(tradeDeal.usdcAddress).safeTransferFrom(depositor, address(this), amount);\\n        \\n        // Track the amount in this trade deal\\n        tds.tradeDealUsdcBalances[tradeDealId] += amount;\\n        \\n        // Explicitly add the depositor as a participant in the trade deal\\n        // This ensures they can receive Collateral tokens\\n        if (!_isTradeDealParticipant(tradeDealId, depositor)) {\\n            _addTradeDealParticipant(tradeDealId, depositor);\\n        }\\n        \\n        // If the trade deal has a Collateral token, mint Collateral tokens to the depositor\\n        if (tradeDeal.collateralAddress != address(0)) {\\n            // Get the Collateral token contract\\n            address collateralToken = tradeDeal.collateralAddress;\\n            \\n            // Force the trade deal to be active during minting\\n            bool wasActive = tradeDeal.active;\\n            tradeDeal.active = true;\\n            \\n            // Try to mint Collateral tokens to the depositor\\n            // We need to make sure the depositor is added as a participant first\\n            // This is done by the _addTradeDealParticipant call above\\n            \\n            // Adjust for the difference in decimals between USDC (6) and Collateral (18)\\n            // Multiply by 10^12 to convert from USDC decimals to Collateral decimals\\n            uint256 adjustedAmount = amount * 1000000000000; // 10^12\\n\\n            // Attempt to mint Collateral tokens; will revert if it fails\\n            ICollateral(collateralToken).mint(depositor, adjustedAmount);\\n            // *** END FIX ***\\n            \\n            // Restore the original active state\\n            tradeDeal.active = wasActive;\\n        }\\n        \\n        // Check if this deposit completes the funding\\n        if (fundingTarget > 0 && currentBalance + amount >= fundingTarget) {\\n            // Calculate total debt including interest\\n            uint256 interest = (fundingTarget * tradeDeal.interestRate) / 10000;\\n            tds.tradeDealTotalDebt[tradeDealId] = fundingTarget + interest;\\n            \\n            // Track if funding was completed for the result\\n        }\\n        \\n        // Return result instead of emitting events\\n        USDCActionResult memory result;\\n        result.tradeDealId = tradeDealId;\\n        result.amount = amount;\\n        result.isFullyFunded = (fundingTarget > 0 && currentBalance + amount >= fundingTarget);\\n        result.fundingTarget = fundingTarget;\\n        return result;\\n    }\\n    \\n    function _withdrawUSDCFromTradeDeal(uint256 tradeDealId, uint256 amount) internal returns (USDCActionResult memory) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        require(_tradeDealExists(tradeDealId), \\\"Trade deal does not exist\\\");\\n        require(tds.tradeDealUsdcBalances[tradeDealId] >= amount, \\\"Insufficient USDC balance in trade deal\\\");\\n        \\n        TradeDeal storage tradeDeal = tds.tradeDeals[tradeDealId];\\n        require(tradeDeal.usdcAddress != address(0), \\\"Trade deal USDC address not set\\\");\\n        \\n        // Use the USDC token's transfer method to transfer tokens from this contract to the sender\\n        require(IERC20(tradeDeal.usdcAddress).transfer(msg.sender, amount), \\\"USDC transfer failed\\\");\\n        \\n        // Update the amount in this trade deal\\n        tds.tradeDealUsdcBalances[tradeDealId] -= amount;\\n        \\n        // Return result instead of emitting event\\n        USDCActionResult memory result;\\n        result.tradeDealId = tradeDealId;\\n        result.amount = amount;\\n        result.isFullyFunded = false; // Not applicable for withdrawal\\n        result.fundingTarget = 0;     // Not applicable for withdrawal\\n        return result;\\n    }\\n    \\n    // Return struct for interest distribution\\n    struct InterestDistributionResult {\\n        uint256 tradeDealId;\\n        uint256 totalInterest;\\n        uint256 invoicePoolInterest;\\n        uint256 interestInterest;\\n        uint256 interestTokensMinted;\\n    }\\n    \\n    // Interest distribution for a specific trade deal\\n    // This function is kept for backward compatibility but is simplified to avoid VABI token complexity\\n    function _distributeInterestForTradeDeal(uint256 tradeDealId) internal view returns (InterestDistributionResult memory) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        require(_tradeDealExists(tradeDealId), \\\"Trade deal does not exist\\\");\\n        require(tds.tradeDeals[tradeDealId].active, \\\"Trade deal is not active\\\");\\n        \\n        // Note: Interest calculation is now handled during funding completion and repayment processes\\n        // This function is maintained for backward compatibility\\n        \\n        // We'll calculate interest but won't do anything with it\\n        TradeDeal storage tradeDeal = tds.tradeDeals[tradeDealId];\\n        uint256 balance = tds.tradeDealUsdcBalances[tradeDealId];\\n        uint256 interest = (balance * tradeDeal.interestRate) / 10000;\\n        \\n        // Return result instead of emitting event\\n        InterestDistributionResult memory result;\\n        result.tradeDealId = tradeDealId;\\n        result.totalInterest = interest;\\n        result.invoicePoolInterest = interest; // All interest goes to the trade deal now\\n        result.interestInterest = 0;               // No VABI interest\\n        result.interestTokensMinted = 0;           // No VABI tokens minted\\n        \\n        return result;\\n    }\\n    \\n    // Get USDC balance for a specific trade deal\\n    function _getUSDCBalanceForTradeDeal(uint256 tradeDealId) internal view returns (uint256) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        require(_tradeDealExists(tradeDealId), \\\"Trade deal does not exist\\\");\\n        \\n        return tds.tradeDealUsdcBalances[tradeDealId];\\n    }\\n    \\n    // Get invoice count for a specific trade deal\\n    function _getInvoiceCountForTradeDeal(uint256 tradeDealId) internal view returns (uint256) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        require(_tradeDealExists(tradeDealId), \\\"Trade deal does not exist\\\");\\n        \\n        return tds.tradeDealInvoices[tradeDealId].length;\\n    }\\n    \\n    // Get invoice token ID for a specific trade deal\\n    function _getInvoiceTokenIdForTradeDeal(uint256 tradeDealId, uint256 index) internal view returns (uint256) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        require(_tradeDealExists(tradeDealId), \\\"Trade deal does not exist\\\");\\n        require(index < tds.tradeDealInvoices[tradeDealId].length, \\\"Index out of bounds\\\");\\n        \\n        return tds.tradeDealInvoices[tradeDealId][index];\\n    }\\n    \\n    // Return struct for setting required claim topics\\n    struct ClaimTopicsResult {\\n        uint256 tradeDealId;\\n        uint256[] claimTopics;\\n    }\\n    \\n    // Set required claim topics for a trade deal\\n    function _setTradeDealRequiredClaimTopics(uint256 tradeDealId, uint256[] memory claimTopics) internal returns (ClaimTopicsResult memory) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        require(_tradeDealExists(tradeDealId), \\\"Trade deal does not exist\\\");\\n        \\n        // Clear existing claim topics\\n        delete tds.tradeDealRequiredClaimTopics[tradeDealId];\\n        delete tds.tradeDeals[tradeDealId].requiredClaimTopics;\\n        \\n        // Set new claim topics\\n        uint256 claimTopicsLength = claimTopics.length;\\n        for (uint256 i = 0; i < claimTopicsLength; i++) {\\n            tds.tradeDealRequiredClaimTopics[tradeDealId].push(claimTopics[i]);\\n            tds.tradeDeals[tradeDealId].requiredClaimTopics.push(claimTopics[i]);\\n        }\\n        \\n        // Return result instead of emitting event\\n        ClaimTopicsResult memory result;\\n        result.tradeDealId = tradeDealId;\\n        result.claimTopics = claimTopics;\\n        return result;\\n    }\\n    \\n    // Get required claim topics for a trade deal\\n    function _getTradeDealRequiredClaimTopics(uint256 tradeDealId) internal view returns (uint256[] memory) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        require(_tradeDealExists(tradeDealId), \\\"Trade deal does not exist\\\");\\n        \\n        return tds.tradeDealRequiredClaimTopics[tradeDealId];\\n    }\\n    \\n    // Check if a trade deal is fully funded\\n    function _isTradeDealFunded(uint256 tradeDealId) internal view returns (bool) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        require(_tradeDealExists(tradeDealId), \\\"Trade deal does not exist\\\");\\n        \\n        uint256 fundingTarget = tds.tradeDealFundingTargets[tradeDealId];\\n        if (fundingTarget == 0) {\\n            return false; // No funding target set\\n        }\\n        \\n        return tds.tradeDealUsdcBalances[tradeDealId] >= fundingTarget;\\n    }\\n    \\n    // Check if a trade deal is fully repaid\\n    function _isTradeDealRepaid(uint256 tradeDealId) internal view returns (bool) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        require(_tradeDealExists(tradeDealId), \\\"Trade deal does not exist\\\");\\n        \\n        uint256 totalDebt = tds.tradeDealTotalDebt[tradeDealId];\\n        if (totalDebt == 0) {\\n            return false; // No debt established yet\\n        }\\n        \\n        return tds.tradeDealRepaidAmounts[tradeDealId] >= totalDebt;\\n    }\\n    \\n    // Return struct for funding withdrawal\\n    struct FundingWithdrawalResult {\\n        uint256 tradeDealId;\\n        address recipient;\\n        uint256 amount;\\n    }\\n    \\n    // Allow fundees to withdraw USDC funding\\n    function _withdrawTradeDealFunding(uint256 tradeDealId, address borrowerAddress) internal returns (FundingWithdrawalResult memory) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        require(_tradeDealExists(tradeDealId), \\\"Trade deal does not exist\\\");\\n        require(tds.tradeDeals[tradeDealId].active, \\\"Trade deal is not active\\\");\\n        require(_isTradeDealFunded(tradeDealId), \\\"Trade deal is not fully funded\\\");\\n        require(!tds.tradeDealFundingWithdrawn[tradeDealId], \\\"Funding already withdrawn\\\");\\n        require(borrowerAddress != address(0), \\\"Borrower address cannot be zero\\\"); // Added check\\n        \\n        // Verify caller has deposited invoices as collateral\\n        uint256[] storage invoices = tds.tradeDealInvoices[tradeDealId];\\n        require(invoices.length > 0, \\\"No invoices deposited as collateral\\\");\\n        \\n        // Get token addresses\\n        TradeDeal storage tradeDeal = tds.tradeDeals[tradeDealId];\\n        address usdcToken = tradeDeal.usdcAddress;\\n        require(usdcToken != address(0), \\\"Trade deal USDC address not set\\\");\\n        \\n        // Get the funding amount\\n        uint256 fundingAmount = tds.tradeDealFundingTargets[tradeDealId];\\n        \\n        // Mark as withdrawn\\n        tds.tradeDealFundingWithdrawn[tradeDealId] = true;\\n        \\n        // Distribute USDC via FeeDistributor: fees to receivers, adjusted principal to borrower\\n        IFeeDistributor feeDistributor = IFeeDistributor(address(this));\\n        (address adjustedReceiver, uint256 adjustedAmount, , ) = feeDistributor.distributeAmounts(borrowerAddress, fundingAmount);\\n        require(adjustedReceiver == borrowerAddress, \\\"FeeDistributor: Adjusted amount sent to wrong receiver\\\");\\n        \\n        // Update USDC balance\\n        tds.tradeDealUsdcBalances[tradeDealId] -= fundingAmount;\\n        \\n        // Return result instead of emitting event\\n        FundingWithdrawalResult memory result;\\n        result.tradeDealId = tradeDealId;\\n        result.recipient = borrowerAddress; // Recipient is the borrower\\n        result.amount = adjustedAmount;    // Amount is the adjusted principal received\\n        return result;\\n    }\\n    \\n    // Return struct for debt repayment\\n    struct RepaymentResult {\\n        uint256 tradeDealId;\\n        address repayer;\\n        uint256 amount;\\n        bool fullyRepaid;\\n    }\\n    \\n    // Allow fundees to repay their debt\\n    function _repayTradeDeal(uint256 tradeDealId, uint256 amount) internal returns (RepaymentResult memory) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        require(_tradeDealExists(tradeDealId), \\\"Trade deal does not exist\\\");\\n        require(tds.tradeDeals[tradeDealId].active, \\\"Trade deal is not active\\\");\\n        require(tds.tradeDealFundingWithdrawn[tradeDealId], \\\"Funding not yet withdrawn\\\");\\n        \\n        // Calculate remaining debt\\n        uint256 totalDebt = tds.tradeDealTotalDebt[tradeDealId];\\n        uint256 repaidSoFar = tds.tradeDealRepaidAmounts[tradeDealId];\\n        uint256 remainingDebt = totalDebt > repaidSoFar ? totalDebt - repaidSoFar : 0;\\n        \\n        require(remainingDebt > 0, \\\"No remaining debt to repay\\\");\\n        require(amount <= remainingDebt, \\\"Amount exceeds remaining debt\\\");\\n        \\n        // Get USDC token\\n        TradeDeal storage tradeDeal = tds.tradeDeals[tradeDealId];\\n        address usdcToken = tradeDeal.usdcAddress;\\n        require(usdcToken != address(0), \\\"Trade deal USDC address not set\\\");\\n        \\n        // Transfer USDC from repayer to contract\\n        IERC20(usdcToken).safeTransferFrom(msg.sender, address(this), amount);\\n        \\n        // Update repaid amount\\n        tds.tradeDealRepaidAmounts[tradeDealId] += amount;\\n        \\n        // Update USDC balance\\n        tds.tradeDealUsdcBalances[tradeDealId] += amount;\\n        \\n        // Check if fully repaid\\n        bool fullyRepaid = (tds.tradeDealRepaidAmounts[tradeDealId] >= totalDebt);\\n        \\n        // Return result instead of emitting event\\n        RepaymentResult memory result;\\n        result.tradeDealId = tradeDealId;\\n        result.repayer = msg.sender;\\n        result.amount = amount;\\n        result.fullyRepaid = fullyRepaid;\\n        return result;\\n    }\\n\\n    function _repayTradeDealForBorrower(uint256 tradeDealId, address borrower, uint256 amount) internal returns (RepaymentResult memory) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        require(_tradeDealExists(tradeDealId), \\\"Trade deal does not exist\\\");\\n        require(tds.tradeDeals[tradeDealId].active, \\\"Trade deal is not active\\\");\\n        require(tds.tradeDealFundingWithdrawn[tradeDealId], \\\"Funding not yet withdrawn\\\");\\n        \\n        // Calculate remaining debt\\n        uint256 totalDebt = tds.tradeDealTotalDebt[tradeDealId];\\n        uint256 repaidSoFar = tds.tradeDealRepaidAmounts[tradeDealId];\\n        uint256 remainingDebt = totalDebt > repaidSoFar ? totalDebt - repaidSoFar : 0;\\n        \\n        require(remainingDebt > 0, \\\"No remaining debt to repay\\\");\\n        require(amount <= remainingDebt, \\\"Amount exceeds remaining debt\\\");\\n        \\n        // Get USDC token\\n        TradeDeal storage tradeDeal = tds.tradeDeals[tradeDealId];\\n        address usdcToken = tradeDeal.usdcAddress;\\n        require(usdcToken != address(0), \\\"Trade deal USDC address not set\\\");\\n        \\n        // Transfer USDC from borrower to contract\\n        IERC20(usdcToken).safeTransferFrom(msg.sender, address(this), amount);\\n        \\n        // Update repaid amount\\n        tds.tradeDealRepaidAmounts[tradeDealId] += amount;\\n        \\n        // Update USDC balance\\n        tds.tradeDealUsdcBalances[tradeDealId] += amount;\\n        \\n        // Check if fully repaid\\n        bool fullyRepaid = (tds.tradeDealRepaidAmounts[tradeDealId] >= totalDebt);\\n\\n        // Return result instead of emitting event\\n        RepaymentResult memory result;\\n        result.tradeDealId = tradeDealId;\\n        result.repayer = borrower;\\n        result.amount = amount;\\n        result.fullyRepaid = fullyRepaid;\\n    \\n        return result;\\n    }\\n    \\n    // Check if a user has a valid Collateral token balance for the trade deal\\n    function _hasCollateralTokenBalance(uint256 tradeDealId, address user, uint256 requiredAmount) internal view returns (bool) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        require(_tradeDealExists(tradeDealId), \\\"Trade deal does not exist\\\");\\n        \\n        TradeDeal storage tradeDeal = tds.tradeDeals[tradeDealId];\\n        address collateralToken = tradeDeal.collateralAddress;\\n        \\n        if (collateralToken == address(0)) return false;\\n        \\n        uint256 collateralBalance = ICollateral(collateralToken).balanceOf(user);\\n        return collateralBalance >= requiredAmount;\\n    }\\n    \\n    // Allow funders to redeem their Collateral tokens\\n    function _redeemCollateralTokens(uint256 tradeDealId, uint256 collateralAmount) internal returns (CollateralRedemptionResult memory) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        require(_tradeDealExists(tradeDealId), \\\"Trade deal does not exist\\\");\\n        require(_isTradeDealRepaid(tradeDealId), \\\"Trade deal not fully repaid\\\");\\n        \\n        // Get token addresses\\n        TradeDeal storage tradeDeal = tds.tradeDeals[tradeDealId];\\n        address collateralToken = tradeDeal.collateralAddress;\\n        address usdcToken = tradeDeal.usdcAddress;\\n        require(collateralToken != address(0), \\\"Collateral token address not set\\\");\\n        require(usdcToken != address(0), \\\"USDC token address not set\\\");\\n        \\n        // Check Collateral balance\\n        uint256 collateralBalance = ICollateral(collateralToken).balanceOf(msg.sender);\\n        require(collateralBalance >= collateralAmount, \\\"Insufficient Collateral balance\\\");\\n        \\n        // Calculate proportional USDC amount\\n        uint256 totalCollateralSupply = ICollateral(collateralToken).totalSupply();\\n        require(totalCollateralSupply > 0, \\\"No Collateral tokens in circulation\\\");\\n        \\n        uint256 usdcBalance = tds.tradeDealUsdcBalances[tradeDealId];\\n        uint256 usdcAmount = (usdcBalance * collateralAmount) / totalCollateralSupply;\\n        \\n        require(usdcAmount > 0, \\\"Calculated USDC amount is zero\\\");\\n        require(usdcBalance >= usdcAmount, \\\"Insufficient USDC balance in trade deal\\\");\\n        \\n        // Burn Collateral tokens\\n        ICollateral(collateralToken).burn(msg.sender, collateralAmount);\\n        \\n        // Transfer USDC to redeemer\\n        require(IERC20(usdcToken).transfer(msg.sender, usdcAmount), \\\"USDC transfer failed\\\");\\n        \\n        // Update USDC balance\\n        tds.tradeDealUsdcBalances[tradeDealId] -= usdcAmount;\\n        \\n        // Return result instead of emitting event\\n        CollateralRedemptionResult memory result;\\n        result.tradeDealId = tradeDealId;\\n        result.redeemer = msg.sender;\\n        result.collateralAmount = collateralAmount;\\n        result.usdcAmount = usdcAmount;\\n        return result;\\n    }\\n    \\n    // Role-based access control functions\\n    \\n    /**\\n     * @notice Set a user's role for a specific trade deal\\n     * @param tradeDealId The ID of the trade deal\\n     * @param user The address of the user\\n     * @param role The role to assign\\n     */\\n    function _setUserRole(uint256 tradeDealId, address user, Role role) internal {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        require(_tradeDealExists(tradeDealId), \\\"Trade deal does not exist\\\");\\n        require(user != address(0), \\\"Invalid user address\\\");\\n        \\n        tds.userRoles[tradeDealId][user] = role;\\n        \\n        // If user is being set as a borrower, also add them as a participant\\n        if (role == Role.BORROWER && !tds.tradeDealParticipants[tradeDealId][user]) {\\n            tds.tradeDealParticipants[tradeDealId][user] = true;\\n        }\\n    }\\n    \\n    /**\\n     * @notice Check if a user has a specific role in a trade deal\\n     * @param tradeDealId The ID of the trade deal\\n     * @param user The address of the user\\n     * @param role The role to check\\n     * @return True if the user has the role, false otherwise\\n     */\\n    function _hasRole(uint256 tradeDealId, address user, Role role) internal view returns (bool) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        if (!_tradeDealExists(tradeDealId)) return false;\\n        if (user == address(0)) return false;\\n        \\n        // Contract owner is always considered to have ADMIN role\\n        if (role == Role.ADMIN && user == LibDiamond.contractOwner()) return true;\\n        \\n        return tds.userRoles[tradeDealId][user] == role;\\n    }\\n    \\n    /**\\n     * @notice Check if a user has a specific permission in a trade deal\\n     * @param tradeDealId The ID of the trade deal\\n     * @param user The address of the user\\n     * @param permission The permission to check\\n     * @return True if the user has the permission, false otherwise\\n     */\\n    function _hasPermission(uint256 tradeDealId, address user, uint256 permission) internal view returns (bool) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        if (!_tradeDealExists(tradeDealId)) return false;\\n        if (user == address(0)) return false;\\n        \\n        // Contract owner always has all permissions\\n        if (user == LibDiamond.contractOwner()) return true;\\n        \\n        TradeDeal storage tradeDeal = tds.tradeDeals[tradeDealId];\\n        \\n        // Check operation mode defaults\\n        if (tradeDeal.operationMode == OperationMode.CENTRALIZED) {\\n            // In centralized mode, only contract owner can withdraw funds\\n            if (permission == PERMISSION_WITHDRAW_FUNDS) {\\n                return user == LibDiamond.contractOwner();\\n            }\\n            \\n            // Anyone can deposit funds or collateral in centralized mode\\n            if (permission == PERMISSION_DEPOSIT_FUNDS || permission == PERMISSION_DEPOSIT_COLLATERAL) {\\n                return true;\\n            }\\n        }\\n        else if (tradeDeal.operationMode == OperationMode.SELF_SERVICE) {\\n            // In self-service mode, borrowers can withdraw funds\\n            if (permission == PERMISSION_WITHDRAW_FUNDS && _hasRole(tradeDealId, user, Role.BORROWER)) {\\n                return true;\\n            }\\n            \\n            // Anyone can deposit funds or collateral in self-service mode\\n            if (permission == PERMISSION_DEPOSIT_FUNDS || permission == PERMISSION_DEPOSIT_COLLATERAL) {\\n                return true;\\n            }\\n        }\\n        \\n        // For HYBRID and CUSTOM modes, check explicit permissions\\n        return (tds.userPermissions[tradeDealId][user] & permission) != 0;\\n    }\\n    \\n    /**\\n     * @notice Extract the totalAmount from an NFT invoice metadata\\n     * @param tokenId The token ID of the NFT invoice\\n     * @return The totalAmount value from the metadata, or 0 if not found\\n     */\\n    function _getNFTInvoiceTotalAmount(uint256 tokenId) internal view returns (uint256) {\\n        // Check if this token exists\\n        require(IERC721(address(this)).ownerOf(tokenId) != address(0), \\\"Token does not exist\\\");\\n        \\n        // Get the totalAmount attribute using AttributeLib\\n        AttributeStorage storage attributeStore = AttributeLib.attributeStorage();\\n        AttributeContract storage attributeContract = attributeStore.attributes;\\n        \\n        // Try to get the \\\"totalAmount\\\" attribute\\n        Attribute memory totalAmountAttr = AttributeLib._getAttribute(\\n            attributeContract,\\n            tokenId,\\n            \\\"totalAmount\\\"\\n        );\\n        \\n        // If the attribute exists and has a value, convert it to uint256\\n        if (bytes(totalAmountAttr.value).length > 0) {\\n            // Convert string to uint256\\n            uint256 amount = _stringToUint(totalAmountAttr.value);\\n            return amount;\\n        }\\n        \\n        // Fallback logic - if totalAmount attribute is not found, check if there's an \\\"amount\\\" attribute\\n        Attribute memory amountAttr = AttributeLib._getAttribute(\\n            attributeContract,\\n            tokenId,\\n            \\\"amount\\\"\\n        );\\n        \\n        if (bytes(amountAttr.value).length > 0) {\\n            uint256 amount = _stringToUint(amountAttr.value);\\n            return amount;\\n        }\\n        \\n        // If no attributes found, return 0\\n        return 0;\\n    }\\n    \\n    /**\\n     * @notice Helper function to convert a string to uint256\\n     * @param s The string to convert\\n     * @return result The converted uint256 value\\n     */\\n    function _stringToUint(string memory s) internal pure returns (uint256 result) {\\n        bytes memory b = bytes(s);\\n        result = 0;\\n        for (uint i = 0; i < b.length; i++) {\\n            uint8 c = uint8(b[i]);\\n            if (c >= 48 && c <= 57) {\\n                result = result * 10 + (c - 48);\\n            }\\n        }\\n        return result;\\n    }\\n    \\n    // Return struct for self-service funding withdrawal\\n    struct SelfServiceWithdrawalResult {\\n        uint256 tradeDealId;\\n        address recipient;\\n        uint256 amount;\\n    }\\n    \\n    /**\\n     * @notice Allow borrowers to withdraw funds in self-service mode\\n     * @param tradeDealId The ID of the trade deal\\n     * @param borrower The address of the borrower\\n     * @return Result struct with withdrawal details\\n     */\\n    function _withdrawTradeDealFundingSelf(uint256 tradeDealId, address borrower) internal returns (FundingWithdrawalResult memory) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        require(_tradeDealExists(tradeDealId), \\\"Trade deal does not exist\\\");\\n        \\n        TradeDeal storage tradeDeal = tds.tradeDeals[tradeDealId];\\n        require(tradeDeal.active, \\\"Trade deal is not active\\\");\\n        require(tradeDeal.operationMode == OperationMode.SELF_SERVICE, \\\"Trade deal is not in self-service mode\\\");\\n        require(_isTradeDealFunded(tradeDealId), \\\"Trade deal is not fully funded\\\");\\n        require(!tds.tradeDealFundingWithdrawn[tradeDealId], \\\"Funding already withdrawn\\\");\\n        \\n        // Check if borrower is a participant and has the BORROWER role\\n        require(_isTradeDealParticipant(tradeDealId, borrower), \\\"Not a participant in this trade deal\\\");\\n        require(_hasRole(tradeDealId, borrower, Role.BORROWER), \\\"Must have borrower role to withdraw funds\\\");\\n        \\n        // Verify the borrower has deposited invoices as collateral\\n        bool hasDepositedInvoice = false;\\n        uint256[] storage invoices = tds.tradeDealInvoices[tradeDealId];\\n        for (uint256 i = 0; i < invoices.length; i++) {\\n            if (tds.invoiceDepositors[tradeDealId][invoices[i]] == borrower) {\\n                hasDepositedInvoice = true;\\n                break;\\n            }\\n        }\\n        require(hasDepositedInvoice, \\\"Borrower has not deposited any invoices\\\");\\n        \\n        // Get token addresses\\n        address usdcToken = tradeDeal.usdcAddress;\\n        require(usdcToken != address(0), \\\"Trade deal USDC address not set\\\");\\n        \\n        // Get the funding amount\\n        uint256 fundingAmount = tds.tradeDealFundingTargets[tradeDealId];\\n        \\n        // Mark as withdrawn\\n        tds.tradeDealFundingWithdrawn[tradeDealId] = true;\\n        \\n        // Distribute USDC via FeeDistributor: fees to receivers, adjusted principal to borrower\\n        IFeeDistributor feeDistributor = IFeeDistributor(address(this));\\n        (address adjustedReceiver, uint256 adjustedAmount, , ) = feeDistributor.distributeAmounts(borrower, fundingAmount);\\n        require(adjustedReceiver == borrower, \\\"FeeDistributor: Adjusted amount sent to wrong receiver\\\");\\n        \\n        // Update USDC balance\\n        tds.tradeDealUsdcBalances[tradeDealId] -= fundingAmount;\\n        \\n        // Return result\\n        FundingWithdrawalResult memory result;\\n        result.tradeDealId = tradeDealId;\\n        result.recipient = borrower;\\n        result.amount = adjustedAmount; // Amount is the adjusted principal received\\n        return result;\\n    }\\n\\n    // Helper function to create or get a Collateral token for a trade deal\\n    function _createOrGetCollateralToken(uint256 tradeDealId, string memory symbol) internal returns (address) {\\n        address collateralAddress = address(0);\\n        \\n        // First try to get the Collateral token address from the CollateralTokenFactoryFacet\\n        (bool checkSuccess, bytes memory checkData) = address(this).staticcall(\\n            abi.encodeWithSignature(\\n                \\\"getCollateralTokenAddress(uint256)\\\",\\n                tradeDealId\\n            )\\n        );\\n        \\n        // If the check was successful and returned a non-zero address, use that\\n        if (checkSuccess && checkData.length > 0) {\\n            address existingCollateralAddress = abi.decode(checkData, (address));\\n            if (existingCollateralAddress != address(0)) {\\n                return existingCollateralAddress;\\n            }\\n        }\\n        \\n        // If we still don't have a Collateral token address, try to create one\\n        string memory tokenName = string(abi.encodePacked(symbol, \\\"-C\\\"));\\n        string memory tokenSymbol = string(abi.encodePacked(symbol, \\\"-C\\\"));\\n\\n        // Call the CollateralTokenFactoryFacet to create a new Collateral token\\n        (bool success, bytes memory data) = address(this).call(\\n            abi.encodeWithSignature(\\n                \\\"createCollateralToken(uint256,string,string,bool)\\\",\\n                tradeDealId,\\n                tokenName,\\n                tokenSymbol,\\n                true // Enable restrictions by default\\n            )\\n        );\\n        \\n        // If the call was successful, use the returned token address\\n        if (success && data.length > 0) {\\n            collateralAddress = abi.decode(data, (address));\\n        }\\n        \\n        // If we still don't have a Collateral token address, try to get it again\\n        if (collateralAddress == address(0)) {\\n            (bool retrySuccess, bytes memory retryData) = address(this).staticcall(\\n                abi.encodeWithSignature(\\n                    \\\"getCollateralTokenAddress(uint256)\\\",\\n                    tradeDealId\\n                )\\n            );\\n            \\n            // If the retry was successful and returned a non-zero address, use that\\n            if (retrySuccess && retryData.length > 0) {\\n                address retryCollateralAddress = abi.decode(retryData, (address));\\n                if (retryCollateralAddress != address(0)) {\\n                    collateralAddress = retryCollateralAddress;\\n                }\\n            }\\n        }\\n        \\n        return collateralAddress;\\n    }\\n}\\n\",\"keccak256\":\"0x4e0c14da1691f4aa47c4b71fb5a6a887bf65dd5f8fdf924cc2f4e84a093a5256\",\"license\":\"MIT\"},\"contracts/utilities/Controllable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\nimport \\\"../interfaces/IControllable.sol\\\";\\r\\n\\r\\n// control me baby\\r\\nabstract contract Controllable is IControllable {\\r\\n    mapping(address => bool) internal _controllers;\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account not in authorized list\\r\\n     */\\r\\n    modifier onlyController() virtual {\\r\\n        require(\\r\\n            _controllers[msg.sender] == true || address(this) == msg.sender,\\r\\n            \\\"caller is not a controller\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add an address allowed to control this contract\\r\\n     */\\r\\n    function addController(address _controller)\\r\\n        external\\r\\n        override\\r\\n        onlyController\\r\\n    {\\r\\n        _addController(_controller);\\r\\n    }\\r\\n    function _addController(address _controller) internal {\\r\\n        _controllers[_controller] = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if this address is a controller\\r\\n     */\\r\\n    function isController(address _address)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (bool allowed)\\r\\n    {\\r\\n        allowed = _isController(_address);\\r\\n    }\\r\\n    function _isController(address _address)\\r\\n        internal view\\r\\n        returns (bool allowed)\\r\\n    {\\r\\n        allowed = _controllers[_address];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Remove the sender address from the list of controllers\\r\\n     */\\r\\n    function relinquishControl() external override onlyController {\\r\\n        _relinquishControl();\\r\\n    }\\r\\n    function _relinquishControl() internal onlyController{\\r\\n        delete _controllers[msg.sender];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x97e48242b2aed589dd5c1ae14e0bf368539d5781278bafe4e8d2a6675d29aed2\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n}\\n\",\"keccak256\":\"0x7434453e6d3b7d0e5d0eb7846ffdbc27f0ccf3b163591263739b628074dc103a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052348015600f57600080fd5b506126618061001f6000396000f3fe6080604052600436106101105760003560e01c806301ffc9a71461011557806312aaac701461015b5780631d3812401461018a5780634eee424a146101ac57806353d413c5146101cc578063747442d3146101ec57806380007e831461020c57806380e9e9e11461022357806389000275146102505780639010f72614610270578063a7fc7a0714610290578063b1a34e0d146102b0578063b429afeb146102de578063b61d27f6146102fe578063c0c53b8b14610311578063c9100bcb14610331578063d202158d14610363578063db6a20a514610383578063df09d604146103a3578063e1c28bef146103c5578063e326fbd4146103da578063e8a51fca1461040b578063fb307b3414610438575b600080fd5b34801561012157600080fd5b50610146610130366004611a6f565b6001600160e01b031916635f09a88760e01b1490565b60405190151581526020015b60405180910390f35b34801561016757600080fd5b5061017b610176366004611a99565b610458565b60405161015293929190611aee565b34801561019657600080fd5b506101aa6101a5366004611b13565b6104d1565b005b3480156101b857600080fd5b506101466101c7366004611a99565b6105e5565b3480156101d857600080fd5b506101aa6101e7366004611b3f565b61071b565b3480156101f857600080fd5b506101aa610207366004611b61565b610893565b34801561021857600080fd5b506008541515610146565b34801561022f57600080fd5b5061024361023e366004611a99565b6108d3565b6040516101529190611b96565b34801561025c57600080fd5b506101aa61026b366004611c83565b610935565b34801561027c57600080fd5b5061024361028b366004611a99565b610a92565b34801561029c57600080fd5b506101aa6102ab366004611d1c565b610af2565b3480156102bc57600080fd5b506102d06102cb366004611d37565b610b3c565b604051908152602001610152565b3480156102ea57600080fd5b506101466102f9366004611d1c565b610d72565b6102d061030c366004611deb565b610d95565b34801561031d57600080fd5b506101aa61032c366004611e73565b610fe2565b34801561033d57600080fd5b5061035161034c366004611a99565b611121565b60405161015296959493929190611f06565b34801561036f57600080fd5b5061014661037e366004611b3f565b61132a565b34801561038f57600080fd5b5061014661039e366004611f66565b61133d565b3480156103af57600080fd5b506103b8611459565b6040516101529190612025565b3480156103d157600080fd5b506101aa61150b565b3480156103e657600080fd5b506103fa6103f5366004611a99565b611553565b604051610152959493929190612038565b34801561041757600080fd5b5061042b610426366004612073565b611634565b60405161015291906120e7565b34801561044457600080fd5b506103b8610453366004611a99565b6117d4565b6000818152600160208181526040808420928301546002840154845483518186028101860190945280845260609695869590949185918301828280156104bd57602002820191906000526020600020905b8154815260200190600101908083116104a9575b505050505092509250925092509193909250565b60006104db611834565b9050333014806104f057506104f08133611858565b6105155760405162461bcd60e51b815260040161050c9061213c565b60405180910390fd5b60008481526001602052604090206002015484900361056b5760405162461bcd60e51b81526020600482015260126024820152714b657920616c72656164792065786973747360701b604482015260640161050c565b600084815260016020818152604080842060028082018a905581548086018355828752848720018990559084018790558785528252808420805493840181558452908320909101869055518391859187917f480000bb1edad8ca1470381cc334b1917fbd51c6531f3a623ea8e0ec7e38a6e991a450505050565b6000806105f0611834565b90503330148061060557506106058133611858565b6106215760405162461bcd60e51b815260040161050c9061213c565b600083815260076020526040902060028101546001600160a01b03166106595760405162461bcd60e51b815260040161050c90612173565b6000848152600760205260408120818155600181018290556002810180546001600160a01b0319169055906106916003830182611a02565b61069f600483016000611a02565b6106ad600583016000611a02565b50506002810154815460018301546040516001600160a01b039093169287917f3cf57863a89432c61c4a27073c6ee39e8a764bff5a05aebfbcdcdc80b2e6130a9161070791906003880190600489019060058a0190612258565b60405180910390a460019250505b50919050565b6000610725611834565b90503330148061073a575061073a8133611858565b6107565760405162461bcd60e51b815260040161050c9061213c565b60008381526001602052604090206002015483146107a45760405162461bcd60e51b815260206004820152600b60248201526a4e6f2073756368206b657960a81b604482015260640161050c565b60005b6000848152600160205260409020548110156108245760008481526001602052604090208054849190839081106107e0576107e06122a2565b90600052602060002001540361081c576000848152600160205260409020805482908110610810576108106122a2565b60009182526020822001555b6001016107a7565b5060008381526001602081905260408083209091015490519091849186917f585a4aef50f8267a92b32412b331b20f7f8b96f2245b253b9cc50dcc621d339791a460008381526001602052604081209061087e8282611a3c565b50600060018201819055600290910155505050565b600061089d611834565b9050333014806108b257506108b28133611858565b6108ce5760405162461bcd60e51b815260040161050c9061213c565b505050565b60008181526009602090815260409182902080548351818402810184019094528084526060939283018282801561092957602002820191906000526020600020905b815481526020019060010190808311610915575b50505050509050919050565b600061093f611834565b90503330148061095457506109548133611858565b6109705760405162461bcd60e51b815260040161050c9061213c565b6040518060600160405280858152602001846006811115610993576109936120af565b8152602001838152506003856040516109ac91906122b8565b908152604051908190036020019020815181906109c99082612337565b50602082015160018083018054909160ff19909116908360068111156109f1576109f16120af565b021790555060408201516002820190610a0a9082612337565b5090505060046000846006811115610a2457610a246120af565b81526020808201929092526040016000908120805460018101825590825291902001610a508582612337565b507f6e67a5f9bc83ea701198a3b41ffeac208cbd933c11238c154e9259ca8cb696a4848484604051610a84939291906123ef565b60405180910390a150505050565b60008181526002602090815260409182902080548351818402810184019094528084526060939283018282801561092957602002820191906000526020600020908154815260200190600101908083116109155750505050509050919050565b3360009081526020819052604090205460ff16151560011480610b1457503033145b610b305760405162461bcd60e51b815260040161050c9061242b565b610b398161187d565b50565b6000866000610b49611834565b9050610b568133846118a1565b610b725760405162461bcd60e51b815260040161050c9061245f565b6040516001600160601b0319606089901b166020820152603481018a905260009060540160408051808303601f1901815291815281516020928301206000818152600790935291208b8155600181018b90556002810180546001600160a01b0319166001600160a01b038c1617905590915060038101610bf28982612337565b5060048101610c018882612337565b5060058101610c108782612337565b5060008b815260096020908152604080832080546001818101835591855283852001869055600a80548083019091557fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a801869055858452600790925290912082548155828201549181019190915560028083015490820180546001600160a01b0319166001600160a01b039092169190911790558190600380820190610cb8908401826124a4565b50600481810190610ccb908401826124a4565b50600581810190610cde908401826124a4565b5050600880546001810182556000919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee301839055506040516001600160a01b038a16908c9084907f46149b18aa084502c3f12bc75e19eda8bda8d102b82cce8474677a6d0d5f43c590610d5b908f908e908e908e9061256b565b60405180910390a450989998505050505050505050565b6001600160a01b03811660009081526020819052604081205460ff165b92915050565b600080610da0611834565b905033301480610db55750610db58133611858565b610dd15760405162461bcd60e51b815260040161050c9061213c565b6040516001600160601b03193360601b166020820152610e0b90603401604051602081830303815290604052805190602001206001611923565b610e665760405162461bcd60e51b815260206004820152602660248201527f53656e64657220646f6573206e6f742068617665206d616e6167656d656e742060448201526572696768747360d01b606482015260840161050c565b423387878787604051602001610e81969594939291906125aa565b6040516020818303038152906040528051906020012060001c91506000866001600160a01b0316868686604051610eb99291906125ec565b60006040518083038185875af1925050503d8060008114610ef6576040519150601f19603f3d011682016040523d82523d6000602084013e610efb565b606091505b5050905080610f425760405162461bcd60e51b8152602060048201526013602482015272115512081d1c985b9cd9995c8819985a5b1959606a1b604482015260640161050c565b8015610f925785876001600160a01b0316847f1f920dbda597d7bf95035464170fa58d0a4b57f13a1c315ace6793b9f63688b88888604051610f859291906125fc565b60405180910390a4610fd8565b85876001600160a01b0316847fe10c49d9f7c71da23262367013434763cfdb2332267641728d25cd712c5c6a688888604051610fcf9291906125fc565b60405180910390a45b5050949350505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff1615906001600160401b03166000811580156110275750825b90506000826001600160401b031660011480156110435750303b155b905081158015611051575080155b1561106f5760405163f92ee8a960e01b815260040160405180910390fd5b84546001600160401b0319166001178555831561109857845460ff60401b1916600160401b1785555b6110a18861187d565b600580546001600160a01b03808a166001600160a01b0319928316179092556006805492891692909116919091179055831561111757845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b5050505050505050565b600080600060608060606000600760008981526020019081526020016000209050806000015481600101548260020160009054906101000a90046001600160a01b031683600301846004018560050182805461117c906121a1565b80601f01602080910402602001604051908101604052809291908181526020018280546111a8906121a1565b80156111f55780601f106111ca576101008083540402835291602001916111f5565b820191906000526020600020905b8154815290600101906020018083116111d857829003601f168201915b50505050509250818054611208906121a1565b80601f0160208091040260200160405190810160405280929190818152602001828054611234906121a1565b80156112815780601f1061125657610100808354040283529160200191611281565b820191906000526020600020905b81548152906001019060200180831161126457829003601f168201915b50505050509150808054611294906121a1565b80601f01602080910402602001604051908101604052809291908181526020018280546112c0906121a1565b801561130d5780601f106112e25761010080835404028352916020019161130d565b820191906000526020600020905b8154815290600101906020018083116112f057829003601f168201915b505050505090509650965096509650965096505091939550919395565b60006113368383611923565b9392505050565b600086600061134a611834565b90506113578133846118a1565b6113735760405162461bcd60e51b815260040161050c9061245f565b60008a815260076020526040902060028101546001600160a01b03166113ab5760405162461bcd60e51b815260040161050c90612173565b898155600181018990556002810180546001600160a01b0319166001600160a01b038a16179055600381016113e08882612337565b50600481016113ef8782612337565b50600581016113fe8682612337565b50876001600160a01b03168a8c7f3bab293fc00db832d7619a9299914251b8747c036867ec056cbd506f60135b138c8b8b8b604051611440949392919061256b565b60405180910390a45060019a9950505050505050505050565b600a546060906000906001600160401b0381111561147957611479611bd9565b6040519080825280602002602001820160405280156114a2578160200160208202803683370190505b50905060005b600a548110156107155760076000600a83815481106114c9576114c96122a2565b90600052602060002001548152602001908152602001600020600001548282815181106114f8576114f86122a2565b60209081029190910101526001016114a8565b3360009081526020819052604090205460ff1615156001148061152d57503033145b6115495760405162461bcd60e51b815260040161050c9061242b565b6115516119ab565b565b604080516020810182526000808252915162461bcd60e51b81528291908290819061050c9060040160208082526087908201527f4944454e544954595f455845435554494f4e5f4e4f545f494d504c454d454e5460408201527f45443a20457865637574696f6e2066756e6374696f6e616c697479206973206e60608201527f6f7420737570706f7274656420696e207468697320696d706c656d656e74617460808201527f696f6e2e20557365206469726563742066756e6374696f6e2063616c6c73206960a0820152663739ba32b0b21760c91b60c082015260e00190565b60408051606080820183528082526000602083015281830152905160039061165d9084906122b8565b9081526020016040518091039020604051806060016040529081600082018054611686906121a1565b80601f01602080910402602001604051908101604052809291908181526020018280546116b2906121a1565b80156116ff5780601f106116d4576101008083540402835291602001916116ff565b820191906000526020600020905b8154815290600101906020018083116116e257829003601f168201915b5050509183525050600182015460209091019060ff166006811115611726576117266120af565b6006811115611737576117376120af565b815260200160028201805461174b906121a1565b80601f0160208091040260200160405190810160405280929190818152602001828054611777906121a1565b80156117c45780601f10611799576101008083540402835291602001916117c4565b820191906000526020600020905b8154815290600101906020018083116117a757829003601f168201915b5050505050815250509050919050565b60008181526001602090815260409182902080548351818402810184019094528084526060939283018282801561092957602002820191906000526020600020908154815260200190600101908083116109155750505050509050919050565b7fbd516eb36b5d4489adb2e717e7d0ce56c1b814eda85e78ad9d8f240b24dd830d90565b6001600160a01b038181166000908152600d8401602052604090205416151592915050565b6001600160a01b03166000908152602081905260409020805460ff19166001179055565b60006118ad8484611858565b6118b957506000611336565b6001600160a01b0383166000908152600d850160205260408120600101905b815481101561191757838282815481106118f4576118f46122a2565b90600052602060002001540361190f57600192505050611336565b6001016118d8565b50600095945050505050565b600082815260016020526040812060020154810361194357506000610d8f565b60005b6000848152600160205260409020548110156119a157600084815260016020526040902080548491908390811061197f5761197f6122a2565b906000526020600020015403611999576001915050610d8f565b600101611946565b5060009392505050565b3360009081526020819052604090205460ff161515600114806119cd57503033145b6119e95760405162461bcd60e51b815260040161050c9061242b565b336000908152602081905260409020805460ff19169055565b508054611a0e906121a1565b6000825580601f10611a1e575050565b601f016020900490600052602060002090810190610b399190611a56565b5080546000825590600052602060002090810190610b3991905b5b80821115611a6b5760008155600101611a57565b5090565b600060208284031215611a8157600080fd5b81356001600160e01b03198116811461133657600080fd5b600060208284031215611aab57600080fd5b5035919050565b600081518084526020840193506020830160005b82811015611ae4578151865260209586019590910190600101611ac6565b5093949350505050565b606081526000611b016060830186611ab2565b60208301949094525060400152919050565b600080600060608486031215611b2857600080fd5b505081359360208301359350604090920135919050565b60008060408385031215611b5257600080fd5b50508035926020909101359150565b60008060408385031215611b7457600080fd5b8235915060208301358015158114611b8b57600080fd5b809150509250929050565b602080825282518282018190526000918401906040840190835b81811015611bce578351835260209384019390920191600101611bb0565b509095945050505050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112611c0057600080fd5b8135602083016000806001600160401b03841115611c2057611c20611bd9565b50604051601f19601f85018116603f011681018181106001600160401b0382111715611c4e57611c4e611bd9565b604052838152905080828401871015611c6657600080fd5b838360208301376000602085830101528094505050505092915050565b600080600060608486031215611c9857600080fd5b83356001600160401b03811115611cae57600080fd5b611cba86828701611bef565b935050602084013560078110611ccf57600080fd5b915060408401356001600160401b03811115611cea57600080fd5b611cf686828701611bef565b9150509250925092565b80356001600160a01b0381168114611d1757600080fd5b919050565b600060208284031215611d2e57600080fd5b61133682611d00565b60008060008060008060c08789031215611d5057600080fd5b8635955060208701359450611d6760408801611d00565b935060608701356001600160401b03811115611d8257600080fd5b611d8e89828a01611bef565b93505060808701356001600160401b03811115611daa57600080fd5b611db689828a01611bef565b92505060a08701356001600160401b03811115611dd257600080fd5b611dde89828a01611bef565b9150509295509295509295565b60008060008060608587031215611e0157600080fd5b611e0a85611d00565b93506020850135925060408501356001600160401b03811115611e2c57600080fd5b8501601f81018713611e3d57600080fd5b80356001600160401b03811115611e5357600080fd5b876020828401011115611e6557600080fd5b949793965060200194505050565b600080600060608486031215611e8857600080fd5b611e9184611d00565b9250611e9f60208501611d00565b9150611ead60408501611d00565b90509250925092565b60005b83811015611ed1578181015183820152602001611eb9565b50506000910152565b60008151808452611ef2816020860160208601611eb6565b601f01601f19169290920160200192915050565b86815285602082015260018060a01b038516604082015260c060608201526000611f3360c0830186611eda565b8281036080840152611f458186611eda565b905082810360a0840152611f598185611eda565b9998505050505050505050565b600080600080600080600060e0888a031215611f8157600080fd5b873596506020880135955060408801359450611f9f60608901611d00565b935060808801356001600160401b03811115611fba57600080fd5b611fc68a828b01611bef565b93505060a08801356001600160401b03811115611fe257600080fd5b611fee8a828b01611bef565b92505060c08801356001600160401b0381111561200a57600080fd5b6120168a828b01611bef565b91505092959891949750929550565b6020815260006113366020830184611ab2565b60018060a01b038616815284602082015260a06040820152600061205f60a0830186611eda565b931515606083015250608001529392505050565b60006020828403121561208557600080fd5b81356001600160401b0381111561209b57600080fd5b6120a784828501611bef565b949350505050565b634e487b7160e01b600052602160045260246000fd5b600781106120e357634e487b7160e01b600052602160045260246000fd5b9052565b6020815260008251606060208401526121036080840182611eda565b9050602084015161211760408501826120c5565b506040840151838203601f190160608501526121338282611eda565b95945050505050565b6020808252601e908201527f53656e646572206973206e6f7420612074727573746564206973737565720000604082015260600190565b60208082526014908201527310db185a5b48191bd95cc81b9bdd08195e1a5cdd60621b604082015260600190565b600181811c908216806121b557607f821691505b60208210810361071557634e487b7160e01b600052602260045260246000fd5b600081546121e2816121a1565b8085526001821680156121fc57600181146122185761224f565b60ff1983166020870152602082151560051b870101935061224f565b84600052602060002060005b838110156122465781546020828a010152600182019150602081019050612224565b87016020019450505b50505092915050565b84815260806020820152600061227160808301866121d5565b828103604084015261228381866121d5565b9050828103606084015261229781856121d5565b979650505050505050565b634e487b7160e01b600052603260045260246000fd5b600082516122ca818460208701611eb6565b9190910192915050565b601f8211156108ce57806000526020600020601f840160051c810160208510156122fb5750805b601f840160051c820191505b8181101561231b5760008155600101612307565b5050505050565b600019600383901b1c191660019190911b1790565b81516001600160401b0381111561235057612350611bd9565b6123648161235e84546121a1565b846122d4565b6020601f82116001811461239257600083156123805750848201515b61238a8482612322565b85555061231b565b600084815260208120601f198516915b828110156123c257878501518255602094850194600190920191016123a2565b50848210156123e05786840151600019600387901b60f8161c191681555b50505050600190811b01905550565b6060815260006124026060830186611eda565b61240f60208401866120c5565b82810360408401526124218185611eda565b9695505050505050565b6020808252601a908201527931b0b63632b91034b9903737ba10309031b7b73a3937b63632b960311b604082015260600190565b60208082526025908201527f497373756572206e6f7420617574686f72697a656420666f7220636c61696d20604082015264746f70696360d81b606082015260800190565b8181036124af575050565b6124b982546121a1565b6001600160401b038111156124d0576124d0611bd9565b6124de8161235e84546121a1565b6000601f821160018114612503576000831561238057508482015461238a8482612322565b600085815260209020601f19841690600086815260209020845b8381101561253d578286015482556001958601959091019060200161251d565b508583101561255b5781850154600019600388901b60f8161c191681555b5050505050600190811b01905550565b8481526080602082015260006125846080830186611eda565b82810360408401526125968186611eda565b905082810360608401526122978185611eda565b8681526001600160601b0319606087811b8216602084015286901b16603482015260488101849052818360688301376000910160680190815295945050505050565b8183823760009101908152919050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f1916010191905056fea2646970667358221220d59e094c1023e8e6e09a01809aa4e44c9a441ecad8de136ca682d24df19d39d264736f6c634300081c0033",
  "deployedBytecode": "0x6080604052600436106101105760003560e01c806301ffc9a71461011557806312aaac701461015b5780631d3812401461018a5780634eee424a146101ac57806353d413c5146101cc578063747442d3146101ec57806380007e831461020c57806380e9e9e11461022357806389000275146102505780639010f72614610270578063a7fc7a0714610290578063b1a34e0d146102b0578063b429afeb146102de578063b61d27f6146102fe578063c0c53b8b14610311578063c9100bcb14610331578063d202158d14610363578063db6a20a514610383578063df09d604146103a3578063e1c28bef146103c5578063e326fbd4146103da578063e8a51fca1461040b578063fb307b3414610438575b600080fd5b34801561012157600080fd5b50610146610130366004611a6f565b6001600160e01b031916635f09a88760e01b1490565b60405190151581526020015b60405180910390f35b34801561016757600080fd5b5061017b610176366004611a99565b610458565b60405161015293929190611aee565b34801561019657600080fd5b506101aa6101a5366004611b13565b6104d1565b005b3480156101b857600080fd5b506101466101c7366004611a99565b6105e5565b3480156101d857600080fd5b506101aa6101e7366004611b3f565b61071b565b3480156101f857600080fd5b506101aa610207366004611b61565b610893565b34801561021857600080fd5b506008541515610146565b34801561022f57600080fd5b5061024361023e366004611a99565b6108d3565b6040516101529190611b96565b34801561025c57600080fd5b506101aa61026b366004611c83565b610935565b34801561027c57600080fd5b5061024361028b366004611a99565b610a92565b34801561029c57600080fd5b506101aa6102ab366004611d1c565b610af2565b3480156102bc57600080fd5b506102d06102cb366004611d37565b610b3c565b604051908152602001610152565b3480156102ea57600080fd5b506101466102f9366004611d1c565b610d72565b6102d061030c366004611deb565b610d95565b34801561031d57600080fd5b506101aa61032c366004611e73565b610fe2565b34801561033d57600080fd5b5061035161034c366004611a99565b611121565b60405161015296959493929190611f06565b34801561036f57600080fd5b5061014661037e366004611b3f565b61132a565b34801561038f57600080fd5b5061014661039e366004611f66565b61133d565b3480156103af57600080fd5b506103b8611459565b6040516101529190612025565b3480156103d157600080fd5b506101aa61150b565b3480156103e657600080fd5b506103fa6103f5366004611a99565b611553565b604051610152959493929190612038565b34801561041757600080fd5b5061042b610426366004612073565b611634565b60405161015291906120e7565b34801561044457600080fd5b506103b8610453366004611a99565b6117d4565b6000818152600160208181526040808420928301546002840154845483518186028101860190945280845260609695869590949185918301828280156104bd57602002820191906000526020600020905b8154815260200190600101908083116104a9575b505050505092509250925092509193909250565b60006104db611834565b9050333014806104f057506104f08133611858565b6105155760405162461bcd60e51b815260040161050c9061213c565b60405180910390fd5b60008481526001602052604090206002015484900361056b5760405162461bcd60e51b81526020600482015260126024820152714b657920616c72656164792065786973747360701b604482015260640161050c565b600084815260016020818152604080842060028082018a905581548086018355828752848720018990559084018790558785528252808420805493840181558452908320909101869055518391859187917f480000bb1edad8ca1470381cc334b1917fbd51c6531f3a623ea8e0ec7e38a6e991a450505050565b6000806105f0611834565b90503330148061060557506106058133611858565b6106215760405162461bcd60e51b815260040161050c9061213c565b600083815260076020526040902060028101546001600160a01b03166106595760405162461bcd60e51b815260040161050c90612173565b6000848152600760205260408120818155600181018290556002810180546001600160a01b0319169055906106916003830182611a02565b61069f600483016000611a02565b6106ad600583016000611a02565b50506002810154815460018301546040516001600160a01b039093169287917f3cf57863a89432c61c4a27073c6ee39e8a764bff5a05aebfbcdcdc80b2e6130a9161070791906003880190600489019060058a0190612258565b60405180910390a460019250505b50919050565b6000610725611834565b90503330148061073a575061073a8133611858565b6107565760405162461bcd60e51b815260040161050c9061213c565b60008381526001602052604090206002015483146107a45760405162461bcd60e51b815260206004820152600b60248201526a4e6f2073756368206b657960a81b604482015260640161050c565b60005b6000848152600160205260409020548110156108245760008481526001602052604090208054849190839081106107e0576107e06122a2565b90600052602060002001540361081c576000848152600160205260409020805482908110610810576108106122a2565b60009182526020822001555b6001016107a7565b5060008381526001602081905260408083209091015490519091849186917f585a4aef50f8267a92b32412b331b20f7f8b96f2245b253b9cc50dcc621d339791a460008381526001602052604081209061087e8282611a3c565b50600060018201819055600290910155505050565b600061089d611834565b9050333014806108b257506108b28133611858565b6108ce5760405162461bcd60e51b815260040161050c9061213c565b505050565b60008181526009602090815260409182902080548351818402810184019094528084526060939283018282801561092957602002820191906000526020600020905b815481526020019060010190808311610915575b50505050509050919050565b600061093f611834565b90503330148061095457506109548133611858565b6109705760405162461bcd60e51b815260040161050c9061213c565b6040518060600160405280858152602001846006811115610993576109936120af565b8152602001838152506003856040516109ac91906122b8565b908152604051908190036020019020815181906109c99082612337565b50602082015160018083018054909160ff19909116908360068111156109f1576109f16120af565b021790555060408201516002820190610a0a9082612337565b5090505060046000846006811115610a2457610a246120af565b81526020808201929092526040016000908120805460018101825590825291902001610a508582612337565b507f6e67a5f9bc83ea701198a3b41ffeac208cbd933c11238c154e9259ca8cb696a4848484604051610a84939291906123ef565b60405180910390a150505050565b60008181526002602090815260409182902080548351818402810184019094528084526060939283018282801561092957602002820191906000526020600020908154815260200190600101908083116109155750505050509050919050565b3360009081526020819052604090205460ff16151560011480610b1457503033145b610b305760405162461bcd60e51b815260040161050c9061242b565b610b398161187d565b50565b6000866000610b49611834565b9050610b568133846118a1565b610b725760405162461bcd60e51b815260040161050c9061245f565b6040516001600160601b0319606089901b166020820152603481018a905260009060540160408051808303601f1901815291815281516020928301206000818152600790935291208b8155600181018b90556002810180546001600160a01b0319166001600160a01b038c1617905590915060038101610bf28982612337565b5060048101610c018882612337565b5060058101610c108782612337565b5060008b815260096020908152604080832080546001818101835591855283852001869055600a80548083019091557fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a801869055858452600790925290912082548155828201549181019190915560028083015490820180546001600160a01b0319166001600160a01b039092169190911790558190600380820190610cb8908401826124a4565b50600481810190610ccb908401826124a4565b50600581810190610cde908401826124a4565b5050600880546001810182556000919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee301839055506040516001600160a01b038a16908c9084907f46149b18aa084502c3f12bc75e19eda8bda8d102b82cce8474677a6d0d5f43c590610d5b908f908e908e908e9061256b565b60405180910390a450989998505050505050505050565b6001600160a01b03811660009081526020819052604081205460ff165b92915050565b600080610da0611834565b905033301480610db55750610db58133611858565b610dd15760405162461bcd60e51b815260040161050c9061213c565b6040516001600160601b03193360601b166020820152610e0b90603401604051602081830303815290604052805190602001206001611923565b610e665760405162461bcd60e51b815260206004820152602660248201527f53656e64657220646f6573206e6f742068617665206d616e6167656d656e742060448201526572696768747360d01b606482015260840161050c565b423387878787604051602001610e81969594939291906125aa565b6040516020818303038152906040528051906020012060001c91506000866001600160a01b0316868686604051610eb99291906125ec565b60006040518083038185875af1925050503d8060008114610ef6576040519150601f19603f3d011682016040523d82523d6000602084013e610efb565b606091505b5050905080610f425760405162461bcd60e51b8152602060048201526013602482015272115512081d1c985b9cd9995c8819985a5b1959606a1b604482015260640161050c565b8015610f925785876001600160a01b0316847f1f920dbda597d7bf95035464170fa58d0a4b57f13a1c315ace6793b9f63688b88888604051610f859291906125fc565b60405180910390a4610fd8565b85876001600160a01b0316847fe10c49d9f7c71da23262367013434763cfdb2332267641728d25cd712c5c6a688888604051610fcf9291906125fc565b60405180910390a45b5050949350505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff1615906001600160401b03166000811580156110275750825b90506000826001600160401b031660011480156110435750303b155b905081158015611051575080155b1561106f5760405163f92ee8a960e01b815260040160405180910390fd5b84546001600160401b0319166001178555831561109857845460ff60401b1916600160401b1785555b6110a18861187d565b600580546001600160a01b03808a166001600160a01b0319928316179092556006805492891692909116919091179055831561111757845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b5050505050505050565b600080600060608060606000600760008981526020019081526020016000209050806000015481600101548260020160009054906101000a90046001600160a01b031683600301846004018560050182805461117c906121a1565b80601f01602080910402602001604051908101604052809291908181526020018280546111a8906121a1565b80156111f55780601f106111ca576101008083540402835291602001916111f5565b820191906000526020600020905b8154815290600101906020018083116111d857829003601f168201915b50505050509250818054611208906121a1565b80601f0160208091040260200160405190810160405280929190818152602001828054611234906121a1565b80156112815780601f1061125657610100808354040283529160200191611281565b820191906000526020600020905b81548152906001019060200180831161126457829003601f168201915b50505050509150808054611294906121a1565b80601f01602080910402602001604051908101604052809291908181526020018280546112c0906121a1565b801561130d5780601f106112e25761010080835404028352916020019161130d565b820191906000526020600020905b8154815290600101906020018083116112f057829003601f168201915b505050505090509650965096509650965096505091939550919395565b60006113368383611923565b9392505050565b600086600061134a611834565b90506113578133846118a1565b6113735760405162461bcd60e51b815260040161050c9061245f565b60008a815260076020526040902060028101546001600160a01b03166113ab5760405162461bcd60e51b815260040161050c90612173565b898155600181018990556002810180546001600160a01b0319166001600160a01b038a16179055600381016113e08882612337565b50600481016113ef8782612337565b50600581016113fe8682612337565b50876001600160a01b03168a8c7f3bab293fc00db832d7619a9299914251b8747c036867ec056cbd506f60135b138c8b8b8b604051611440949392919061256b565b60405180910390a45060019a9950505050505050505050565b600a546060906000906001600160401b0381111561147957611479611bd9565b6040519080825280602002602001820160405280156114a2578160200160208202803683370190505b50905060005b600a548110156107155760076000600a83815481106114c9576114c96122a2565b90600052602060002001548152602001908152602001600020600001548282815181106114f8576114f86122a2565b60209081029190910101526001016114a8565b3360009081526020819052604090205460ff1615156001148061152d57503033145b6115495760405162461bcd60e51b815260040161050c9061242b565b6115516119ab565b565b604080516020810182526000808252915162461bcd60e51b81528291908290819061050c9060040160208082526087908201527f4944454e544954595f455845435554494f4e5f4e4f545f494d504c454d454e5460408201527f45443a20457865637574696f6e2066756e6374696f6e616c697479206973206e60608201527f6f7420737570706f7274656420696e207468697320696d706c656d656e74617460808201527f696f6e2e20557365206469726563742066756e6374696f6e2063616c6c73206960a0820152663739ba32b0b21760c91b60c082015260e00190565b60408051606080820183528082526000602083015281830152905160039061165d9084906122b8565b9081526020016040518091039020604051806060016040529081600082018054611686906121a1565b80601f01602080910402602001604051908101604052809291908181526020018280546116b2906121a1565b80156116ff5780601f106116d4576101008083540402835291602001916116ff565b820191906000526020600020905b8154815290600101906020018083116116e257829003601f168201915b5050509183525050600182015460209091019060ff166006811115611726576117266120af565b6006811115611737576117376120af565b815260200160028201805461174b906121a1565b80601f0160208091040260200160405190810160405280929190818152602001828054611777906121a1565b80156117c45780601f10611799576101008083540402835291602001916117c4565b820191906000526020600020905b8154815290600101906020018083116117a757829003601f168201915b5050505050815250509050919050565b60008181526001602090815260409182902080548351818402810184019094528084526060939283018282801561092957602002820191906000526020600020908154815260200190600101908083116109155750505050509050919050565b7fbd516eb36b5d4489adb2e717e7d0ce56c1b814eda85e78ad9d8f240b24dd830d90565b6001600160a01b038181166000908152600d8401602052604090205416151592915050565b6001600160a01b03166000908152602081905260409020805460ff19166001179055565b60006118ad8484611858565b6118b957506000611336565b6001600160a01b0383166000908152600d850160205260408120600101905b815481101561191757838282815481106118f4576118f46122a2565b90600052602060002001540361190f57600192505050611336565b6001016118d8565b50600095945050505050565b600082815260016020526040812060020154810361194357506000610d8f565b60005b6000848152600160205260409020548110156119a157600084815260016020526040902080548491908390811061197f5761197f6122a2565b906000526020600020015403611999576001915050610d8f565b600101611946565b5060009392505050565b3360009081526020819052604090205460ff161515600114806119cd57503033145b6119e95760405162461bcd60e51b815260040161050c9061242b565b336000908152602081905260409020805460ff19169055565b508054611a0e906121a1565b6000825580601f10611a1e575050565b601f016020900490600052602060002090810190610b399190611a56565b5080546000825590600052602060002090810190610b3991905b5b80821115611a6b5760008155600101611a57565b5090565b600060208284031215611a8157600080fd5b81356001600160e01b03198116811461133657600080fd5b600060208284031215611aab57600080fd5b5035919050565b600081518084526020840193506020830160005b82811015611ae4578151865260209586019590910190600101611ac6565b5093949350505050565b606081526000611b016060830186611ab2565b60208301949094525060400152919050565b600080600060608486031215611b2857600080fd5b505081359360208301359350604090920135919050565b60008060408385031215611b5257600080fd5b50508035926020909101359150565b60008060408385031215611b7457600080fd5b8235915060208301358015158114611b8b57600080fd5b809150509250929050565b602080825282518282018190526000918401906040840190835b81811015611bce578351835260209384019390920191600101611bb0565b509095945050505050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112611c0057600080fd5b8135602083016000806001600160401b03841115611c2057611c20611bd9565b50604051601f19601f85018116603f011681018181106001600160401b0382111715611c4e57611c4e611bd9565b604052838152905080828401871015611c6657600080fd5b838360208301376000602085830101528094505050505092915050565b600080600060608486031215611c9857600080fd5b83356001600160401b03811115611cae57600080fd5b611cba86828701611bef565b935050602084013560078110611ccf57600080fd5b915060408401356001600160401b03811115611cea57600080fd5b611cf686828701611bef565b9150509250925092565b80356001600160a01b0381168114611d1757600080fd5b919050565b600060208284031215611d2e57600080fd5b61133682611d00565b60008060008060008060c08789031215611d5057600080fd5b8635955060208701359450611d6760408801611d00565b935060608701356001600160401b03811115611d8257600080fd5b611d8e89828a01611bef565b93505060808701356001600160401b03811115611daa57600080fd5b611db689828a01611bef565b92505060a08701356001600160401b03811115611dd257600080fd5b611dde89828a01611bef565b9150509295509295509295565b60008060008060608587031215611e0157600080fd5b611e0a85611d00565b93506020850135925060408501356001600160401b03811115611e2c57600080fd5b8501601f81018713611e3d57600080fd5b80356001600160401b03811115611e5357600080fd5b876020828401011115611e6557600080fd5b949793965060200194505050565b600080600060608486031215611e8857600080fd5b611e9184611d00565b9250611e9f60208501611d00565b9150611ead60408501611d00565b90509250925092565b60005b83811015611ed1578181015183820152602001611eb9565b50506000910152565b60008151808452611ef2816020860160208601611eb6565b601f01601f19169290920160200192915050565b86815285602082015260018060a01b038516604082015260c060608201526000611f3360c0830186611eda565b8281036080840152611f458186611eda565b905082810360a0840152611f598185611eda565b9998505050505050505050565b600080600080600080600060e0888a031215611f8157600080fd5b873596506020880135955060408801359450611f9f60608901611d00565b935060808801356001600160401b03811115611fba57600080fd5b611fc68a828b01611bef565b93505060a08801356001600160401b03811115611fe257600080fd5b611fee8a828b01611bef565b92505060c08801356001600160401b0381111561200a57600080fd5b6120168a828b01611bef565b91505092959891949750929550565b6020815260006113366020830184611ab2565b60018060a01b038616815284602082015260a06040820152600061205f60a0830186611eda565b931515606083015250608001529392505050565b60006020828403121561208557600080fd5b81356001600160401b0381111561209b57600080fd5b6120a784828501611bef565b949350505050565b634e487b7160e01b600052602160045260246000fd5b600781106120e357634e487b7160e01b600052602160045260246000fd5b9052565b6020815260008251606060208401526121036080840182611eda565b9050602084015161211760408501826120c5565b506040840151838203601f190160608501526121338282611eda565b95945050505050565b6020808252601e908201527f53656e646572206973206e6f7420612074727573746564206973737565720000604082015260600190565b60208082526014908201527310db185a5b48191bd95cc81b9bdd08195e1a5cdd60621b604082015260600190565b600181811c908216806121b557607f821691505b60208210810361071557634e487b7160e01b600052602260045260246000fd5b600081546121e2816121a1565b8085526001821680156121fc57600181146122185761224f565b60ff1983166020870152602082151560051b870101935061224f565b84600052602060002060005b838110156122465781546020828a010152600182019150602081019050612224565b87016020019450505b50505092915050565b84815260806020820152600061227160808301866121d5565b828103604084015261228381866121d5565b9050828103606084015261229781856121d5565b979650505050505050565b634e487b7160e01b600052603260045260246000fd5b600082516122ca818460208701611eb6565b9190910192915050565b601f8211156108ce57806000526020600020601f840160051c810160208510156122fb5750805b601f840160051c820191505b8181101561231b5760008155600101612307565b5050505050565b600019600383901b1c191660019190911b1790565b81516001600160401b0381111561235057612350611bd9565b6123648161235e84546121a1565b846122d4565b6020601f82116001811461239257600083156123805750848201515b61238a8482612322565b85555061231b565b600084815260208120601f198516915b828110156123c257878501518255602094850194600190920191016123a2565b50848210156123e05786840151600019600387901b60f8161c191681555b50505050600190811b01905550565b6060815260006124026060830186611eda565b61240f60208401866120c5565b82810360408401526124218185611eda565b9695505050505050565b6020808252601a908201527931b0b63632b91034b9903737ba10309031b7b73a3937b63632b960311b604082015260600190565b60208082526025908201527f497373756572206e6f7420617574686f72697a656420666f7220636c61696d20604082015264746f70696360d81b606082015260800190565b8181036124af575050565b6124b982546121a1565b6001600160401b038111156124d0576124d0611bd9565b6124de8161235e84546121a1565b6000601f821160018114612503576000831561238057508482015461238a8482612322565b600085815260209020601f19841690600086815260209020845b8381101561253d578286015482556001958601959091019060200161251d565b508583101561255b5781850154600019600388901b60f8161c191681555b5050505050600190811b01905550565b8481526080602082015260006125846080830186611eda565b82810360408401526125968186611eda565b905082810360608401526122978185611eda565b8681526001600160601b0319606087811b8216602084015286901b16603482015260488101849052818360688301376000910160680190815295945050505050565b8183823760009101908152919050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f1916010191905056fea2646970667358221220d59e094c1023e8e6e09a01809aa4e44c9a441ecad8de136ca682d24df19d39d264736f6c634300081c0033",
  "devdoc": {
    "details": "This contract is used to store the claims of a user",
    "errors": {
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "addController(address)": {
        "details": "Add an address allowed to control this contract"
      },
      "changeClaim(bytes32,uint256,uint256,address,bytes,bytes,string)": {
        "details": "Implementation is minimal to satisfy the interface requirement"
      },
      "getExecution(uint256)": {
        "details": "This function is part of the ERC734 interface but not implemented in this version"
      },
      "initialize(address,address,address)": {
        "params": {
          "_identityRegistry": "the identity registry",
          "_owner": "the owner of the contract",
          "_trustedIssuerRegistry": "the trusted issuer registry"
        }
      },
      "isController(address)": {
        "details": "Check if this address is a controller"
      },
      "isVerified()": {
        "returns": {
          "_0": "true if the identity has at least one valid claim, false otherwise"
        }
      },
      "relinquishControl()": {
        "details": "Remove the sender address from the list of controllers"
      },
      "supportsInterface(bytes4)": {
        "details": "Interface identification is specified in ERC-165. This function  uses less than 30,000 gas.",
        "params": {
          "interfaceId": "The interface identifier, as specified in ERC-165"
        },
        "returns": {
          "_0": "`true` if the contract implements `interfaceID` and  `interfaceID` is not 0xffffffff, `false` otherwise"
        }
      }
    },
    "title": "Identity",
    "version": 1
  },
  "userdoc": {
    "events": {
      "ControllerAdded(address,address)": {
        "notice": "emitted when a controller is added."
      },
      "ControllerRemoved(address,address)": {
        "notice": "emitted when a controller is removed."
      }
    },
    "kind": "user",
    "methods": {
      "addClaim(uint256,uint256,address,bytes,bytes,string)": {
        "notice": "add a claim to the identity"
      },
      "addKey(bytes32,uint256,uint256)": {
        "notice": "add a key to the identity"
      },
      "changeClaim(bytes32,uint256,uint256,address,bytes,bytes,string)": {
        "notice": "Change an existing claim"
      },
      "getAttribute(string)": {
        "notice": "get an attribute for a tokenid keyed by string"
      },
      "getClaim(bytes32)": {
        "notice": "get the claim of an identity"
      },
      "getClaimIdsByTopic(uint256)": {
        "notice": "get the claim ids of an identity"
      },
      "getExecution(uint256)": {
        "notice": "Get execution details for a given execution ID"
      },
      "getKey(bytes32)": {
        "notice": "get a key from the identity"
      },
      "getKeyPurposes(bytes32)": {
        "notice": "get the purposes of a key"
      },
      "getKeysByPurpose(uint256)": {
        "notice": "get the keys of a purpose"
      },
      "initialize(address,address,address)": {
        "notice": "initialize the contract"
      },
      "isVerified()": {
        "notice": "Check if this identity has been verified"
      },
      "keyHasPurpose(bytes32,uint256)": {
        "notice": "check if a key has a purpose"
      },
      "removeKey(bytes32,uint256)": {
        "notice": "remove a key from the identity"
      },
      "supportsInterface(bytes4)": {
        "notice": "Query if a contract implements an interface"
      }
    },
    "notice": "This contract represents an identity of a user",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 36753,
        "contract": "contracts/identity/Identity.sol:Identity",
        "label": "_controllers",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 14212,
        "contract": "contracts/identity/Identity.sol:Identity",
        "label": "keys",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(Key)14430_storage)"
      },
      {
        "astId": 14217,
        "contract": "contracts/identity/Identity.sol:Identity",
        "label": "keysByPurpose",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_array(t_bytes32)dyn_storage)"
      },
      {
        "astId": 14222,
        "contract": "contracts/identity/Identity.sol:Identity",
        "label": "attributes",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_string_memory_ptr,t_struct(Attribute)18042_storage)"
      },
      {
        "astId": 14227,
        "contract": "contracts/identity/Identity.sol:Identity",
        "label": "attributeKeys",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_array(t_string_storage)dyn_storage)"
      },
      {
        "astId": 14229,
        "contract": "contracts/identity/Identity.sol:Identity",
        "label": "identityRegistry",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 14231,
        "contract": "contracts/identity/Identity.sol:Identity",
        "label": "trustedIssuerRegistry",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 14783,
        "contract": "contracts/identity/Identity.sol:Identity",
        "label": "claims",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_bytes32,t_struct(Claim)18168_storage)"
      },
      {
        "astId": 14786,
        "contract": "contracts/identity/Identity.sol:Identity",
        "label": "claimIds",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_bytes32)dyn_storage"
      },
      {
        "astId": 14791,
        "contract": "contracts/identity/Identity.sol:Identity",
        "label": "claimsByTopic",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_array(t_bytes32)dyn_storage)"
      },
      {
        "astId": 14794,
        "contract": "contracts/identity/Identity.sol:Identity",
        "label": "claimTopics",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_bytes32)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_enum(AttributeType)18034": {
        "encoding": "inplace",
        "label": "enum AttributeType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(Claim)18168_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct Claim)",
        "numberOfBytes": "32",
        "value": "t_struct(Claim)18168_storage"
      },
      "t_mapping(t_bytes32,t_struct(Key)14430_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct Identity.Key)",
        "numberOfBytes": "32",
        "value": "t_struct(Key)14430_storage"
      },
      "t_mapping(t_string_memory_ptr,t_struct(Attribute)18042_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct Attribute)",
        "numberOfBytes": "32",
        "value": "t_struct(Attribute)18042_storage"
      },
      "t_mapping(t_uint256,t_array(t_bytes32)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32[])",
        "numberOfBytes": "32",
        "value": "t_array(t_bytes32)dyn_storage"
      },
      "t_mapping(t_uint256,t_array(t_string_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string[])",
        "numberOfBytes": "32",
        "value": "t_array(t_string_storage)dyn_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Attribute)18042_storage": {
        "encoding": "inplace",
        "label": "struct Attribute",
        "members": [
          {
            "astId": 18036,
            "contract": "contracts/identity/Identity.sol:Identity",
            "label": "key",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 18039,
            "contract": "contracts/identity/Identity.sol:Identity",
            "label": "attributeType",
            "offset": 0,
            "slot": "1",
            "type": "t_enum(AttributeType)18034"
          },
          {
            "astId": 18041,
            "contract": "contracts/identity/Identity.sol:Identity",
            "label": "value",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Claim)18168_storage": {
        "encoding": "inplace",
        "label": "struct Claim",
        "members": [
          {
            "astId": 18157,
            "contract": "contracts/identity/Identity.sol:Identity",
            "label": "topic",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 18159,
            "contract": "contracts/identity/Identity.sol:Identity",
            "label": "scheme",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 18161,
            "contract": "contracts/identity/Identity.sol:Identity",
            "label": "issuer",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 18163,
            "contract": "contracts/identity/Identity.sol:Identity",
            "label": "signature",
            "offset": 0,
            "slot": "3",
            "type": "t_bytes_storage"
          },
          {
            "astId": 18165,
            "contract": "contracts/identity/Identity.sol:Identity",
            "label": "data",
            "offset": 0,
            "slot": "4",
            "type": "t_bytes_storage"
          },
          {
            "astId": 18167,
            "contract": "contracts/identity/Identity.sol:Identity",
            "label": "uri",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(Key)14430_storage": {
        "encoding": "inplace",
        "label": "struct Identity.Key",
        "members": [
          {
            "astId": 14425,
            "contract": "contracts/identity/Identity.sol:Identity",
            "label": "purposes",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 14427,
            "contract": "contracts/identity/Identity.sol:Identity",
            "label": "keyType",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 14429,
            "contract": "contracts/identity/Identity.sol:Identity",
            "label": "key",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}