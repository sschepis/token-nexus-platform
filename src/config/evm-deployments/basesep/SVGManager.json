{
  "address": "0xE6Ccc4284AFF145f86a8EABB688b453b99f57FE6",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Create2EmptyBytecode",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedDeployment",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "needed",
          "type": "uint256"
        }
      ],
      "name": "InsufficientBalance",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "controllerAddress",
          "type": "address"
        }
      ],
      "name": "ControllerAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "controllerAddress",
          "type": "address"
        }
      ],
      "name": "ControllerRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "template",
          "type": "address"
        }
      ],
      "name": "SVGTemplateCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_controller",
          "type": "address"
        }
      ],
      "name": "addController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "name": "createSVG",
      "outputs": [
        {
          "internalType": "address",
          "name": "_tplAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isController",
      "outputs": [
        {
          "internalType": "bool",
          "name": "allowed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "relinquishControl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "name": "svgAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "_svgAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "name": "svgString",
      "outputs": [
        {
          "internalType": "string",
          "name": "data_",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "svgs",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb3e1c9de9eaed9a94f39130fa3db89dc1eee4c82163a8b5251dc9c3f0e9f1ec5",
  "receipt": {
    "to": null,
    "from": "0x9508f0Da19eC1C52D9C52611e4433159492bb93b",
    "contractAddress": "0xE6Ccc4284AFF145f86a8EABB688b453b99f57FE6",
    "transactionIndex": 13,
    "gasUsed": "1778211",
    "logsBloom": "0x
    "blockHash": "0x1306325c4d264c8e2c74f3ae147df6b3c345493d48f49a488825302a459b4256",
    "transactionHash": "0xb3e1c9de9eaed9a94f39130fa3db89dc1eee4c82163a8b5251dc9c3f0e9f1ec5",
    "logs": [],
    "blockNumber": 26013745,
    "cumulativeGasUsed": "2352629",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "ccf876918ad4728259522ce4e695c811",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Create2EmptyBytecode\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedDeployment\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"controllerAddress\",\"type\":\"address\"}],\"name\":\"ControllerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"controllerAddress\",\"type\":\"address\"}],\"name\":\"ControllerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"template\",\"type\":\"address\"}],\"name\":\"SVGTemplateCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"addController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"createSVG\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_tplAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isController\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relinquishControl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"svgAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_svgAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"svgString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"data_\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"svgs\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"Create2EmptyBytecode()\":[{\"details\":\"There's no code to deploy.\"}],\"FailedDeployment()\":[{\"details\":\"The deployment failed.\"}],\"InsufficientBalance(uint256,uint256)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}]},\"kind\":\"dev\",\"methods\":{\"addController(address)\":{\"details\":\"Add an address allowed to control this contract\"},\"isController(address)\":{\"details\":\"Check if this address is a controller\"},\"relinquishControl()\":{\"details\":\"Remove the sender address from the list of controllers\"}},\"version\":1},\"userdoc\":{\"events\":{\"ControllerAdded(address,address)\":{\"notice\":\"emitted when a controller is added.\"},\"ControllerRemoved(address,address)\":{\"notice\":\"emitted when a controller is removed.\"}},\"kind\":\"user\",\"methods\":{\"createSVG(address,string)\":{\"notice\":\"add a new gem pool\"},\"svgAddress(string)\":{\"notice\":\"get the svg address of the given svg name. does not mean the file exists\"},\"svgString(string)\":{\"notice\":\"get the svg data of the given svg name as a string\"},\"svgs()\":{\"notice\":\"get all the svg namea in the contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/utilities/SVGManager.sol\":\"SVGManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":11},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Create2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Create2.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Errors} from \\\"./Errors.sol\\\";\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2 {\\n    /**\\n     * @dev There's no code to deploy.\\n     */\\n    error Create2EmptyBytecode();\\n\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address addr) {\\n        if (address(this).balance < amount) {\\n            revert Errors.InsufficientBalance(address(this).balance, amount);\\n        }\\n        if (bytecode.length == 0) {\\n            revert Create2EmptyBytecode();\\n        }\\n        assembly (\\\"memory-safe\\\") {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n            // if no address was created, and returndata is not empty, bubble revert\\n            if and(iszero(addr), not(iszero(returndatasize()))) {\\n                let p := mload(0x40)\\n                returndatacopy(p, 0, returndatasize())\\n                revert(p, returndatasize())\\n            }\\n        }\\n        if (addr == address(0)) {\\n            revert Errors.FailedDeployment();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address addr) {\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40) // Get free memory pointer\\n\\n            // |                   | \\u2193 ptr ...  \\u2193 ptr + 0x0B (start) ...  \\u2193 ptr + 0x20 ...  \\u2193 ptr + 0x40 ...   |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | bytecodeHash      |                                                        CCCCCCCCCCCCC...CC |\\n            // | salt              |                                      BBBBBBBBBBBBB...BB                   |\\n            // | deployer          | 000000...0000AAAAAAAAAAAAAAAAAAA...AA                                     |\\n            // | 0xFF              |            FF                                                             |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | memory            | 000000...00FFAAAAAAAAAAAAAAAAAAA...AABBBBBBBBBBBBB...BBCCCCCCCCCCCCC...CC |\\n            // | keccak(start, 85) |            \\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191 |\\n\\n            mstore(add(ptr, 0x40), bytecodeHash)\\n            mstore(add(ptr, 0x20), salt)\\n            mstore(ptr, deployer) // Right-aligned with 12 preceding garbage bytes\\n            let start := add(ptr, 0x0b) // The hashed data starts at the final garbage byte which we will set to 0xff\\n            mstore8(start, 0xff)\\n            addr := and(keccak256(start, 85), 0xffffffffffffffffffffffffffffffffffffffff)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbb7e8401583d26268ea9103013bcdcd90866a7718bd91105ebd21c9bf11f4f06\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of common custom errors used in multiple contracts\\n *\\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\\n * It is recommended to avoid relying on the error API for critical functionality.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Errors {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedCall();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error FailedDeployment();\\n\\n    /**\\n     * @dev A necessary precompile is missing.\\n     */\\n    error MissingPrecompile(address);\\n}\\n\",\"keccak256\":\"0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123\",\"license\":\"MIT\"},\"contracts/interfaces/IControllable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\n/// @notice a controllable contract interface. allows for controllers to perform privileged actions. controllera can other controllers and remove themselves.\\r\\ninterface IControllable {\\r\\n\\r\\n    /// @notice emitted when a controller is added.\\r\\n    event ControllerAdded(\\r\\n        address indexed contractAddress,\\r\\n        address indexed controllerAddress\\r\\n    );\\r\\n\\r\\n    /// @notice emitted when a controller is removed.\\r\\n    event ControllerRemoved(\\r\\n        address indexed contractAddress,\\r\\n        address indexed controllerAddress\\r\\n    );\\r\\n\\r\\n    /// @notice adds a controller.\\r\\n    /// @param controller the controller to add.\\r\\n    function addController(address controller) external;\\r\\n\\r\\n    /// @notice removes a controller.\\r\\n    /// @param controller the address to check\\r\\n    /// @return true if the address is a controller\\r\\n    function isController(address controller) external view returns (bool);\\r\\n\\r\\n    /// @notice remove ourselves from the list of controllers.\\r\\n    function relinquishControl() external;\\r\\n}\\r\\n\",\"keccak256\":\"0x15f5c4f8732a9caffb811a8ebf9aeba41a108e58634607c0700a46a891edf2ec\",\"license\":\"MIT\"},\"contracts/interfaces/IMultiPart.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\n\\n/* solhint-disable indent */\\n\\n\\nstruct MultiPartContract {\\n    string name_;\\n    bytes[] data_;\\n}\\n\",\"keccak256\":\"0xcb970b1c3b410edf58a38791322389593058409d355ea725ebbcfb7c7841ecdd\",\"license\":\"MIT\"},\"contracts/interfaces/ISVG.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nimport \\\"../interfaces/IStrings.sol\\\";\\n\\nstruct SVGTemplatesContract {\\n    mapping(string => address) _templates;\\n    string[] _templateNames;\\n}\\n\\ninterface ISVG {\\n    function getSVG() external view returns (string memory);\\n}\\n\\ninterface ISVGTemplate {\\n    function createSVG(address sender, string memory _name) external returns (address _tplAddress);\\n    function svgs() external view returns (string[] memory);\\n    function svgName() external view returns (string memory _name);\\n    function svgString(string memory name) external view returns (string memory _data);\\n    function svgAddress(string memory name) external view returns (address _data);\\n    function svgBytes() external view returns (bytes[] memory _data);\\n    function clear() external;\\n    function add(string memory _data) external returns (uint256 _index);\\n    function addAll(string[] memory _data) external returns (uint256 _count);\\n    function buildSVG(Replacement[] memory replacements) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x1cb8dda6f9d4957c71f0fc06475be2bf4798f6368565f34a322abe015c16593c\",\"license\":\"MIT\"},\"contracts/interfaces/IStrings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nstruct Replacement {\\n    string matchString;\\n    string replaceString;\\n}\\n\",\"keccak256\":\"0x0df4530f0e41983002d8732a50f802d069b85d0f2fedad4dc58bf4b73ea39146\",\"license\":\"MIT\"},\"contracts/libraries/SVGTemplatesLib.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/utils/Create2.sol\\\";\\n\\nimport \\\"../interfaces/ISVG.sol\\\";\\nimport \\\"../interfaces/IStrings.sol\\\";\\nimport \\\"../interfaces/IMultiPart.sol\\\";\\n\\nimport \\\"../libraries/StringsLib.sol\\\";\\n\\nimport \\\"../utilities/SVGTemplate.sol\\\";\\n\\nstruct SaltStorage {\\n    uint256 salt;\\n}\\n\\nstruct SVGStorage {\\n    SVGTemplatesContract svgTemplates;\\n    SaltStorage salt;    \\n    address svgManager;\\n    MultiPartContract multiPart;\\n}\\n\\nlibrary SVGTemplatesLib {\\n\\n    event SVGTemplateCreated(string name, address template);\\n\\n    bytes32 internal constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.nextblock.bitgem.app.SVGStorage.storage\\\");\\n\\n    function svgStorage() internal pure returns (SVGStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n    \\n    /// @notice get the stored template names in the contract\\n    /// @return the names of the templates\\n    function _svgs(SVGTemplatesContract storage self)\\n        internal\\n        view\\n        returns (string[] memory) { return self._templateNames; }\\n\\n    /// @notice get the create2 address of the given name\\n    function _svgAddress(\\n        SVGTemplatesContract storage,\\n        string memory _name) \\n        internal \\n        view returns (address) {\\n        return Create2.computeAddress(\\n            keccak256(abi.encodePacked(_name)), \\n            keccak256(type(SVGTemplate).creationCode)\\n        );  \\n    }\\n\\n    /// @notice the svg string or an empty string\\n    function _svgString(\\n        SVGTemplatesContract storage self,\\n        string memory _name\\n    ) internal view returns (string memory data_) {\\n        try SVGTemplate(_svgAddress(self, _name)).svgString() returns (string memory _data) {\\n            data_ = _data;\\n        } catch (bytes memory) {}\\n    }\\n\\n    /// @notice the sstored address for the name storage. empty is no svg\\n    function _svgData(\\n        SVGTemplatesContract storage self,\\n        string memory _name\\n    ) internal view returns (address) {\\n        return self._templates[_name];\\n    }\\n\\n    /// @notice create a new SVG image with the given name\\n    function _createSVG(SVGTemplatesContract storage self, address sender, string memory _name)\\n        internal\\n        returns (address _tplAddress)\\n    {\\n        // make sure the name is unique\\n        require(\\n            self._templates[_name] == address(0),\\n            \\\"template already deployed\\\"\\n        );\\n\\n        // get the address for the given name, create using create2,\\n        // then verify that create2 returned the expected address\\n        address targetTplAddress = _svgAddress(self, _name);\\n        _tplAddress = Create2.deploy(\\n            0,\\n            keccak256(abi.encodePacked(_name)),\\n            type(SVGTemplate).creationCode\\n        );\\n        require(targetTplAddress == _tplAddress, \\\"template address mismatch\\\");\\n\\n        // transfer ownership to the creator and update storage\\n        Ownable(_tplAddress).transferOwnership(sender);\\n        self._templateNames.push(_name);\\n        self._templates[_name] = _tplAddress;\\n    }\\n}\\n\",\"keccak256\":\"0x26dfe5608e1b47a5537f8ff8d7c6312eade2b181950d7f41f6a999b1a84b72f2\",\"license\":\"MIT\"},\"contracts/libraries/StringsLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nimport \\\"../interfaces/IStrings.sol\\\";\\n\\nlibrary StringsLib {\\n\\n    function parseInt(string memory s) internal pure returns (uint256 res) {\\n        uint256 sLength = bytes(s).length;\\n        for (uint256 i = 0; i < sLength; i++) {\\n            if ((uint8(bytes(s)[i]) - 48) < 0 || (uint8(bytes(s)[i]) - 48) > 9) {\\n                return 0;\\n            }\\n            res += (uint8(bytes(s)[i]) - 48) * 10**(bytes(s).length - i - 1);\\n        }\\n        return res;\\n\\n    }\\n\\n    function startsWith(string memory haystack, string memory needle)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        bytes memory haystackBytes = bytes(haystack);\\n        bytes memory needleBytes = bytes(needle);\\n        uint256 haystackLength = haystackBytes.length;\\n        uint256 needleLength = needleBytes.length;\\n        if (needleLength > haystackLength) {\\n            return false;\\n        }\\n        for (uint256 i = 0; i < needleLength; i++) {\\n            if (haystackBytes[i] != needleBytes[i]) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    function endsWith(string memory haystack, string memory needle)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        bytes memory haystackBytes = bytes(haystack);\\n        bytes memory needleBytes = bytes(needle);\\n        uint256 haystackLength = haystackBytes.length;\\n        uint256 needleLength = needleBytes.length;\\n        if (needleLength > haystackLength) {\\n            return false;\\n        }\\n        for (uint256 i = 0; i < needleLength; i++) {\\n            if (\\n                haystackBytes[haystackLength - i - 1] !=\\n                needleBytes[needleLength - i - 1]\\n            ) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    function substring(string memory haystack, uint256 startpos)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        bytes memory haystackBytes = bytes(haystack);\\n        uint256 length = haystackBytes.length;\\n        uint256 endpos = length - startpos;\\n        bytes memory substringBytes = new bytes(endpos);\\n        for (uint256 i = 0; i < endpos; i++) {\\n            substringBytes[i] = haystackBytes[startpos + i];\\n        }\\n        return string(substringBytes);\\n    }\\n\\n    function substring(string memory haystack, uint256 startpos, uint256 endpos)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        bytes memory haystackBytes = bytes(haystack);\\n        uint256 substringLength = endpos - startpos;\\n        bytes memory substringBytes = new bytes(substringLength);\\n        for (uint256 i = 0; i < substringLength; i++) {\\n            substringBytes[i] = haystackBytes[startpos + i];\\n        }\\n        return string(substringBytes);\\n    }\\n\\n    function concat(string[] memory _strings)\\n        internal\\n        pure\\n        returns (string memory _concat)\\n    {\\n        _concat = \\\"\\\";\\n        uint256 stringsLength = _strings.length;\\n        for (uint256 i = 0; i < stringsLength; i++) {\\n            _concat = string(abi.encodePacked(_concat, _strings[i]));\\n        }\\n        return _concat;\\n    }\\n\\n    function split(string memory _string, string memory _delimiter) internal pure returns (string[] memory _split) {\\n        _split = new string[](0);\\n        uint256 _delimiterLength = bytes(_delimiter).length;\\n        uint256 _stringLength = bytes(_string).length;\\n        uint256 _splitLength = 0;\\n        uint256 _splitIndex = 0;\\n        uint256 _startpos = 0;\\n        uint256 _endpos = 0;\\n        for (uint256 i = 0; i < _stringLength; i++) {\\n            if (bytes(_string)[i] == bytes(_delimiter)[0]) {\\n                _endpos = i;\\n                if (_endpos - _startpos > 0) {\\n                    _split[_splitIndex] = substring(_string, _startpos);\\n                    _splitIndex++;\\n                    _splitLength++;\\n                }\\n                _startpos = i + _delimiterLength;\\n            }\\n        }\\n        if (_startpos < _stringLength) {\\n            _split[_splitIndex] = substring(_string, _startpos);\\n            _splitIndex++;\\n            _splitLength++;\\n        }\\n        return _split;\\n    }\\n\\n    function join(string[] memory _strings, string memory _delimiter) internal pure returns (string memory _joined) {\\n        uint256 stringsLength = _strings.length;\\n        for (uint256 i = 0; i < stringsLength; i++) {\\n            _joined = string(abi.encodePacked(_joined, _strings[i]));\\n            if (i < _strings.length - 1) {\\n                _joined = string(abi.encodePacked(_joined, _delimiter));\\n            }\\n        }\\n        return _joined;\\n    }\\n\\n    function replace(string memory _string, string memory _search, string memory _replace) internal pure returns (string memory _replaced) {\\n        _replaced = _string;\\n        uint256 _searchLength = bytes(_search).length;\\n        uint256 _stringLength = bytes(_string).length;\\n        uint256 _replacedLength = _stringLength;\\n        uint256 _startpos = 0;\\n        uint256 _endpos = 0;\\n        for (uint256 i = 0; i < _stringLength; i++) {\\n            if (bytes(_string)[i] == bytes(_search)[0]) {\\n                _endpos = i;\\n                if (_endpos - _startpos > 0) {\\n                    _replaced = substring(_replaced, _startpos);\\n                    _replacedLength -= _endpos - _startpos;\\n                }\\n                _replaced = string(abi.encodePacked(_replaced, _replace));\\n                _replacedLength += bytes(_replace).length;\\n                _startpos = i + _searchLength;\\n            }\\n        }\\n        if (_startpos < _stringLength) {\\n            _replaced = substring(_replaced, _startpos);\\n            _replacedLength -= _stringLength - _startpos;\\n        }\\n        return _replaced;\\n    }\\n\\n    function trim(string memory _string) internal pure returns (string memory _trimmed) {\\n        _trimmed = _string;\\n        uint256 _stringLength = bytes(_string).length;\\n        uint256 _startpos = 0;\\n        uint256 _endpos = 0;\\n        for (uint256 i = 0; i < _stringLength; i++) {\\n            if (bytes(_string)[i] != 0x20) {\\n                _startpos = i;\\n                break;\\n            }\\n        }\\n        for (uint256 i = _stringLength - 1; i >= 0; i--) {\\n            if (bytes(_string)[i] != 0x20) {\\n                _endpos = i;\\n                break;\\n            }\\n        }\\n        if (_startpos < _endpos) {\\n            _trimmed = substring(_trimmed, _startpos);\\n            _trimmed = substring(_trimmed, 0, _endpos - _startpos + 1);\\n        }\\n        return _trimmed;\\n    }\\n\\n    function toUint16(string memory s) internal pure returns (uint16 res_) {\\n        uint256 res = 0;\\n        uint256 sLength = bytes(s).length;\\n        for (uint256 i = 0; i < sLength; i++) {\\n            if ((uint8(bytes(s)[i]) - 48) < 0 || (uint8(bytes(s)[i]) - 48) > 9) {\\n                return 0;\\n            }\\n            res += (uint8(bytes(s)[i]) - 48) * 10**(bytes(s).length - i - 1);\\n        }\\n        res_ = uint16(res);\\n    }\\n\\n\\n    function replace(string[] memory input, string memory matchTag, string[] memory repl) internal pure returns (string memory) {\\n        string memory svgBody;\\n        for(uint256 i = 0; i < input.length; i++) {\\n            string memory svgString = input[i];\\n            string memory outValue;\\n            if(StringsLib.startsWith(svgString, matchTag)) {\\n                string memory restOfLine = StringsLib.substring(svgString, bytes(matchTag).length);\\n                uint256 replIndex = StringsLib.parseInt(restOfLine);\\n                outValue = repl[replIndex];\\n            } else {\\n                outValue = svgString;\\n            }\\n            svgBody = string(abi.encodePacked(svgBody, outValue));\\n        }\\n        return svgBody;\\n    }\\n\\n    function replace(bytes[] memory sourceBytes, Replacement[] memory replacements_) public pure returns (string memory) {\\n        //bytes[] memory sourceBytes = _getSourceBytes();\\n        string memory outputFile = \\\"\\\";\\n        uint256 sourceBytesLength = sourceBytes.length;\\n        for (uint256 i = 0; i < sourceBytesLength; i++) {\\n            bytes memory sourceByte = sourceBytes[i];\\n            string memory outputLine  = string(sourceBytes[i]);\\n            for (uint256 j = 0; j < replacements_.length; j++) {\\n                Replacement memory replacement = replacements_[j];\\n                if (keccak256(sourceByte) == keccak256(bytes(replacement.matchString))) {\\n                    outputLine = replacement.replaceString;\\n                }\\n            }\\n            outputFile = string(abi.encodePacked(outputFile, outputLine));\\n        }\\n        return outputFile;\\n    }    \\n}\\n\",\"keccak256\":\"0xe7997c850465105fcfa7ea7b78f1ea9349d726696de51652f05575069d293ef4\",\"license\":\"MIT\"},\"contracts/utilities/Controllable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\nimport \\\"../interfaces/IControllable.sol\\\";\\r\\n\\r\\n// control me baby\\r\\nabstract contract Controllable is IControllable {\\r\\n    mapping(address => bool) internal _controllers;\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account not in authorized list\\r\\n     */\\r\\n    modifier onlyController() virtual {\\r\\n        require(\\r\\n            _controllers[msg.sender] == true || address(this) == msg.sender,\\r\\n            \\\"caller is not a controller\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add an address allowed to control this contract\\r\\n     */\\r\\n    function addController(address _controller)\\r\\n        external\\r\\n        override\\r\\n        onlyController\\r\\n    {\\r\\n        _addController(_controller);\\r\\n    }\\r\\n    function _addController(address _controller) internal {\\r\\n        _controllers[_controller] = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if this address is a controller\\r\\n     */\\r\\n    function isController(address _address)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (bool allowed)\\r\\n    {\\r\\n        allowed = _isController(_address);\\r\\n    }\\r\\n    function _isController(address _address)\\r\\n        internal view\\r\\n        returns (bool allowed)\\r\\n    {\\r\\n        allowed = _controllers[_address];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Remove the sender address from the list of controllers\\r\\n     */\\r\\n    function relinquishControl() external override onlyController {\\r\\n        _relinquishControl();\\r\\n    }\\r\\n    function _relinquishControl() internal onlyController{\\r\\n        delete _controllers[msg.sender];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x97e48242b2aed589dd5c1ae14e0bf368539d5781278bafe4e8d2a6675d29aed2\",\"license\":\"MIT\"},\"contracts/utilities/MultipartData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nimport \\\"../libraries/SVGTemplatesLib.sol\\\";\\n\\nimport \\\"../interfaces/IMultiPart.sol\\\";\\n\\nabstract contract MultipartData  {\\n    /// @notice add a new multipart to the contract\\n    /// @param _data the data of the multipart\\n    function _addData(bytes memory _data)\\n        internal returns (uint256 _index) {\\n        _index = SVGTemplatesLib.svgStorage().multiPart.data_.length;\\n        SVGTemplatesLib.svgStorage().multiPart.data_.push(_data);\\n    }\\n\\n    /// @notice get the data of the given index\\n    /// @param _index the index of the data\\n    function _getData(uint256 _index)\\n        internal view  returns (bytes memory data) {\\n        data = SVGTemplatesLib.svgStorage().multiPart.data_[_index];\\n    }\\n\\n    /// @notice get the data as a string\\n    function _fromBytes() internal view returns (string memory output) {\\n        string memory result = \\\"\\\";\\n        uint256 dataLength = SVGTemplatesLib.svgStorage().multiPart.data_.length;\\n        for (uint256 i = 0; i < dataLength; i++) {\\n            result = string(abi.encodePacked(result, SVGTemplatesLib.svgStorage().multiPart.data_[i]));\\n        }\\n        output = result;\\n    }\\n\\n    /// @notice get the data as a  bytes array\\n    function data__() internal view returns (bytes[] storage) {\\n        return SVGTemplatesLib.svgStorage().multiPart.data_;\\n    }\\n\\n    /// @notice clear the contents of the data array\\n    function _clear() internal {\\n        delete SVGTemplatesLib.svgStorage().multiPart.data_;\\n    }\\n}\",\"keccak256\":\"0xce66216bd61e1e1552e3ba3bea1d938e579ab254d2da435de6fcac1e19180b61\",\"license\":\"MIT\"},\"contracts/utilities/SVGManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nimport \\\"../utilities/Controllable.sol\\\";\\nimport \\\"../interfaces/ISVG.sol\\\";\\n\\nimport \\\"../interfaces/IStrings.sol\\\";\\n\\nimport \\\"../libraries/StringsLib.sol\\\";\\nimport \\\"../libraries/SVGTemplatesLib.sol\\\";\\n\\ncontract SVGManager is Controllable {\\n\\n    using SVGTemplatesLib for SVGTemplatesContract;\\n\\n    event SVGTemplateCreated(string name, address template);\\n\\n    constructor() {\\n        _addController(msg.sender);\\n    }\\n\\n    /// @notice get all the svg namea in the contract\\n    function svgs() external view returns (string[] memory) {\\n        return SVGTemplatesLib.svgStorage().svgTemplates._svgs();\\n    }\\n\\n    /// @notice get the svg address of the given svg name. does not mean the file exists\\n    function svgAddress(string memory _name) external view returns (address _svgAddress) {\\n        _svgAddress = SVGTemplatesLib.svgStorage().svgTemplates._svgAddress(_name);\\n    }\\n\\n    /// @notice get the svg data of the given svg name as a string\\n    function svgString(string memory _name) external view returns (string memory data_) {\\n\\n        try SVGTemplate(SVGTemplatesLib.svgStorage().svgTemplates._svgAddress(_name)).svgString() returns (string memory _data) {\\n            data_ = _data;\\n        } catch (bytes memory) {}\\n    }\\n\\n    /// @notice add a new gem pool\\n    function createSVG(address sender, string memory _name) external onlyController returns(address _tplAddress) {\\n\\n        _tplAddress = SVGTemplatesLib.svgStorage().svgTemplates._createSVG(sender, _name);\\n        emit SVGTemplateCreated(_name, _tplAddress);\\n    }\\n}\",\"keccak256\":\"0xc9e1fcaa75acc5544717dc9bd42a58a1093602400a7f4f443c264d4737c5f37a\",\"license\":\"MIT\"},\"contracts/utilities/SVGTemplate.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nimport \\\"../utilities/MultipartData.sol\\\";\\n\\nimport \\\"../libraries/StringsLib.sol\\\";\\nimport \\\"../libraries/SVGTemplatesLib.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\n/// @notice a single SVG image\\ncontract SVGTemplate is MultipartData, Ownable, Initializable {\\n\\n    event SVGImageAdded(address indexed _from, address indexed _to, string _name, string _data);\\n    event SVGImagePartAdded(address indexed _from, address indexed _to, string _name, string _data);\\n\\n    constructor() Ownable(msg.sender) {}\\n\\n    function initialize(string memory _name, string[] memory _svg) external initializer {\\n        MultiPartContract storage ds = SVGTemplatesLib.svgStorage().multiPart;\\n        ds.name_ = _name;\\n        for(uint i = 0; i < _svg.length; i++) {\\n            ds.data_.push(bytes(_svg[i]));\\n        }\\n    }\\n\\n    /// @notice the name of the svg\\n    function svgName() external view returns (string memory _name) {\\n        MultiPartContract storage ds = SVGTemplatesLib.svgStorage().multiPart;\\n        _name = ds.name_;\\n    }\\n\\n    /// @notice the data of the svg\\n    function svgString() external view returns (string memory _data) {\\n        _data = _fromBytes();\\n    }\\n\\n    /// @notice the data of the svg\\n    function svgBytes() external view returns (bytes[] memory _data) {\\n        _data = data__();\\n    }\\n    \\n    /// @notice clear the data of the svg\\n    function clear() external onlyOwner {\\n        _clear();\\n    }\\n\\n    /// @notice add data to the end of the data\\n    function add(string memory _data) external onlyOwner returns (uint256 _index) {\\n        _index = _addData(bytes(_data));\\n        emit SVGImagePartAdded(msg.sender, address(this), SVGTemplatesLib.svgStorage().multiPart.name_, _data);\\n    }\\n\\n    /// @notice add all SVG lines at\\n    function addAll(string[] memory _data) external onlyOwner returns (uint256 _count) {\\n        for(uint256 i = 0; i < _data.length; i++) {\\n            _addData(bytes(_data[i]));\\n        }\\n        _count = _data.length;\\n        MultiPartContract storage ds = SVGTemplatesLib.svgStorage().multiPart;\\n        emit SVGImageAdded(msg.sender, address(this), ds.name_, _fromBytes());\\n    }\\n\\n    /// @notice get the svg, replacing the data with the data from the given replacements\\n    function buildSVG(Replacement[] memory replacements) external view returns (string memory) {\\n        return StringsLib.replace(data__(), replacements);\\n    }\\n}\",\"keccak256\":\"0xfbbefbfb61a11e259228358663627f001b5497ec429573a4f1e760b7c74911f1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052348015600f57600080fd5b506037336001600160a01b03166000908152602081905260409020805460ff19166001179055565b611ecb806100466000396000f3fe608060405234801561001057600080fd5b506004361061006d5760003560e01c80630e60927a146100725780631373d4e81461009b5780631f2cd4c6146100b0578063642cd091146100d0578063a7fc7a07146100e3578063b429afeb146100f8578063e1c28bef1461011b575b600080fd5b6100856100803660046108d3565b610123565b604051610092919061090f565b60405180910390f35b6100a361013d565b6040516100929190610973565b6100c36100be3660046108d3565b610154565b60405161009291906109d8565b6100856100de366004610a02565b610202565b6100f66100f1366004610a4f565b61029e565b005b61010b610106366004610a4f565b610307565b6040519015158152602001610092565b6100f6610328565b600061013782610131610370565b90610394565b92915050565b606061014f61014a610370565b6103f7565b905090565b606061016282610131610370565b6001600160a01b0316633851e5e46040518163ffffffff1660e01b8152600401600060405180830381865afa9250505080156101c057506040513d6000823e601f3d908101601f191682016040526101bd9190810190610a6a565b60015b6101fa573d8080156101ee576040519150601f19603f3d011682016040523d82523d6000602084013e6101f3565b606091505b5050919050565b90505b919050565b3360009081526020819052604081205460ff1615156001148061022457503033145b6102495760405162461bcd60e51b815260040161024090610ae0565b60405180910390fd5b61025d8383610256610370565b91906104d4565b90507f9def9fa0200e8a75d052e2441695912f07be1a15bbce5e2cbd822ecd0d981a668282604051610290929190610b14565b60405180910390a192915050565b3360009081526020819052604090205460ff161515600114806102c057503033145b6102dc5760405162461bcd60e51b815260040161024090610ae0565b610304816001600160a01b03166000908152602081905260409020805460ff19166001179055565b50565b6001600160a01b03811660009081526020819052604081205460ff16610137565b3360009081526020819052604090205460ff1615156001148061034a57503033145b6103665760405162461bcd60e51b815260040161024090610ae0565b61036e6106d5565b565b7fd6bd814cc1bc4b2e2e963d75e86b66330979dafa58695edbdc535ed90fc5985e90565b60006103f0826040516020016103aa9190610b3e565b60405160208183030381529060405280519060200120604051806020016103d090610803565b6020820181038252601f19601f820116604052508051906020012061072c565b9392505050565b606081600101805480602002602001604051908101604052809291908181526020016000905b828210156104c957838290600052602060002001805461043c90610b5a565b80601f016020809104026020016040519081016040528092919081815260200182805461046890610b5a565b80156104b55780601f1061048a576101008083540402835291602001916104b5565b820191906000526020600020905b81548152906001019060200180831161049857829003601f168201915b50505050508152602001906001019061041d565b505050509050919050565b604051600090819085906104e9908590610b3e565b908152604051908190036020019020546001600160a01b03161461054b5760405162461bcd60e51b81526020600482015260196024820152781d195b5c1b185d1948185b1c9958591e4819195c1b1bde5959603a1b6044820152606401610240565b60006105578584610394565b90506105ad60008460405160200161056f9190610b3e565b604051602081830303815290604052805190602001206040518060200161059590610803565b601f1982820381018352601f90910116604052610739565b9150816001600160a01b0316816001600160a01b03161461060c5760405162461bcd60e51b81526020600482015260196024820152780e8cadae0d8c2e8ca40c2c8c8e4cae6e640dad2e6dac2e8c6d603b1b6044820152606401610240565b60405163f2fde38b60e01b81526001600160a01b0383169063f2fde38b9061063890879060040161090f565b600060405180830381600087803b15801561065257600080fd5b505af1158015610666573d6000803e3d6000fd5b505050506001858101805491820181556000908152602090200161068a8482610be3565b5081856000018460405161069e9190610b3e565b90815260405190819003602001902080546001600160a01b03929092166001600160a01b0319909216919091179055509392505050565b3360009081526020819052604090205460ff161515600114806106f757503033145b6107135760405162461bcd60e51b815260040161024090610ae0565b336000908152602081905260409020805460ff19169055565b60006103f08383306107d0565b6000834710156107655760405163cf47918160e01b815247600482015260248101859052604401610240565b815160000361078757604051631328927760e21b815260040160405180910390fd5b8282516020840186f590503d1519811516156107a9576040513d6000823e3d81fd5b6001600160a01b0381166103f05760405163b06ebf3d60e01b815260040160405180910390fd5b6000604051836040820152846020820152828152600b8101905060ff8153605590206001600160a01b0316949350505050565b6111f480610ca283390190565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561084e5761084e610810565b604052919050565b60006001600160401b0382111561086f5761086f610810565b50601f01601f191660200190565b600082601f83011261088e57600080fd5b81356108a161089c82610856565b610826565b8181528460208386010111156108b657600080fd5b816020850160208301376000918101602001919091529392505050565b6000602082840312156108e557600080fd5b81356001600160401b038111156108fb57600080fd5b6109078482850161087d565b949350505050565b6001600160a01b0391909116815260200190565b60005b8381101561093e578181015183820152602001610926565b50506000910152565b6000815180845261095f816020860160208601610923565b601f01601f19169290920160200192915050565b6000602082016020835280845180835260408501915060408160051b86010192506020860160005b828110156109cc57603f198786030184526109b7858351610947565b9450602093840193919091019060010161099b565b50929695505050505050565b6020815260006103f06020830184610947565b80356001600160a01b03811681146101fd57600080fd5b60008060408385031215610a1557600080fd5b610a1e836109eb565b915060208301356001600160401b03811115610a3957600080fd5b610a458582860161087d565b9150509250929050565b600060208284031215610a6157600080fd5b6103f0826109eb565b600060208284031215610a7c57600080fd5b81516001600160401b03811115610a9257600080fd5b8201601f81018413610aa357600080fd5b8051610ab161089c82610856565b818152856020838501011115610ac657600080fd5b610ad7826020830160208601610923565b95945050505050565b6020808252601a908201527931b0b63632b91034b9903737ba10309031b7b73a3937b63632b960311b604082015260600190565b604081526000610b276040830185610947565b905060018060a01b03831660208301529392505050565b60008251610b50818460208701610923565b9190910192915050565b600181811c90821680610b6e57607f821691505b602082108103610b8e57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115610bde57806000526020600020601f840160051c81016020851015610bbb5750805b601f840160051c820191505b81811015610bdb5760008155600101610bc7565b50505b505050565b81516001600160401b03811115610bfc57610bfc610810565b610c1081610c0a8454610b5a565b84610b94565b6020601f821160018114610c445760008315610c2c5750848201515b600019600385901b1c1916600184901b178455610bdb565b600084815260208120601f198516915b82811015610c745787850151825560209485019460019092019101610c54565b5084821015610c925786840151600019600387901b60f8161c191681555b50505050600190811b0190555056fe6080604052348015600f57600080fd5b503380603557604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b603c816041565b506091565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b611154806100a06000396000f3fe608060405234801561001057600080fd5b50600436106100985760003560e01c806253a5c71461009d57806325a1f8f7146100c65780632763b63c146100db5780633851e5e4146100fc57806352efea6e1461010457806365ece3e91461010e578063715018a6146101165780638da5cb5b1461011e578063b0c8f9dc14610133578063c53936b114610146578063f2fde38b14610159575b600080fd5b6100b06100ab36600461099d565b61016c565b6040516100bd9190610b11565b60405180910390f35b6100ce6101f9565b6040516100bd9190610b2b565b6100ee6100e9366004610c1c565b6102d8565b6040519081526020016100bd565b6100b0610374565b61010c610383565b005b6100b0610395565b61010c610439565b61012661044b565b6040516100bd9190610c58565b6100ee610141366004610c6c565b61045a565b61010c610154366004610ca0565b6104b9565b61010c610167366004610d07565b61062f565b606073928c0A50586514D291087403befe3540E3631ECd6320134c5c610190610676565b846040518363ffffffff1660e01b81526004016101ae929190610de7565b600060405180830381865af41580156101cb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101f39190810190610ed3565b92915050565b6060610203610676565b805480602002602001604051908101604052809291908181526020016000905b828210156102cf57838290600052602060002001805461024290610d30565b80601f016020809104026020016040519081016040528092919081815260200182805461026e90610d30565b80156102bb5780601f10610290576101008083540402835291602001916102bb565b820191906000526020600020905b81548152906001019060200180831161029e57829003601f168201915b505050505081526020019060010190610223565b50505050905090565b60006102e2610688565b60005b82518110156103195761031083828151811061030357610303610f49565b60200260200101516106ba565b506001016102e5565b5050805160006103276106f8565b600401905030337f2feaa7d3b0dd621e7cad5cfc3691f0dd694e4df1ec0cacdaa75168f732a5429c8361035861071c565b604051610366929190610f5f565b60405180910390a350919050565b606061037e61071c565b905090565b61038b610688565b6103936107a4565b565b606060006103a16106f8565b60040190508060000180546103b590610d30565b80601f01602080910402602001604051908101604052809291908181526020018280546103e190610d30565b801561042e5780601f106104035761010080835404028352916020019161042e565b820191906000526020600020905b81548152906001019060200180831161041157829003601f168201915b505050505091505090565b610441610688565b61039360006107ba565b6000546001600160a01b031690565b6000610464610688565b61046d826106ba565b905030337f06655b3acec5ad67072e7d20045a297095f255f96184d146a1b1604362507a0361049a6106f8565b6040516104ac91600401908790610f5f565b60405180910390a3919050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff1615906001600160401b03166000811580156104fe5750825b90506000826001600160401b0316600114801561051a5750303b155b905081158015610528575080155b156105465760405163f92ee8a960e01b815260040160405180910390fd5b84546001600160401b0319166001178555831561056f57845460ff60401b1916600160401b1785555b60006105796106f8565b6004019050806105898982610fd3565b5060005b87518110156105de57816001018882815181106105ac576105ac610f49565b602090810291909101810151825460018101845560009384529190922001906105d59082610fd3565b5060010161058d565b5050831561062657845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50505050505050565b610637610688565b6001600160a01b03811661066a576000604051631e4fbdf760e01b81526004016106619190610c58565b60405180910390fd5b610673816107ba565b50565b60006106806106f8565b600501919050565b3361069161044b565b6001600160a01b031614610393573360405163118cdaa760e01b81526004016106619190610c58565b60006106c46106f8565b6005015490506106d26106f8565b600501805460018101825560009182526020909120016106f28382610fd3565b50919050565b7fd6bd814cc1bc4b2e2e963d75e86b66330979dafa58695edbdc535ed90fc5985e90565b60408051602081019091526000808252606091906107386106f8565b60050154905060005b8181101561079c57826107526106f8565b60050180548390811061076757610767610f49565b90600052602060002001604051602001610782929190611091565b60408051601f198184030181529190529250600101610741565b509092915050565b6107ac6106f8565b61039390600501600061080a565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b508054600082559060005260206000209081019061067391905b808211156108415760006108388282610845565b50600101610824565b5090565b50805461085190610d30565b6000825580601f10610861575050565b601f01602090049060005260206000209081019061067391905b80821115610841576000815560010161087b565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b03811182821017156108c7576108c761088f565b60405290565b604051601f8201601f191681016001600160401b03811182821017156108f5576108f561088f565b604052919050565b60006001600160401b038211156109165761091661088f565b5060051b60200190565b60006001600160401b038211156109395761093961088f565b50601f01601f191660200190565b600082601f83011261095857600080fd5b813561096b61096682610920565b6108cd565b81815284602083860101111561098057600080fd5b816020850160208301376000918101602001919091529392505050565b6000602082840312156109af57600080fd5b81356001600160401b038111156109c557600080fd5b8201601f810184136109d657600080fd5b80356109e4610966826108fd565b8082825260208201915060208360051b850101925086831115610a0657600080fd5b602084015b83811015610ab65780356001600160401b03811115610a2957600080fd5b85016040818a03601f19011215610a3f57600080fd5b610a476108a5565b60208201356001600160401b03811115610a6057600080fd5b610a6f8b602083860101610947565b82525060408201356001600160401b03811115610a8b57600080fd5b610a9a8b602083860101610947565b6020830152508085525050602083019250602081019050610a0b565b509695505050505050565b60005b83811015610adc578181015183820152602001610ac4565b50506000910152565b60008151808452610afd816020860160208601610ac1565b601f01601f19169290920160200192915050565b602081526000610b246020830184610ae5565b9392505050565b6000602082016020835280845180835260408501915060408160051b86010192506020860160005b82811015610b8457603f19878603018452610b6f858351610ae5565b94506020938401939190910190600101610b53565b50929695505050505050565b600082601f830112610ba157600080fd5b8135610baf610966826108fd565b8082825260208201915060208360051b860101925085831115610bd157600080fd5b602085015b83811015610c125780356001600160401b03811115610bf457600080fd5b610c03886020838a0101610947565b84525060209283019201610bd6565b5095945050505050565b600060208284031215610c2e57600080fd5b81356001600160401b03811115610c4457600080fd5b610c5084828501610b90565b949350505050565b6001600160a01b0391909116815260200190565b600060208284031215610c7e57600080fd5b81356001600160401b03811115610c9457600080fd5b610c5084828501610947565b60008060408385031215610cb357600080fd5b82356001600160401b03811115610cc957600080fd5b610cd585828601610947565b92505060208301356001600160401b03811115610cf157600080fd5b610cfd85828601610b90565b9150509250929050565b600060208284031215610d1957600080fd5b81356001600160a01b0381168114610b2457600080fd5b600181811c90821680610d4457607f821691505b6020821081036106f257634e487b7160e01b600052602260045260246000fd5b60008154610d7181610d30565b808552600182168015610d8b5760018114610da757610dde565b60ff1983166020870152602082151560051b8701019350610dde565b84600052602060002060005b83811015610dd55781546020828a010152600182019150602081019050610db3565b87016020019450505b50505092915050565b6000604082016040835280855480835260608501915060608160051b860101925086600052602060002060005b82811015610e4457868503605f19018452610e2f8583610d64565b94506020939093019260019182019101610e14565b50505050828103602084015280845180835260208301915060208160051b8401016020870160005b83811015610ec557601f198684030185528151805160408552610e926040860182610ae5565b9050602082015191508481036020860152610ead8183610ae5565b60209788019790955093909301925050600101610e6c565b509098975050505050505050565b600060208284031215610ee557600080fd5b81516001600160401b03811115610efb57600080fd5b8201601f81018413610f0c57600080fd5b8051610f1a61096682610920565b818152856020838501011115610f2f57600080fd5b610f40826020830160208601610ac1565b95945050505050565b634e487b7160e01b600052603260045260246000fd5b604081526000610f726040830185610d64565b8281036020840152610f408185610ae5565b601f821115610fce57806000526020600020601f840160051c81016020851015610fab5750805b601f840160051c820191505b81811015610fcb5760008155600101610fb7565b50505b505050565b81516001600160401b03811115610fec57610fec61088f565b61100081610ffa8454610d30565b84610f84565b6020601f821160018114611034576000831561101c5750848201515b600019600385901b1c1916600184901b178455610fcb565b600084815260208120601f198516915b828110156110645787850151825560209485019460019092019101611044565b50848210156110825786840151600019600387901b60f8161c191681555b50505050600190811b01905550565b600083516110a3818460208801610ac1565b8083019050600084546110b581610d30565b6001821680156110cc57600181146110e157611111565b60ff1983168552811515820285019350611111565b87600052602060002060005b83811015611109578154878201526001909101906020016110ed565b505081850193505b509197965050505050505056fea2646970667358221220930da364361b6cea16831a96492d1fe3d1de398fed1e40c846ed56c4b299abe364736f6c634300081c0033a2646970667358221220d05be11588b71f43e17dca4da4e16b889045552963f592bba20a9058926385d064736f6c634300081c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061006d5760003560e01c80630e60927a146100725780631373d4e81461009b5780631f2cd4c6146100b0578063642cd091146100d0578063a7fc7a07146100e3578063b429afeb146100f8578063e1c28bef1461011b575b600080fd5b6100856100803660046108d3565b610123565b604051610092919061090f565b60405180910390f35b6100a361013d565b6040516100929190610973565b6100c36100be3660046108d3565b610154565b60405161009291906109d8565b6100856100de366004610a02565b610202565b6100f66100f1366004610a4f565b61029e565b005b61010b610106366004610a4f565b610307565b6040519015158152602001610092565b6100f6610328565b600061013782610131610370565b90610394565b92915050565b606061014f61014a610370565b6103f7565b905090565b606061016282610131610370565b6001600160a01b0316633851e5e46040518163ffffffff1660e01b8152600401600060405180830381865afa9250505080156101c057506040513d6000823e601f3d908101601f191682016040526101bd9190810190610a6a565b60015b6101fa573d8080156101ee576040519150601f19603f3d011682016040523d82523d6000602084013e6101f3565b606091505b5050919050565b90505b919050565b3360009081526020819052604081205460ff1615156001148061022457503033145b6102495760405162461bcd60e51b815260040161024090610ae0565b60405180910390fd5b61025d8383610256610370565b91906104d4565b90507f9def9fa0200e8a75d052e2441695912f07be1a15bbce5e2cbd822ecd0d981a668282604051610290929190610b14565b60405180910390a192915050565b3360009081526020819052604090205460ff161515600114806102c057503033145b6102dc5760405162461bcd60e51b815260040161024090610ae0565b610304816001600160a01b03166000908152602081905260409020805460ff19166001179055565b50565b6001600160a01b03811660009081526020819052604081205460ff16610137565b3360009081526020819052604090205460ff1615156001148061034a57503033145b6103665760405162461bcd60e51b815260040161024090610ae0565b61036e6106d5565b565b7fd6bd814cc1bc4b2e2e963d75e86b66330979dafa58695edbdc535ed90fc5985e90565b60006103f0826040516020016103aa9190610b3e565b60405160208183030381529060405280519060200120604051806020016103d090610803565b6020820181038252601f19601f820116604052508051906020012061072c565b9392505050565b606081600101805480602002602001604051908101604052809291908181526020016000905b828210156104c957838290600052602060002001805461043c90610b5a565b80601f016020809104026020016040519081016040528092919081815260200182805461046890610b5a565b80156104b55780601f1061048a576101008083540402835291602001916104b5565b820191906000526020600020905b81548152906001019060200180831161049857829003601f168201915b50505050508152602001906001019061041d565b505050509050919050565b604051600090819085906104e9908590610b3e565b908152604051908190036020019020546001600160a01b03161461054b5760405162461bcd60e51b81526020600482015260196024820152781d195b5c1b185d1948185b1c9958591e4819195c1b1bde5959603a1b6044820152606401610240565b60006105578584610394565b90506105ad60008460405160200161056f9190610b3e565b604051602081830303815290604052805190602001206040518060200161059590610803565b601f1982820381018352601f90910116604052610739565b9150816001600160a01b0316816001600160a01b03161461060c5760405162461bcd60e51b81526020600482015260196024820152780e8cadae0d8c2e8ca40c2c8c8e4cae6e640dad2e6dac2e8c6d603b1b6044820152606401610240565b60405163f2fde38b60e01b81526001600160a01b0383169063f2fde38b9061063890879060040161090f565b600060405180830381600087803b15801561065257600080fd5b505af1158015610666573d6000803e3d6000fd5b505050506001858101805491820181556000908152602090200161068a8482610be3565b5081856000018460405161069e9190610b3e565b90815260405190819003602001902080546001600160a01b03929092166001600160a01b0319909216919091179055509392505050565b3360009081526020819052604090205460ff161515600114806106f757503033145b6107135760405162461bcd60e51b815260040161024090610ae0565b336000908152602081905260409020805460ff19169055565b60006103f08383306107d0565b6000834710156107655760405163cf47918160e01b815247600482015260248101859052604401610240565b815160000361078757604051631328927760e21b815260040160405180910390fd5b8282516020840186f590503d1519811516156107a9576040513d6000823e3d81fd5b6001600160a01b0381166103f05760405163b06ebf3d60e01b815260040160405180910390fd5b6000604051836040820152846020820152828152600b8101905060ff8153605590206001600160a01b0316949350505050565b6111f480610ca283390190565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561084e5761084e610810565b604052919050565b60006001600160401b0382111561086f5761086f610810565b50601f01601f191660200190565b600082601f83011261088e57600080fd5b81356108a161089c82610856565b610826565b8181528460208386010111156108b657600080fd5b816020850160208301376000918101602001919091529392505050565b6000602082840312156108e557600080fd5b81356001600160401b038111156108fb57600080fd5b6109078482850161087d565b949350505050565b6001600160a01b0391909116815260200190565b60005b8381101561093e578181015183820152602001610926565b50506000910152565b6000815180845261095f816020860160208601610923565b601f01601f19169290920160200192915050565b6000602082016020835280845180835260408501915060408160051b86010192506020860160005b828110156109cc57603f198786030184526109b7858351610947565b9450602093840193919091019060010161099b565b50929695505050505050565b6020815260006103f06020830184610947565b80356001600160a01b03811681146101fd57600080fd5b60008060408385031215610a1557600080fd5b610a1e836109eb565b915060208301356001600160401b03811115610a3957600080fd5b610a458582860161087d565b9150509250929050565b600060208284031215610a6157600080fd5b6103f0826109eb565b600060208284031215610a7c57600080fd5b81516001600160401b03811115610a9257600080fd5b8201601f81018413610aa357600080fd5b8051610ab161089c82610856565b818152856020838501011115610ac657600080fd5b610ad7826020830160208601610923565b95945050505050565b6020808252601a908201527931b0b63632b91034b9903737ba10309031b7b73a3937b63632b960311b604082015260600190565b604081526000610b276040830185610947565b905060018060a01b03831660208301529392505050565b60008251610b50818460208701610923565b9190910192915050565b600181811c90821680610b6e57607f821691505b602082108103610b8e57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115610bde57806000526020600020601f840160051c81016020851015610bbb5750805b601f840160051c820191505b81811015610bdb5760008155600101610bc7565b50505b505050565b81516001600160401b03811115610bfc57610bfc610810565b610c1081610c0a8454610b5a565b84610b94565b6020601f821160018114610c445760008315610c2c5750848201515b600019600385901b1c1916600184901b178455610bdb565b600084815260208120601f198516915b82811015610c745787850151825560209485019460019092019101610c54565b5084821015610c925786840151600019600387901b60f8161c191681555b50505050600190811b0190555056fe6080604052348015600f57600080fd5b503380603557604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b603c816041565b506091565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b611154806100a06000396000f3fe608060405234801561001057600080fd5b50600436106100985760003560e01c806253a5c71461009d57806325a1f8f7146100c65780632763b63c146100db5780633851e5e4146100fc57806352efea6e1461010457806365ece3e91461010e578063715018a6146101165780638da5cb5b1461011e578063b0c8f9dc14610133578063c53936b114610146578063f2fde38b14610159575b600080fd5b6100b06100ab36600461099d565b61016c565b6040516100bd9190610b11565b60405180910390f35b6100ce6101f9565b6040516100bd9190610b2b565b6100ee6100e9366004610c1c565b6102d8565b6040519081526020016100bd565b6100b0610374565b61010c610383565b005b6100b0610395565b61010c610439565b61012661044b565b6040516100bd9190610c58565b6100ee610141366004610c6c565b61045a565b61010c610154366004610ca0565b6104b9565b61010c610167366004610d07565b61062f565b606073__$0ac7d8a8f304b8a74db4984a296882688e$",
  "libraries": {
    "AddressSet": "0x8aB21bf41B908d9CBee3E78e97033E3916840cA8",
    "AttributeLib": "0x9d0749b64bEDB024B1AaF596c84029E67635D43c",
    "Base64": "0x8d10857B6d2bEA12d67A888F3E995ea142Db701E",
    "Bytes32Set": "0xB01Cf1Baf9ABFa5309AE3ff649B31ae87A80AE62",
    "CarbonCreditLib": "0x44520E8dA039d4D7D460f5DBF6C1eC347De53A7C",
    "DiamondFactoryLib": "0x50353159348c63A448eDAfC6d5ef81CF9C1cdE9a",
    "DiamondLib": "0x2Be86045394c8096b3b9d9449A08Cc74afEd5717",
    "ERC721AEnumerationLib": "0x6a9A6D75AECEfB8dC969D5Ef5ea3EcF57e29706d",
    "ERC721ALib": "0x8F980CBDb943c2794FdA47D82d81a71d31A815DE",
    "Identity": "0x4C6fE457018d32B9aEc2aA99F655b5aCD7d0D658",
    "IdentityFactory": "0x5c970fD1E772548Be3Dc3de62381Fd8b2b3fAb96",
    "IdentitySystemStorage": "0x05d7966Acfa90f529e3844B1d1b7702dBde7789c",
    "LibDiamond": "0x30Fb10d923CfFC1151B8CFe683A937F414854570",
    "MerkleProver": "0x6361c8F2C7Fb1498C15C5e90Ed477ee8cEeC9f5f",
    "MetadataLib": "0xEA17bE869d528F2c3e4F7cae231ebE4BE42BeB75",
    "MultiSaleLib": "0x3b12B21202DaC69552E7b1f9D4D3E31085c7a378",
    "Strings": "0x26375f3210F1F8C90f53c663AC44F3d4a86b12A6",
    "StringsLib": "0x928c0A50586514D291087403befe3540E3631ECd",
    "SVGTemplatesLib": "0xFD3DfE346d5d5c8C90313036BC1b1E3De29FCb33",
    "UInt256Set": "0x908B9bE15117446dE01d076Ecb75D9210E182D97",
    "VariablePriceLib": "0x92E3cBf7226518CF757c48446067de1485CCCcBb"
  },
  "devdoc": {
    "errors": {
      "Create2EmptyBytecode()": [
        {
          "details": "There's no code to deploy."
        }
      ],
      "FailedDeployment()": [
        {
          "details": "The deployment failed."
        }
      ],
      "InsufficientBalance(uint256,uint256)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "addController(address)": {
        "details": "Add an address allowed to control this contract"
      },
      "isController(address)": {
        "details": "Check if this address is a controller"
      },
      "relinquishControl()": {
        "details": "Remove the sender address from the list of controllers"
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "ControllerAdded(address,address)": {
        "notice": "emitted when a controller is added."
      },
      "ControllerRemoved(address,address)": {
        "notice": "emitted when a controller is removed."
      }
    },
    "kind": "user",
    "methods": {
      "createSVG(address,string)": {
        "notice": "add a new gem pool"
      },
      "svgAddress(string)": {
        "notice": "get the svg address of the given svg name. does not mean the file exists"
      },
      "svgString(string)": {
        "notice": "get the svg data of the given svg name as a string"
      },
      "svgs()": {
        "notice": "get all the svg namea in the contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 37139,
        "contract": "contracts/utilities/SVGManager.sol:SVGManager",
        "label": "_controllers",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}