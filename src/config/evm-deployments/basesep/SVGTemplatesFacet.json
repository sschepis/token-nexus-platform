{
  "address": "0x5b44eBcBF0De2A64c74dE2D1A54304E740C60482",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "template",
          "type": "address"
        }
      ],
      "name": "SVGTemplateCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "name": "createSVG",
      "outputs": [
        {
          "internalType": "address",
          "name": "_tplAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        }
      ],
      "name": "setSVGManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "name": "svgAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "_svgAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "name": "svgString",
      "outputs": [
        {
          "internalType": "string",
          "name": "data_",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "svgs",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd00a9466b854ea396362a1c915cd3b009cde800ff015ff867e193f6c048390be",
  "receipt": {
    "to": null,
    "from": "0x9508f0Da19eC1C52D9C52611e4433159492bb93b",
    "contractAddress": "0x5b44eBcBF0De2A64c74dE2D1A54304E740C60482",
    "transactionIndex": 28,
    "gasUsed": "483324",
    "logsBloom": "0x
    "blockHash": "0xda137233fbe023112869d2c89a4472036b8cf452f5f393da6243b2236c53f086",
    "transactionHash": "0xd00a9466b854ea396362a1c915cd3b009cde800ff015ff867e193f6c048390be",
    "logs": [],
    "blockNumber": 26013707,
    "cumulativeGasUsed": "2717832",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "ccf876918ad4728259522ce4e695c811",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"template\",\"type\":\"address\"}],\"name\":\"SVGTemplateCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"createSVG\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_tplAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setSVGManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"svgAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_svgAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"svgString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"data_\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"svgs\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createSVG(string)\":{\"params\":{\"_name\":\"the name of the svg\",\"_tplAddress\":\"the svg data as a string\"}},\"setSVGManager(address)\":{\"params\":{\"_manager\":\"the address of the svg manager\"}},\"svgAddress(string)\":{\"params\":{\"_name\":\"the name of the svg\"},\"returns\":{\"_svgAddress\":\"the address of the svg\"}},\"svgString(string)\":{\"params\":{\"_name\":\"the name of the svg\"},\"returns\":{\"data_\":\"the svg data as a string\"}},\"svgs()\":{\"returns\":{\"_0\":\"the names of the svgs\"}}},\"title\":\"SVGTemplatesFacet\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createSVG(string)\":{\"notice\":\"add a new svg template and return the template address to the caller\"},\"setSVGManager(address)\":{\"notice\":\"set the svg manager\"},\"svgAddress(string)\":{\"notice\":\"get the svg address of the given svg name. does not mean the file exists.\"},\"svgString(string)\":{\"notice\":\"get the svg data of the given svg name as a string\"},\"svgs()\":{\"notice\":\"get all the svgs stored in the contract\"}},\"notice\":\"This contract is used to create and manage SVG templates\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/SVGTemplatesFacet.sol\":\"SVGTemplatesFacet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":11},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Create2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Create2.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Errors} from \\\"./Errors.sol\\\";\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2 {\\n    /**\\n     * @dev There's no code to deploy.\\n     */\\n    error Create2EmptyBytecode();\\n\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address addr) {\\n        if (address(this).balance < amount) {\\n            revert Errors.InsufficientBalance(address(this).balance, amount);\\n        }\\n        if (bytecode.length == 0) {\\n            revert Create2EmptyBytecode();\\n        }\\n        assembly (\\\"memory-safe\\\") {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n            // if no address was created, and returndata is not empty, bubble revert\\n            if and(iszero(addr), not(iszero(returndatasize()))) {\\n                let p := mload(0x40)\\n                returndatacopy(p, 0, returndatasize())\\n                revert(p, returndatasize())\\n            }\\n        }\\n        if (addr == address(0)) {\\n            revert Errors.FailedDeployment();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address addr) {\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40) // Get free memory pointer\\n\\n            // |                   | \\u2193 ptr ...  \\u2193 ptr + 0x0B (start) ...  \\u2193 ptr + 0x20 ...  \\u2193 ptr + 0x40 ...   |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | bytecodeHash      |                                                        CCCCCCCCCCCCC...CC |\\n            // | salt              |                                      BBBBBBBBBBBBB...BB                   |\\n            // | deployer          | 000000...0000AAAAAAAAAAAAAAAAAAA...AA                                     |\\n            // | 0xFF              |            FF                                                             |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | memory            | 000000...00FFAAAAAAAAAAAAAAAAAAA...AABBBBBBBBBBBBB...BBCCCCCCCCCCCCC...CC |\\n            // | keccak(start, 85) |            \\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191 |\\n\\n            mstore(add(ptr, 0x40), bytecodeHash)\\n            mstore(add(ptr, 0x20), salt)\\n            mstore(ptr, deployer) // Right-aligned with 12 preceding garbage bytes\\n            let start := add(ptr, 0x0b) // The hashed data starts at the final garbage byte which we will set to 0xff\\n            mstore8(start, 0xff)\\n            addr := and(keccak256(start, 85), 0xffffffffffffffffffffffffffffffffffffffff)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbb7e8401583d26268ea9103013bcdcd90866a7718bd91105ebd21c9bf11f4f06\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of common custom errors used in multiple contracts\\n *\\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\\n * It is recommended to avoid relying on the error API for critical functionality.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Errors {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedCall();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error FailedDeployment();\\n\\n    /**\\n     * @dev A necessary precompile is missing.\\n     */\\n    error MissingPrecompile(address);\\n}\\n\",\"keccak256\":\"0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123\",\"license\":\"MIT\"},\"contracts/facets/SVGTemplatesFacet.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/ISVG.sol\\\";\\nimport \\\"../interfaces/IStrings.sol\\\";\\n\\nimport \\\"../libraries/StringsLib.sol\\\";\\nimport \\\"../libraries/SVGTemplatesLib.sol\\\";\\n\\nimport \\\"../utilities/Modifiers.sol\\\";\\n\\n/// @title SVGTemplatesFacet\\n/// @notice This contract is used to create and manage SVG templates\\ncontract SVGTemplatesFacet is Modifiers {\\n\\n    using SVGTemplatesLib for SVGTemplatesContract;\\n\\n    // @notice an SVG templte has been created\\n    event SVGTemplateCreated(string name, address template);\\n\\n    /// @notice set the svg manager\\n    /// @param _manager the address of the svg manager\\n    function setSVGManager(address _manager) external onlyOwner {\\n        SVGTemplatesLib.svgStorage().svgManager = _manager;\\n    }\\n\\n    /// @notice get all the svgs stored in the contract\\n    /// @return the names of the svgs\\n    function svgs() external view returns (string[] memory) {\\n        address svgManager = SVGTemplatesLib.svgStorage().svgManager;\\n        return ISVGTemplate(svgManager).svgs();\\n    }\\n\\n    /// @notice get the svg address of the given svg name. does not mean the file exists.\\n    /// @param _name the name of the svg\\n    /// @return _svgAddress the address of the svg\\n    function svgAddress(string memory _name) external view returns (address _svgAddress) {\\n        address svgManager = SVGTemplatesLib.svgStorage().svgManager;\\n        _svgAddress = ISVGTemplate(svgManager).svgAddress(_name);\\n    }\\n\\n    /// @notice get the svg data of the given svg name as a string\\n    /// @param _name the name of the svg\\n    /// @return data_ the svg data as a string\\n    function svgString(string memory _name) external view returns (string memory data_) {\\n        address svgManager = SVGTemplatesLib.svgStorage().svgManager;\\n        data_ = ISVGTemplate(svgManager).svgString(_name);\\n    }\\n    \\n    /// @notice add a new svg template and return the template address to the caller\\n    /// @param _name the name of the svg\\n    /// @param _tplAddress the svg data as a string\\n    function createSVG(string memory _name) external onlyOwner returns(address _tplAddress) {\\n         address svgManager = SVGTemplatesLib.svgStorage().svgManager;\\n        _tplAddress = ISVGTemplate(svgManager).createSVG(msg.sender, _name);\\n    }\\n\\n}  \\n\",\"keccak256\":\"0x2c4a56c2f0f007caeb2465c48a1ec07840b0a0fd5af4299c165cf945a9acc662\",\"license\":\"MIT\"},\"contracts/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.6;\\r\\n\\r\\n/******************************************************************************\\\\\\r\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\r\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\r\\n/******************************************************************************/\\r\\n\\r\\ninterface IDiamondCut {\\r\\n    enum FacetCutAction {Add, Replace, Remove}\\r\\n    // Add=0, Replace=1, Remove=2\\r\\n\\r\\n    struct FacetCut {\\r\\n        address facetAddress;\\r\\n        FacetCutAction action;\\r\\n        bytes4[] functionSelectors;\\r\\n    }\\r\\n\\r\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\r\\n    ///         a function with delegatecall\\r\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\r\\n    /// @param _init The address of the contract or facet to execute _calldata\\r\\n    /// @param _calldata A function call, including function selector and arguments\\r\\n    ///                  _calldata is executed with delegatecall on _init\\r\\n    function diamondCut(\\r\\n        FacetCut[] calldata _diamondCut,\\r\\n        address _init,\\r\\n        bytes calldata _calldata\\r\\n    ) external;\\r\\n    \\r\\n    /// @notice Propose an upgrade to be executed after the timelock period\\r\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\r\\n    /// @param _init The address of the contract or facet to execute _calldata\\r\\n    /// @param _calldata A function call, including function selector and arguments\\r\\n    function proposeDiamondCut(\\r\\n        FacetCut[] calldata _diamondCut,\\r\\n        address _init,\\r\\n        bytes calldata _calldata\\r\\n    ) external;\\r\\n    \\r\\n    /// @notice Execute a previously proposed upgrade after the timelock period\\r\\n    function executeDiamondCut() external;\\r\\n    \\r\\n    /// @notice Cancel a proposed upgrade\\r\\n    function cancelDiamondCut() external;\\r\\n\\r\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\r\\n    event DiamondCutProposed(address indexed proposer, uint256 indexed proposalTime, uint256 executionTime);\\r\\n    event DiamondCutCancelled(address indexed canceller);\\r\\n}\\r\\n\",\"keccak256\":\"0x340a039f0dd63cf19bc669551feec28879457d8b741711ef3513168d620f11bc\",\"license\":\"MIT\"},\"contracts/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\n/// @title ERC-173 Contract Ownership Standard\\n///  Note: the ERC-165 identifier for this interface is 0x7f5828d0\\n/* is ERC165 */\\ninterface IERC173 {\\n    /// @dev This emits when ownership of a contract changes.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Get the address of the owner\\n    /// @return owner_ The address of the owner.\\n    function owner() external view returns (address owner_);\\n\\n    /// @notice Set the address of the new owner of the contract\\n    /// @dev Set _newOwner to address(0) to renounce any ownership.\\n    /// @param _newOwner The address of the new owner of the contract\\n    function transferOwnership(address _newOwner) external;\\n}\\n\",\"keccak256\":\"0x84fe28f479bf96f1819514dd8493ae15955eda0dbabcbb5f24c3c935075a31d4\",\"license\":\"MIT\"},\"contracts/interfaces/IMultiPart.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\n\\n/* solhint-disable indent */\\n\\n\\nstruct MultiPartContract {\\n    string name_;\\n    bytes[] data_;\\n}\\n\",\"keccak256\":\"0xcb970b1c3b410edf58a38791322389593058409d355ea725ebbcfb7c7841ecdd\",\"license\":\"MIT\"},\"contracts/interfaces/ISVG.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nimport \\\"../interfaces/IStrings.sol\\\";\\n\\nstruct SVGTemplatesContract {\\n    mapping(string => address) _templates;\\n    string[] _templateNames;\\n}\\n\\ninterface ISVG {\\n    function getSVG() external view returns (string memory);\\n}\\n\\ninterface ISVGTemplate {\\n    function createSVG(address sender, string memory _name) external returns (address _tplAddress);\\n    function svgs() external view returns (string[] memory);\\n    function svgName() external view returns (string memory _name);\\n    function svgString(string memory name) external view returns (string memory _data);\\n    function svgAddress(string memory name) external view returns (address _data);\\n    function svgBytes() external view returns (bytes[] memory _data);\\n    function clear() external;\\n    function add(string memory _data) external returns (uint256 _index);\\n    function addAll(string[] memory _data) external returns (uint256 _count);\\n    function buildSVG(Replacement[] memory replacements) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x1cb8dda6f9d4957c71f0fc06475be2bf4798f6368565f34a322abe015c16593c\",\"license\":\"MIT\"},\"contracts/interfaces/IStrings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nstruct Replacement {\\n    string matchString;\\n    string replaceString;\\n}\\n\",\"keccak256\":\"0x0df4530f0e41983002d8732a50f802d069b85d0f2fedad4dc58bf4b73ea39146\",\"license\":\"MIT\"},\"contracts/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\nimport \\\"../interfaces/IERC173.sol\\\"; // for IERC173 interface\\nimport \\\"../interfaces/IDiamondCut.sol\\\";\\n\\n// Remember to add the loupe functions from DiamondLoupeFacet to the diamond.\\n// The loupe functions are required by the EIP2535 Diamonds standard\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    // Upgrade proposal struct for timelock functionality\\n    struct UpgradeProposal {\\n        IDiamondCut.FacetCut[] diamondCut;\\n        address initAddress;\\n        bytes initCalldata;\\n        uint256 proposalTime;\\n        bool exists;\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n        // Timelock for upgrades (in seconds)\\n        uint256 upgradeTimelock;\\n        // Storage for the current upgrade proposal\\n        UpgradeProposal upgradeProposal;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit IERC173.OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n    }\\n\\n    // Timelock constants\\n    uint256 constant DEFAULT_UPGRADE_TIMELOCK = 2 days;\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else {\\n                revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit IDiamondCut.DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);            \\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress != _facetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n            removeFunction(ds, oldFacetAddress, selector);\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(_facetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            removeFunction(ds, oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\n        enforceHasContractCode(_facetAddress, \\\"LibDiamondCut: New facet has no code\\\");\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n        ds.facetAddresses.push(_facetAddress);\\n    }    \\n\\n\\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n        // an immutable function is a function defined directly in a diamond\\n        require(_facetAddress != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            require(_calldata.length == 0, \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\");\\n        } else {\\n            require(_calldata.length > 0, \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\");\\n            if (_init != address(this)) {\\n                enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n\\n    // Initialize timelock settings for upgrade proposals\\n    function initializeUpgradeTimelock(uint256 _timelock) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        require(ds.upgradeTimelock == 0, \\\"LibDiamond: Timelock already initialized\\\");\\n        ds.upgradeTimelock = _timelock > 0 ? _timelock : DEFAULT_UPGRADE_TIMELOCK;\\n    }\\n\\n    // Propose a diamond cut to be executed after the timelock\\n    function proposeDiamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        require(!ds.upgradeProposal.exists, \\\"LibDiamond: Upgrade already proposed\\\");\\n        require(ds.upgradeTimelock > 0, \\\"LibDiamond: Timelock not initialized\\\");\\n        \\n        // Create a deep copy of the diamond cut to store in the proposal\\n        IDiamondCut.FacetCut[] memory diamondCutCopy = new IDiamondCut.FacetCut[](_diamondCut.length);\\n        for (uint256 i = 0; i < _diamondCut.length; i++) {\\n            diamondCutCopy[i] = _diamondCut[i];\\n            \\n            // Deep copy the function selectors array\\n            bytes4[] memory selectors = new bytes4[](_diamondCut[i].functionSelectors.length);\\n            for (uint256 j = 0; j < _diamondCut[i].functionSelectors.length; j++) {\\n                selectors[j] = _diamondCut[i].functionSelectors[j];\\n            }\\n            diamondCutCopy[i].functionSelectors = selectors;\\n        }\\n        \\n        // Store the proposal\\n        // Create empty array in storage first\\n        delete ds.upgradeProposal.diamondCut;\\n        \\n        // Manually copy each element and its nested arrays to storage\\n        for (uint256 i = 0; i < _diamondCut.length; i++) {\\n            // Create a new struct in storage by pushing an empty element first\\n            ds.upgradeProposal.diamondCut.push();\\n            \\n            // Now set the values for this element's fields\\n            ds.upgradeProposal.diamondCut[i].facetAddress = _diamondCut[i].facetAddress;\\n            ds.upgradeProposal.diamondCut[i].action = _diamondCut[i].action;\\n            \\n            // For the selectors array, we need to handle it separately\\n            // Clear any existing selectors to ensure clean state\\n            delete ds.upgradeProposal.diamondCut[i].functionSelectors;\\n            \\n            // Copy each selector individually\\n            for (uint256 j = 0; j < _diamondCut[i].functionSelectors.length; j++) {\\n                ds.upgradeProposal.diamondCut[i].functionSelectors.push(_diamondCut[i].functionSelectors[j]);\\n            }\\n        }\\n        ds.upgradeProposal.initAddress = _init;\\n        ds.upgradeProposal.initCalldata = _calldata;\\n        ds.upgradeProposal.proposalTime = block.timestamp;\\n        ds.upgradeProposal.exists = true;\\n        \\n        emit IDiamondCut.DiamondCutProposed(msg.sender, block.timestamp, block.timestamp + ds.upgradeTimelock);\\n    }\\n    \\n    // Execute a proposed diamond cut after the timelock period\\n    function executeDiamondCut() internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        require(ds.upgradeProposal.exists, \\\"LibDiamond: No upgrade proposal exists\\\");\\n        require(\\n            block.timestamp >= ds.upgradeProposal.proposalTime + ds.upgradeTimelock,\\n            \\\"LibDiamond: Timelock period not elapsed\\\"\\n        );\\n        \\n        // Execute the diamond cut\\n        diamondCut(\\n            ds.upgradeProposal.diamondCut,\\n            ds.upgradeProposal.initAddress,\\n            ds.upgradeProposal.initCalldata\\n        );\\n        \\n        // Reset the proposal\\n        delete ds.upgradeProposal;\\n    }\\n    \\n    // Cancel a proposed diamond cut\\n    function cancelDiamondCut() internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        require(ds.upgradeProposal.exists, \\\"LibDiamond: No upgrade proposal exists\\\");\\n        \\n        // Reset the proposal\\n        delete ds.upgradeProposal;\\n        \\n        emit IDiamondCut.DiamondCutCancelled(msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x2bb59ec15c5218cff473ba4ae9f480fd346c4f91aff5e7a1850e0ad29e51b31b\",\"license\":\"MIT\"},\"contracts/libraries/SVGTemplatesLib.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/utils/Create2.sol\\\";\\n\\nimport \\\"../interfaces/ISVG.sol\\\";\\nimport \\\"../interfaces/IStrings.sol\\\";\\nimport \\\"../interfaces/IMultiPart.sol\\\";\\n\\nimport \\\"../libraries/StringsLib.sol\\\";\\n\\nimport \\\"../utilities/SVGTemplate.sol\\\";\\n\\nstruct SaltStorage {\\n    uint256 salt;\\n}\\n\\nstruct SVGStorage {\\n    SVGTemplatesContract svgTemplates;\\n    SaltStorage salt;    \\n    address svgManager;\\n    MultiPartContract multiPart;\\n}\\n\\nlibrary SVGTemplatesLib {\\n\\n    event SVGTemplateCreated(string name, address template);\\n\\n    bytes32 internal constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.nextblock.bitgem.app.SVGStorage.storage\\\");\\n\\n    function svgStorage() internal pure returns (SVGStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n    \\n    /// @notice get the stored template names in the contract\\n    /// @return the names of the templates\\n    function _svgs(SVGTemplatesContract storage self)\\n        internal\\n        view\\n        returns (string[] memory) { return self._templateNames; }\\n\\n    /// @notice get the create2 address of the given name\\n    function _svgAddress(\\n        SVGTemplatesContract storage,\\n        string memory _name) \\n        internal \\n        view returns (address) {\\n        return Create2.computeAddress(\\n            keccak256(abi.encodePacked(_name)), \\n            keccak256(type(SVGTemplate).creationCode)\\n        );  \\n    }\\n\\n    /// @notice the svg string or an empty string\\n    function _svgString(\\n        SVGTemplatesContract storage self,\\n        string memory _name\\n    ) internal view returns (string memory data_) {\\n        try SVGTemplate(_svgAddress(self, _name)).svgString() returns (string memory _data) {\\n            data_ = _data;\\n        } catch (bytes memory) {}\\n    }\\n\\n    /// @notice the sstored address for the name storage. empty is no svg\\n    function _svgData(\\n        SVGTemplatesContract storage self,\\n        string memory _name\\n    ) internal view returns (address) {\\n        return self._templates[_name];\\n    }\\n\\n    /// @notice create a new SVG image with the given name\\n    function _createSVG(SVGTemplatesContract storage self, address sender, string memory _name)\\n        internal\\n        returns (address _tplAddress)\\n    {\\n        // make sure the name is unique\\n        require(\\n            self._templates[_name] == address(0),\\n            \\\"template already deployed\\\"\\n        );\\n\\n        // get the address for the given name, create using create2,\\n        // then verify that create2 returned the expected address\\n        address targetTplAddress = _svgAddress(self, _name);\\n        _tplAddress = Create2.deploy(\\n            0,\\n            keccak256(abi.encodePacked(_name)),\\n            type(SVGTemplate).creationCode\\n        );\\n        require(targetTplAddress == _tplAddress, \\\"template address mismatch\\\");\\n\\n        // transfer ownership to the creator and update storage\\n        Ownable(_tplAddress).transferOwnership(sender);\\n        self._templateNames.push(_name);\\n        self._templates[_name] = _tplAddress;\\n    }\\n}\\n\",\"keccak256\":\"0x26dfe5608e1b47a5537f8ff8d7c6312eade2b181950d7f41f6a999b1a84b72f2\",\"license\":\"MIT\"},\"contracts/libraries/StringsLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nimport \\\"../interfaces/IStrings.sol\\\";\\n\\nlibrary StringsLib {\\n\\n    function parseInt(string memory s) internal pure returns (uint256 res) {\\n        uint256 sLength = bytes(s).length;\\n        for (uint256 i = 0; i < sLength; i++) {\\n            if ((uint8(bytes(s)[i]) - 48) < 0 || (uint8(bytes(s)[i]) - 48) > 9) {\\n                return 0;\\n            }\\n            res += (uint8(bytes(s)[i]) - 48) * 10**(bytes(s).length - i - 1);\\n        }\\n        return res;\\n\\n    }\\n\\n    function startsWith(string memory haystack, string memory needle)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        bytes memory haystackBytes = bytes(haystack);\\n        bytes memory needleBytes = bytes(needle);\\n        uint256 haystackLength = haystackBytes.length;\\n        uint256 needleLength = needleBytes.length;\\n        if (needleLength > haystackLength) {\\n            return false;\\n        }\\n        for (uint256 i = 0; i < needleLength; i++) {\\n            if (haystackBytes[i] != needleBytes[i]) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    function endsWith(string memory haystack, string memory needle)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        bytes memory haystackBytes = bytes(haystack);\\n        bytes memory needleBytes = bytes(needle);\\n        uint256 haystackLength = haystackBytes.length;\\n        uint256 needleLength = needleBytes.length;\\n        if (needleLength > haystackLength) {\\n            return false;\\n        }\\n        for (uint256 i = 0; i < needleLength; i++) {\\n            if (\\n                haystackBytes[haystackLength - i - 1] !=\\n                needleBytes[needleLength - i - 1]\\n            ) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    function substring(string memory haystack, uint256 startpos)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        bytes memory haystackBytes = bytes(haystack);\\n        uint256 length = haystackBytes.length;\\n        uint256 endpos = length - startpos;\\n        bytes memory substringBytes = new bytes(endpos);\\n        for (uint256 i = 0; i < endpos; i++) {\\n            substringBytes[i] = haystackBytes[startpos + i];\\n        }\\n        return string(substringBytes);\\n    }\\n\\n    function substring(string memory haystack, uint256 startpos, uint256 endpos)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        bytes memory haystackBytes = bytes(haystack);\\n        uint256 substringLength = endpos - startpos;\\n        bytes memory substringBytes = new bytes(substringLength);\\n        for (uint256 i = 0; i < substringLength; i++) {\\n            substringBytes[i] = haystackBytes[startpos + i];\\n        }\\n        return string(substringBytes);\\n    }\\n\\n    function concat(string[] memory _strings)\\n        internal\\n        pure\\n        returns (string memory _concat)\\n    {\\n        _concat = \\\"\\\";\\n        uint256 stringsLength = _strings.length;\\n        for (uint256 i = 0; i < stringsLength; i++) {\\n            _concat = string(abi.encodePacked(_concat, _strings[i]));\\n        }\\n        return _concat;\\n    }\\n\\n    function split(string memory _string, string memory _delimiter) internal pure returns (string[] memory _split) {\\n        _split = new string[](0);\\n        uint256 _delimiterLength = bytes(_delimiter).length;\\n        uint256 _stringLength = bytes(_string).length;\\n        uint256 _splitLength = 0;\\n        uint256 _splitIndex = 0;\\n        uint256 _startpos = 0;\\n        uint256 _endpos = 0;\\n        for (uint256 i = 0; i < _stringLength; i++) {\\n            if (bytes(_string)[i] == bytes(_delimiter)[0]) {\\n                _endpos = i;\\n                if (_endpos - _startpos > 0) {\\n                    _split[_splitIndex] = substring(_string, _startpos);\\n                    _splitIndex++;\\n                    _splitLength++;\\n                }\\n                _startpos = i + _delimiterLength;\\n            }\\n        }\\n        if (_startpos < _stringLength) {\\n            _split[_splitIndex] = substring(_string, _startpos);\\n            _splitIndex++;\\n            _splitLength++;\\n        }\\n        return _split;\\n    }\\n\\n    function join(string[] memory _strings, string memory _delimiter) internal pure returns (string memory _joined) {\\n        uint256 stringsLength = _strings.length;\\n        for (uint256 i = 0; i < stringsLength; i++) {\\n            _joined = string(abi.encodePacked(_joined, _strings[i]));\\n            if (i < _strings.length - 1) {\\n                _joined = string(abi.encodePacked(_joined, _delimiter));\\n            }\\n        }\\n        return _joined;\\n    }\\n\\n    function replace(string memory _string, string memory _search, string memory _replace) internal pure returns (string memory _replaced) {\\n        _replaced = _string;\\n        uint256 _searchLength = bytes(_search).length;\\n        uint256 _stringLength = bytes(_string).length;\\n        uint256 _replacedLength = _stringLength;\\n        uint256 _startpos = 0;\\n        uint256 _endpos = 0;\\n        for (uint256 i = 0; i < _stringLength; i++) {\\n            if (bytes(_string)[i] == bytes(_search)[0]) {\\n                _endpos = i;\\n                if (_endpos - _startpos > 0) {\\n                    _replaced = substring(_replaced, _startpos);\\n                    _replacedLength -= _endpos - _startpos;\\n                }\\n                _replaced = string(abi.encodePacked(_replaced, _replace));\\n                _replacedLength += bytes(_replace).length;\\n                _startpos = i + _searchLength;\\n            }\\n        }\\n        if (_startpos < _stringLength) {\\n            _replaced = substring(_replaced, _startpos);\\n            _replacedLength -= _stringLength - _startpos;\\n        }\\n        return _replaced;\\n    }\\n\\n    function trim(string memory _string) internal pure returns (string memory _trimmed) {\\n        _trimmed = _string;\\n        uint256 _stringLength = bytes(_string).length;\\n        uint256 _startpos = 0;\\n        uint256 _endpos = 0;\\n        for (uint256 i = 0; i < _stringLength; i++) {\\n            if (bytes(_string)[i] != 0x20) {\\n                _startpos = i;\\n                break;\\n            }\\n        }\\n        for (uint256 i = _stringLength - 1; i >= 0; i--) {\\n            if (bytes(_string)[i] != 0x20) {\\n                _endpos = i;\\n                break;\\n            }\\n        }\\n        if (_startpos < _endpos) {\\n            _trimmed = substring(_trimmed, _startpos);\\n            _trimmed = substring(_trimmed, 0, _endpos - _startpos + 1);\\n        }\\n        return _trimmed;\\n    }\\n\\n    function toUint16(string memory s) internal pure returns (uint16 res_) {\\n        uint256 res = 0;\\n        uint256 sLength = bytes(s).length;\\n        for (uint256 i = 0; i < sLength; i++) {\\n            if ((uint8(bytes(s)[i]) - 48) < 0 || (uint8(bytes(s)[i]) - 48) > 9) {\\n                return 0;\\n            }\\n            res += (uint8(bytes(s)[i]) - 48) * 10**(bytes(s).length - i - 1);\\n        }\\n        res_ = uint16(res);\\n    }\\n\\n\\n    function replace(string[] memory input, string memory matchTag, string[] memory repl) internal pure returns (string memory) {\\n        string memory svgBody;\\n        for(uint256 i = 0; i < input.length; i++) {\\n            string memory svgString = input[i];\\n            string memory outValue;\\n            if(StringsLib.startsWith(svgString, matchTag)) {\\n                string memory restOfLine = StringsLib.substring(svgString, bytes(matchTag).length);\\n                uint256 replIndex = StringsLib.parseInt(restOfLine);\\n                outValue = repl[replIndex];\\n            } else {\\n                outValue = svgString;\\n            }\\n            svgBody = string(abi.encodePacked(svgBody, outValue));\\n        }\\n        return svgBody;\\n    }\\n\\n    function replace(bytes[] memory sourceBytes, Replacement[] memory replacements_) public pure returns (string memory) {\\n        //bytes[] memory sourceBytes = _getSourceBytes();\\n        string memory outputFile = \\\"\\\";\\n        uint256 sourceBytesLength = sourceBytes.length;\\n        for (uint256 i = 0; i < sourceBytesLength; i++) {\\n            bytes memory sourceByte = sourceBytes[i];\\n            string memory outputLine  = string(sourceBytes[i]);\\n            for (uint256 j = 0; j < replacements_.length; j++) {\\n                Replacement memory replacement = replacements_[j];\\n                if (keccak256(sourceByte) == keccak256(bytes(replacement.matchString))) {\\n                    outputLine = replacement.replaceString;\\n                }\\n            }\\n            outputFile = string(abi.encodePacked(outputFile, outputLine));\\n        }\\n        return outputFile;\\n    }    \\n}\\n\",\"keccak256\":\"0xe7997c850465105fcfa7ea7b78f1ea9349d726696de51652f05575069d293ef4\",\"license\":\"MIT\"},\"contracts/utilities/Modifiers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nimport \\\"../libraries/LibDiamond.sol\\\";\\n\\ncontract Modifiers {\\n\\n    modifier onlyOwner() {\\n        require(LibDiamond.contractOwner() == msg.sender || address(this) == msg.sender,\\n            \\\"not authorized to call function\\\");\\n        _;\\n    }\\n\\n    // Removed diamondOwner() function to avoid selector collision.\\n    // Use owner() from OwnershipFacet (IERC173) instead.\\n\\n}\",\"keccak256\":\"0xd1b5a54d763fd2a4831cbfc84d4d17a21c23c52a22e65acb3ce715f3e0f7d773\",\"license\":\"MIT\"},\"contracts/utilities/MultipartData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nimport \\\"../libraries/SVGTemplatesLib.sol\\\";\\n\\nimport \\\"../interfaces/IMultiPart.sol\\\";\\n\\nabstract contract MultipartData  {\\n    /// @notice add a new multipart to the contract\\n    /// @param _data the data of the multipart\\n    function _addData(bytes memory _data)\\n        internal returns (uint256 _index) {\\n        _index = SVGTemplatesLib.svgStorage().multiPart.data_.length;\\n        SVGTemplatesLib.svgStorage().multiPart.data_.push(_data);\\n    }\\n\\n    /// @notice get the data of the given index\\n    /// @param _index the index of the data\\n    function _getData(uint256 _index)\\n        internal view  returns (bytes memory data) {\\n        data = SVGTemplatesLib.svgStorage().multiPart.data_[_index];\\n    }\\n\\n    /// @notice get the data as a string\\n    function _fromBytes() internal view returns (string memory output) {\\n        string memory result = \\\"\\\";\\n        uint256 dataLength = SVGTemplatesLib.svgStorage().multiPart.data_.length;\\n        for (uint256 i = 0; i < dataLength; i++) {\\n            result = string(abi.encodePacked(result, SVGTemplatesLib.svgStorage().multiPart.data_[i]));\\n        }\\n        output = result;\\n    }\\n\\n    /// @notice get the data as a  bytes array\\n    function data__() internal view returns (bytes[] storage) {\\n        return SVGTemplatesLib.svgStorage().multiPart.data_;\\n    }\\n\\n    /// @notice clear the contents of the data array\\n    function _clear() internal {\\n        delete SVGTemplatesLib.svgStorage().multiPart.data_;\\n    }\\n}\",\"keccak256\":\"0xce66216bd61e1e1552e3ba3bea1d938e579ab254d2da435de6fcac1e19180b61\",\"license\":\"MIT\"},\"contracts/utilities/SVGTemplate.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nimport \\\"../utilities/MultipartData.sol\\\";\\n\\nimport \\\"../libraries/StringsLib.sol\\\";\\nimport \\\"../libraries/SVGTemplatesLib.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\n/// @notice a single SVG image\\ncontract SVGTemplate is MultipartData, Ownable, Initializable {\\n\\n    event SVGImageAdded(address indexed _from, address indexed _to, string _name, string _data);\\n    event SVGImagePartAdded(address indexed _from, address indexed _to, string _name, string _data);\\n\\n    constructor() Ownable(msg.sender) {}\\n\\n    function initialize(string memory _name, string[] memory _svg) external initializer {\\n        MultiPartContract storage ds = SVGTemplatesLib.svgStorage().multiPart;\\n        ds.name_ = _name;\\n        for(uint i = 0; i < _svg.length; i++) {\\n            ds.data_.push(bytes(_svg[i]));\\n        }\\n    }\\n\\n    /// @notice the name of the svg\\n    function svgName() external view returns (string memory _name) {\\n        MultiPartContract storage ds = SVGTemplatesLib.svgStorage().multiPart;\\n        _name = ds.name_;\\n    }\\n\\n    /// @notice the data of the svg\\n    function svgString() external view returns (string memory _data) {\\n        _data = _fromBytes();\\n    }\\n\\n    /// @notice the data of the svg\\n    function svgBytes() external view returns (bytes[] memory _data) {\\n        _data = data__();\\n    }\\n    \\n    /// @notice clear the data of the svg\\n    function clear() external onlyOwner {\\n        _clear();\\n    }\\n\\n    /// @notice add data to the end of the data\\n    function add(string memory _data) external onlyOwner returns (uint256 _index) {\\n        _index = _addData(bytes(_data));\\n        emit SVGImagePartAdded(msg.sender, address(this), SVGTemplatesLib.svgStorage().multiPart.name_, _data);\\n    }\\n\\n    /// @notice add all SVG lines at\\n    function addAll(string[] memory _data) external onlyOwner returns (uint256 _count) {\\n        for(uint256 i = 0; i < _data.length; i++) {\\n            _addData(bytes(_data[i]));\\n        }\\n        _count = _data.length;\\n        MultiPartContract storage ds = SVGTemplatesLib.svgStorage().multiPart;\\n        emit SVGImageAdded(msg.sender, address(this), ds.name_, _fromBytes());\\n    }\\n\\n    /// @notice get the svg, replacing the data with the data from the given replacements\\n    function buildSVG(Replacement[] memory replacements) external view returns (string memory) {\\n        return StringsLib.replace(data__(), replacements);\\n    }\\n}\",\"keccak256\":\"0xfbbefbfb61a11e259228358663627f001b5497ec429573a4f1e760b7c74911f1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052348015600f57600080fd5b506107c88061001f6000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80630e60927a1461005c5780631373d4e81461008c5780631f2cd4c6146100a1578063719acbd4146100c157806393327929146100d4575b600080fd5b61006f61006a36600461044e565b6100e9565b6040516001600160a01b0390911681526020015b60405180910390f35b610094610170565b604051610083919061051d565b6100b46100af36600461044e565b610201565b6040516100839190610582565b61006f6100cf36600461044e565b610286565b6100e76100e23660046105ad565b610329565b005b6000806100f461038f565b60030154604051630730493d60e11b81526001600160a01b0390911691508190630e60927a90610128908690600401610582565b602060405180830381865afa158015610145573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061016991906105ca565b9392505050565b6060600061017c61038f565b60030160009054906101000a90046001600160a01b03169050806001600160a01b0316631373d4e86040518163ffffffff1660e01b8152600401600060405180830381865afa1580156101d3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101fb9190810190610634565b91505090565b6060600061020d61038f565b60030154604051630f966a6360e11b81526001600160a01b0390911691508190631f2cd4c690610241908690600401610582565b600060405180830381865afa15801561025e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101699190810190610703565b6000336102916103b3565b6001600160a01b031614806102a557503033145b6102ca5760405162461bcd60e51b81526004016102c190610737565b60405180910390fd5b60006102d461038f565b6003015460405163642cd09160e01b81526001600160a01b039091169150819063642cd0919061030a903390879060040161076e565b6020604051808303816000875af1158015610145573d6000803e3d6000fd5b336103326103b3565b6001600160a01b0316148061034657503033145b6103625760405162461bcd60e51b81526004016102c190610737565b8061036b61038f565b60030180546001600160a01b0319166001600160a01b039290921691909117905550565b7fd6bd814cc1bc4b2e2e963d75e86b66330979dafa58695edbdc535ed90fc5985e90565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c1320546001600160a01b031690565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561041f5761041f6103e1565b604052919050565b60006001600160401b03821115610440576104406103e1565b50601f01601f191660200190565b60006020828403121561046057600080fd5b81356001600160401b0381111561047657600080fd5b8201601f8101841361048757600080fd5b803561049a61049582610427565b6103f7565b8181528560208385010111156104af57600080fd5b81602084016020830137600091810160200191909152949350505050565b60005b838110156104e85781810151838201526020016104d0565b50506000910152565b600081518084526105098160208601602086016104cd565b601f01601f19169290920160200192915050565b6000602082016020835280845180835260408501915060408160051b86010192506020860160005b8281101561057657603f198786030184526105618583516104f1565b94506020938401939190910190600101610545565b50929695505050505050565b60208152600061016960208301846104f1565b6001600160a01b03811681146105aa57600080fd5b50565b6000602082840312156105bf57600080fd5b813561016981610595565b6000602082840312156105dc57600080fd5b815161016981610595565b600082601f8301126105f857600080fd5b815161060661049582610427565b81815284602083860101111561061b57600080fd5b61062c8260208301602087016104cd565b949350505050565b60006020828403121561064657600080fd5b81516001600160401b0381111561065c57600080fd5b8201601f8101841361066d57600080fd5b80516001600160401b03811115610686576106866103e1565b8060051b610696602082016103f7565b918252602081840181019290810190878411156106b257600080fd5b6020850192505b838310156106f85782516001600160401b038111156106d757600080fd5b6106e6896020838901016105e7565b835250602092830192909101906106b9565b979650505050505050565b60006020828403121561071557600080fd5b81516001600160401b0381111561072b57600080fd5b61062c848285016105e7565b6020808252601f908201527f6e6f7420617574686f72697a656420746f2063616c6c2066756e6374696f6e00604082015260600190565b6001600160a01b038316815260406020820181905260009061062c908301846104f156fea2646970667358221220e3c417402660639b0af8c41f1f717f212b4c4399eba9318482f3f12ee686f46764736f6c634300081c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c80630e60927a1461005c5780631373d4e81461008c5780631f2cd4c6146100a1578063719acbd4146100c157806393327929146100d4575b600080fd5b61006f61006a36600461044e565b6100e9565b6040516001600160a01b0390911681526020015b60405180910390f35b610094610170565b604051610083919061051d565b6100b46100af36600461044e565b610201565b6040516100839190610582565b61006f6100cf36600461044e565b610286565b6100e76100e23660046105ad565b610329565b005b6000806100f461038f565b60030154604051630730493d60e11b81526001600160a01b0390911691508190630e60927a90610128908690600401610582565b602060405180830381865afa158015610145573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061016991906105ca565b9392505050565b6060600061017c61038f565b60030160009054906101000a90046001600160a01b03169050806001600160a01b0316631373d4e86040518163ffffffff1660e01b8152600401600060405180830381865afa1580156101d3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101fb9190810190610634565b91505090565b6060600061020d61038f565b60030154604051630f966a6360e11b81526001600160a01b0390911691508190631f2cd4c690610241908690600401610582565b600060405180830381865afa15801561025e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101699190810190610703565b6000336102916103b3565b6001600160a01b031614806102a557503033145b6102ca5760405162461bcd60e51b81526004016102c190610737565b60405180910390fd5b60006102d461038f565b6003015460405163642cd09160e01b81526001600160a01b039091169150819063642cd0919061030a903390879060040161076e565b6020604051808303816000875af1158015610145573d6000803e3d6000fd5b336103326103b3565b6001600160a01b0316148061034657503033145b6103625760405162461bcd60e51b81526004016102c190610737565b8061036b61038f565b60030180546001600160a01b0319166001600160a01b039290921691909117905550565b7fd6bd814cc1bc4b2e2e963d75e86b66330979dafa58695edbdc535ed90fc5985e90565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c1320546001600160a01b031690565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561041f5761041f6103e1565b604052919050565b60006001600160401b03821115610440576104406103e1565b50601f01601f191660200190565b60006020828403121561046057600080fd5b81356001600160401b0381111561047657600080fd5b8201601f8101841361048757600080fd5b803561049a61049582610427565b6103f7565b8181528560208385010111156104af57600080fd5b81602084016020830137600091810160200191909152949350505050565b60005b838110156104e85781810151838201526020016104d0565b50506000910152565b600081518084526105098160208601602086016104cd565b601f01601f19169290920160200192915050565b6000602082016020835280845180835260408501915060408160051b86010192506020860160005b8281101561057657603f198786030184526105618583516104f1565b94506020938401939190910190600101610545565b50929695505050505050565b60208152600061016960208301846104f1565b6001600160a01b03811681146105aa57600080fd5b50565b6000602082840312156105bf57600080fd5b813561016981610595565b6000602082840312156105dc57600080fd5b815161016981610595565b600082601f8301126105f857600080fd5b815161060661049582610427565b81815284602083860101111561061b57600080fd5b61062c8260208301602087016104cd565b949350505050565b60006020828403121561064657600080fd5b81516001600160401b0381111561065c57600080fd5b8201601f8101841361066d57600080fd5b80516001600160401b03811115610686576106866103e1565b8060051b610696602082016103f7565b918252602081840181019290810190878411156106b257600080fd5b6020850192505b838310156106f85782516001600160401b038111156106d757600080fd5b6106e6896020838901016105e7565b835250602092830192909101906106b9565b979650505050505050565b60006020828403121561071557600080fd5b81516001600160401b0381111561072b57600080fd5b61062c848285016105e7565b6020808252601f908201527f6e6f7420617574686f72697a656420746f2063616c6c2066756e6374696f6e00604082015260600190565b6001600160a01b038316815260406020820181905260009061062c908301846104f156fea2646970667358221220e3c417402660639b0af8c41f1f717f212b4c4399eba9318482f3f12ee686f46764736f6c634300081c0033",
  "libraries": {
    "AddressSet": "0x8aB21bf41B908d9CBee3E78e97033E3916840cA8",
    "AttributeLib": "0x9d0749b64bEDB024B1AaF596c84029E67635D43c",
    "Base64": "0x8d10857B6d2bEA12d67A888F3E995ea142Db701E",
    "Bytes32Set": "0xB01Cf1Baf9ABFa5309AE3ff649B31ae87A80AE62",
    "CarbonCreditLib": "0x44520E8dA039d4D7D460f5DBF6C1eC347De53A7C",
    "DiamondFactoryLib": "0x50353159348c63A448eDAfC6d5ef81CF9C1cdE9a",
    "DiamondLib": "0x2Be86045394c8096b3b9d9449A08Cc74afEd5717",
    "ERC721AEnumerationLib": "0x6a9A6D75AECEfB8dC969D5Ef5ea3EcF57e29706d",
    "ERC721ALib": "0x8F980CBDb943c2794FdA47D82d81a71d31A815DE",
    "Identity": "0x4C6fE457018d32B9aEc2aA99F655b5aCD7d0D658",
    "IdentityFactory": "0x5c970fD1E772548Be3Dc3de62381Fd8b2b3fAb96",
    "IdentitySystemStorage": "0x05d7966Acfa90f529e3844B1d1b7702dBde7789c",
    "LibDiamond": "0x30Fb10d923CfFC1151B8CFe683A937F414854570",
    "MerkleProver": "0x6361c8F2C7Fb1498C15C5e90Ed477ee8cEeC9f5f",
    "MetadataLib": "0xEA17bE869d528F2c3e4F7cae231ebE4BE42BeB75",
    "MultiSaleLib": "0x3b12B21202DaC69552E7b1f9D4D3E31085c7a378",
    "Strings": "0x26375f3210F1F8C90f53c663AC44F3d4a86b12A6",
    "StringsLib": "0x928c0A50586514D291087403befe3540E3631ECd",
    "SVGTemplatesLib": "0xFD3DfE346d5d5c8C90313036BC1b1E3De29FCb33",
    "UInt256Set": "0x908B9bE15117446dE01d076Ecb75D9210E182D97",
    "VariablePriceLib": "0x92E3cBf7226518CF757c48446067de1485CCCcBb"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "createSVG(string)": {
        "params": {
          "_name": "the name of the svg",
          "_tplAddress": "the svg data as a string"
        }
      },
      "setSVGManager(address)": {
        "params": {
          "_manager": "the address of the svg manager"
        }
      },
      "svgAddress(string)": {
        "params": {
          "_name": "the name of the svg"
        },
        "returns": {
          "_svgAddress": "the address of the svg"
        }
      },
      "svgString(string)": {
        "params": {
          "_name": "the name of the svg"
        },
        "returns": {
          "data_": "the svg data as a string"
        }
      },
      "svgs()": {
        "returns": {
          "_0": "the names of the svgs"
        }
      }
    },
    "title": "SVGTemplatesFacet",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "createSVG(string)": {
        "notice": "add a new svg template and return the template address to the caller"
      },
      "setSVGManager(address)": {
        "notice": "set the svg manager"
      },
      "svgAddress(string)": {
        "notice": "get the svg address of the given svg name. does not mean the file exists."
      },
      "svgString(string)": {
        "notice": "get the svg data of the given svg name as a string"
      },
      "svgs()": {
        "notice": "get all the svgs stored in the contract"
      }
    },
    "notice": "This contract is used to create and manage SVG templates",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}