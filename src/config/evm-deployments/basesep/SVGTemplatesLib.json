{
  "address": "0xFD3DfE346d5d5c8C90313036BC1b1E3De29FCb33",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "template",
          "type": "address"
        }
      ],
      "name": "SVGTemplateCreated",
      "type": "event"
    }
  ],
  "transactionHash": "0x34497b2b9f538260121c3118e0522810c8082f14bcf1960d69da649f6fd84736",
  "receipt": {
    "to": null,
    "from": "0x9508f0Da19eC1C52D9C52611e4433159492bb93b",
    "contractAddress": "0xFD3DfE346d5d5c8C90313036BC1b1E3De29FCb33",
    "transactionIndex": 21,
    "gasUsed": "72227",
    "logsBloom": "0x
    "blockHash": "0xc5c3a1180fe651161422735bec0c46afce57f24e586cb525cc0add1a20abe16f",
    "transactionHash": "0x34497b2b9f538260121c3118e0522810c8082f14bcf1960d69da649f6fd84736",
    "logs": [],
    "blockNumber": 26013681,
    "cumulativeGasUsed": "2393084",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "ccf876918ad4728259522ce4e695c811",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"template\",\"type\":\"address\"}],\"name\":\"SVGTemplateCreated\",\"type\":\"event\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/SVGTemplatesLib.sol\":\"SVGTemplatesLib\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":11},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Create2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Create2.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Errors} from \\\"./Errors.sol\\\";\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2 {\\n    /**\\n     * @dev There's no code to deploy.\\n     */\\n    error Create2EmptyBytecode();\\n\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address addr) {\\n        if (address(this).balance < amount) {\\n            revert Errors.InsufficientBalance(address(this).balance, amount);\\n        }\\n        if (bytecode.length == 0) {\\n            revert Create2EmptyBytecode();\\n        }\\n        assembly (\\\"memory-safe\\\") {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n            // if no address was created, and returndata is not empty, bubble revert\\n            if and(iszero(addr), not(iszero(returndatasize()))) {\\n                let p := mload(0x40)\\n                returndatacopy(p, 0, returndatasize())\\n                revert(p, returndatasize())\\n            }\\n        }\\n        if (addr == address(0)) {\\n            revert Errors.FailedDeployment();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address addr) {\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40) // Get free memory pointer\\n\\n            // |                   | \\u2193 ptr ...  \\u2193 ptr + 0x0B (start) ...  \\u2193 ptr + 0x20 ...  \\u2193 ptr + 0x40 ...   |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | bytecodeHash      |                                                        CCCCCCCCCCCCC...CC |\\n            // | salt              |                                      BBBBBBBBBBBBB...BB                   |\\n            // | deployer          | 000000...0000AAAAAAAAAAAAAAAAAAA...AA                                     |\\n            // | 0xFF              |            FF                                                             |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | memory            | 000000...00FFAAAAAAAAAAAAAAAAAAA...AABBBBBBBBBBBBB...BBCCCCCCCCCCCCC...CC |\\n            // | keccak(start, 85) |            \\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191 |\\n\\n            mstore(add(ptr, 0x40), bytecodeHash)\\n            mstore(add(ptr, 0x20), salt)\\n            mstore(ptr, deployer) // Right-aligned with 12 preceding garbage bytes\\n            let start := add(ptr, 0x0b) // The hashed data starts at the final garbage byte which we will set to 0xff\\n            mstore8(start, 0xff)\\n            addr := and(keccak256(start, 85), 0xffffffffffffffffffffffffffffffffffffffff)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbb7e8401583d26268ea9103013bcdcd90866a7718bd91105ebd21c9bf11f4f06\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of common custom errors used in multiple contracts\\n *\\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\\n * It is recommended to avoid relying on the error API for critical functionality.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Errors {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedCall();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error FailedDeployment();\\n\\n    /**\\n     * @dev A necessary precompile is missing.\\n     */\\n    error MissingPrecompile(address);\\n}\\n\",\"keccak256\":\"0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123\",\"license\":\"MIT\"},\"contracts/interfaces/IMultiPart.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\n\\n/* solhint-disable indent */\\n\\n\\nstruct MultiPartContract {\\n    string name_;\\n    bytes[] data_;\\n}\\n\",\"keccak256\":\"0xcb970b1c3b410edf58a38791322389593058409d355ea725ebbcfb7c7841ecdd\",\"license\":\"MIT\"},\"contracts/interfaces/ISVG.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nimport \\\"../interfaces/IStrings.sol\\\";\\n\\nstruct SVGTemplatesContract {\\n    mapping(string => address) _templates;\\n    string[] _templateNames;\\n}\\n\\ninterface ISVG {\\n    function getSVG() external view returns (string memory);\\n}\\n\\ninterface ISVGTemplate {\\n    function createSVG(address sender, string memory _name) external returns (address _tplAddress);\\n    function svgs() external view returns (string[] memory);\\n    function svgName() external view returns (string memory _name);\\n    function svgString(string memory name) external view returns (string memory _data);\\n    function svgAddress(string memory name) external view returns (address _data);\\n    function svgBytes() external view returns (bytes[] memory _data);\\n    function clear() external;\\n    function add(string memory _data) external returns (uint256 _index);\\n    function addAll(string[] memory _data) external returns (uint256 _count);\\n    function buildSVG(Replacement[] memory replacements) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x1cb8dda6f9d4957c71f0fc06475be2bf4798f6368565f34a322abe015c16593c\",\"license\":\"MIT\"},\"contracts/interfaces/IStrings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nstruct Replacement {\\n    string matchString;\\n    string replaceString;\\n}\\n\",\"keccak256\":\"0x0df4530f0e41983002d8732a50f802d069b85d0f2fedad4dc58bf4b73ea39146\",\"license\":\"MIT\"},\"contracts/libraries/SVGTemplatesLib.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/utils/Create2.sol\\\";\\n\\nimport \\\"../interfaces/ISVG.sol\\\";\\nimport \\\"../interfaces/IStrings.sol\\\";\\nimport \\\"../interfaces/IMultiPart.sol\\\";\\n\\nimport \\\"../libraries/StringsLib.sol\\\";\\n\\nimport \\\"../utilities/SVGTemplate.sol\\\";\\n\\nstruct SaltStorage {\\n    uint256 salt;\\n}\\n\\nstruct SVGStorage {\\n    SVGTemplatesContract svgTemplates;\\n    SaltStorage salt;    \\n    address svgManager;\\n    MultiPartContract multiPart;\\n}\\n\\nlibrary SVGTemplatesLib {\\n\\n    event SVGTemplateCreated(string name, address template);\\n\\n    bytes32 internal constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.nextblock.bitgem.app.SVGStorage.storage\\\");\\n\\n    function svgStorage() internal pure returns (SVGStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n    \\n    /// @notice get the stored template names in the contract\\n    /// @return the names of the templates\\n    function _svgs(SVGTemplatesContract storage self)\\n        internal\\n        view\\n        returns (string[] memory) { return self._templateNames; }\\n\\n    /// @notice get the create2 address of the given name\\n    function _svgAddress(\\n        SVGTemplatesContract storage,\\n        string memory _name) \\n        internal \\n        view returns (address) {\\n        return Create2.computeAddress(\\n            keccak256(abi.encodePacked(_name)), \\n            keccak256(type(SVGTemplate).creationCode)\\n        );  \\n    }\\n\\n    /// @notice the svg string or an empty string\\n    function _svgString(\\n        SVGTemplatesContract storage self,\\n        string memory _name\\n    ) internal view returns (string memory data_) {\\n        try SVGTemplate(_svgAddress(self, _name)).svgString() returns (string memory _data) {\\n            data_ = _data;\\n        } catch (bytes memory) {}\\n    }\\n\\n    /// @notice the sstored address for the name storage. empty is no svg\\n    function _svgData(\\n        SVGTemplatesContract storage self,\\n        string memory _name\\n    ) internal view returns (address) {\\n        return self._templates[_name];\\n    }\\n\\n    /// @notice create a new SVG image with the given name\\n    function _createSVG(SVGTemplatesContract storage self, address sender, string memory _name)\\n        internal\\n        returns (address _tplAddress)\\n    {\\n        // make sure the name is unique\\n        require(\\n            self._templates[_name] == address(0),\\n            \\\"template already deployed\\\"\\n        );\\n\\n        // get the address for the given name, create using create2,\\n        // then verify that create2 returned the expected address\\n        address targetTplAddress = _svgAddress(self, _name);\\n        _tplAddress = Create2.deploy(\\n            0,\\n            keccak256(abi.encodePacked(_name)),\\n            type(SVGTemplate).creationCode\\n        );\\n        require(targetTplAddress == _tplAddress, \\\"template address mismatch\\\");\\n\\n        // transfer ownership to the creator and update storage\\n        Ownable(_tplAddress).transferOwnership(sender);\\n        self._templateNames.push(_name);\\n        self._templates[_name] = _tplAddress;\\n    }\\n}\\n\",\"keccak256\":\"0x26dfe5608e1b47a5537f8ff8d7c6312eade2b181950d7f41f6a999b1a84b72f2\",\"license\":\"MIT\"},\"contracts/libraries/StringsLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nimport \\\"../interfaces/IStrings.sol\\\";\\n\\nlibrary StringsLib {\\n\\n    function parseInt(string memory s) internal pure returns (uint256 res) {\\n        uint256 sLength = bytes(s).length;\\n        for (uint256 i = 0; i < sLength; i++) {\\n            if ((uint8(bytes(s)[i]) - 48) < 0 || (uint8(bytes(s)[i]) - 48) > 9) {\\n                return 0;\\n            }\\n            res += (uint8(bytes(s)[i]) - 48) * 10**(bytes(s).length - i - 1);\\n        }\\n        return res;\\n\\n    }\\n\\n    function startsWith(string memory haystack, string memory needle)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        bytes memory haystackBytes = bytes(haystack);\\n        bytes memory needleBytes = bytes(needle);\\n        uint256 haystackLength = haystackBytes.length;\\n        uint256 needleLength = needleBytes.length;\\n        if (needleLength > haystackLength) {\\n            return false;\\n        }\\n        for (uint256 i = 0; i < needleLength; i++) {\\n            if (haystackBytes[i] != needleBytes[i]) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    function endsWith(string memory haystack, string memory needle)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        bytes memory haystackBytes = bytes(haystack);\\n        bytes memory needleBytes = bytes(needle);\\n        uint256 haystackLength = haystackBytes.length;\\n        uint256 needleLength = needleBytes.length;\\n        if (needleLength > haystackLength) {\\n            return false;\\n        }\\n        for (uint256 i = 0; i < needleLength; i++) {\\n            if (\\n                haystackBytes[haystackLength - i - 1] !=\\n                needleBytes[needleLength - i - 1]\\n            ) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    function substring(string memory haystack, uint256 startpos)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        bytes memory haystackBytes = bytes(haystack);\\n        uint256 length = haystackBytes.length;\\n        uint256 endpos = length - startpos;\\n        bytes memory substringBytes = new bytes(endpos);\\n        for (uint256 i = 0; i < endpos; i++) {\\n            substringBytes[i] = haystackBytes[startpos + i];\\n        }\\n        return string(substringBytes);\\n    }\\n\\n    function substring(string memory haystack, uint256 startpos, uint256 endpos)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        bytes memory haystackBytes = bytes(haystack);\\n        uint256 substringLength = endpos - startpos;\\n        bytes memory substringBytes = new bytes(substringLength);\\n        for (uint256 i = 0; i < substringLength; i++) {\\n            substringBytes[i] = haystackBytes[startpos + i];\\n        }\\n        return string(substringBytes);\\n    }\\n\\n    function concat(string[] memory _strings)\\n        internal\\n        pure\\n        returns (string memory _concat)\\n    {\\n        _concat = \\\"\\\";\\n        uint256 stringsLength = _strings.length;\\n        for (uint256 i = 0; i < stringsLength; i++) {\\n            _concat = string(abi.encodePacked(_concat, _strings[i]));\\n        }\\n        return _concat;\\n    }\\n\\n    function split(string memory _string, string memory _delimiter) internal pure returns (string[] memory _split) {\\n        _split = new string[](0);\\n        uint256 _delimiterLength = bytes(_delimiter).length;\\n        uint256 _stringLength = bytes(_string).length;\\n        uint256 _splitLength = 0;\\n        uint256 _splitIndex = 0;\\n        uint256 _startpos = 0;\\n        uint256 _endpos = 0;\\n        for (uint256 i = 0; i < _stringLength; i++) {\\n            if (bytes(_string)[i] == bytes(_delimiter)[0]) {\\n                _endpos = i;\\n                if (_endpos - _startpos > 0) {\\n                    _split[_splitIndex] = substring(_string, _startpos);\\n                    _splitIndex++;\\n                    _splitLength++;\\n                }\\n                _startpos = i + _delimiterLength;\\n            }\\n        }\\n        if (_startpos < _stringLength) {\\n            _split[_splitIndex] = substring(_string, _startpos);\\n            _splitIndex++;\\n            _splitLength++;\\n        }\\n        return _split;\\n    }\\n\\n    function join(string[] memory _strings, string memory _delimiter) internal pure returns (string memory _joined) {\\n        uint256 stringsLength = _strings.length;\\n        for (uint256 i = 0; i < stringsLength; i++) {\\n            _joined = string(abi.encodePacked(_joined, _strings[i]));\\n            if (i < _strings.length - 1) {\\n                _joined = string(abi.encodePacked(_joined, _delimiter));\\n            }\\n        }\\n        return _joined;\\n    }\\n\\n    function replace(string memory _string, string memory _search, string memory _replace) internal pure returns (string memory _replaced) {\\n        _replaced = _string;\\n        uint256 _searchLength = bytes(_search).length;\\n        uint256 _stringLength = bytes(_string).length;\\n        uint256 _replacedLength = _stringLength;\\n        uint256 _startpos = 0;\\n        uint256 _endpos = 0;\\n        for (uint256 i = 0; i < _stringLength; i++) {\\n            if (bytes(_string)[i] == bytes(_search)[0]) {\\n                _endpos = i;\\n                if (_endpos - _startpos > 0) {\\n                    _replaced = substring(_replaced, _startpos);\\n                    _replacedLength -= _endpos - _startpos;\\n                }\\n                _replaced = string(abi.encodePacked(_replaced, _replace));\\n                _replacedLength += bytes(_replace).length;\\n                _startpos = i + _searchLength;\\n            }\\n        }\\n        if (_startpos < _stringLength) {\\n            _replaced = substring(_replaced, _startpos);\\n            _replacedLength -= _stringLength - _startpos;\\n        }\\n        return _replaced;\\n    }\\n\\n    function trim(string memory _string) internal pure returns (string memory _trimmed) {\\n        _trimmed = _string;\\n        uint256 _stringLength = bytes(_string).length;\\n        uint256 _startpos = 0;\\n        uint256 _endpos = 0;\\n        for (uint256 i = 0; i < _stringLength; i++) {\\n            if (bytes(_string)[i] != 0x20) {\\n                _startpos = i;\\n                break;\\n            }\\n        }\\n        for (uint256 i = _stringLength - 1; i >= 0; i--) {\\n            if (bytes(_string)[i] != 0x20) {\\n                _endpos = i;\\n                break;\\n            }\\n        }\\n        if (_startpos < _endpos) {\\n            _trimmed = substring(_trimmed, _startpos);\\n            _trimmed = substring(_trimmed, 0, _endpos - _startpos + 1);\\n        }\\n        return _trimmed;\\n    }\\n\\n    function toUint16(string memory s) internal pure returns (uint16 res_) {\\n        uint256 res = 0;\\n        uint256 sLength = bytes(s).length;\\n        for (uint256 i = 0; i < sLength; i++) {\\n            if ((uint8(bytes(s)[i]) - 48) < 0 || (uint8(bytes(s)[i]) - 48) > 9) {\\n                return 0;\\n            }\\n            res += (uint8(bytes(s)[i]) - 48) * 10**(bytes(s).length - i - 1);\\n        }\\n        res_ = uint16(res);\\n    }\\n\\n\\n    function replace(string[] memory input, string memory matchTag, string[] memory repl) internal pure returns (string memory) {\\n        string memory svgBody;\\n        for(uint256 i = 0; i < input.length; i++) {\\n            string memory svgString = input[i];\\n            string memory outValue;\\n            if(StringsLib.startsWith(svgString, matchTag)) {\\n                string memory restOfLine = StringsLib.substring(svgString, bytes(matchTag).length);\\n                uint256 replIndex = StringsLib.parseInt(restOfLine);\\n                outValue = repl[replIndex];\\n            } else {\\n                outValue = svgString;\\n            }\\n            svgBody = string(abi.encodePacked(svgBody, outValue));\\n        }\\n        return svgBody;\\n    }\\n\\n    function replace(bytes[] memory sourceBytes, Replacement[] memory replacements_) public pure returns (string memory) {\\n        //bytes[] memory sourceBytes = _getSourceBytes();\\n        string memory outputFile = \\\"\\\";\\n        uint256 sourceBytesLength = sourceBytes.length;\\n        for (uint256 i = 0; i < sourceBytesLength; i++) {\\n            bytes memory sourceByte = sourceBytes[i];\\n            string memory outputLine  = string(sourceBytes[i]);\\n            for (uint256 j = 0; j < replacements_.length; j++) {\\n                Replacement memory replacement = replacements_[j];\\n                if (keccak256(sourceByte) == keccak256(bytes(replacement.matchString))) {\\n                    outputLine = replacement.replaceString;\\n                }\\n            }\\n            outputFile = string(abi.encodePacked(outputFile, outputLine));\\n        }\\n        return outputFile;\\n    }    \\n}\\n\",\"keccak256\":\"0xe7997c850465105fcfa7ea7b78f1ea9349d726696de51652f05575069d293ef4\",\"license\":\"MIT\"},\"contracts/utilities/MultipartData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nimport \\\"../libraries/SVGTemplatesLib.sol\\\";\\n\\nimport \\\"../interfaces/IMultiPart.sol\\\";\\n\\nabstract contract MultipartData  {\\n    /// @notice add a new multipart to the contract\\n    /// @param _data the data of the multipart\\n    function _addData(bytes memory _data)\\n        internal returns (uint256 _index) {\\n        _index = SVGTemplatesLib.svgStorage().multiPart.data_.length;\\n        SVGTemplatesLib.svgStorage().multiPart.data_.push(_data);\\n    }\\n\\n    /// @notice get the data of the given index\\n    /// @param _index the index of the data\\n    function _getData(uint256 _index)\\n        internal view  returns (bytes memory data) {\\n        data = SVGTemplatesLib.svgStorage().multiPart.data_[_index];\\n    }\\n\\n    /// @notice get the data as a string\\n    function _fromBytes() internal view returns (string memory output) {\\n        string memory result = \\\"\\\";\\n        uint256 dataLength = SVGTemplatesLib.svgStorage().multiPart.data_.length;\\n        for (uint256 i = 0; i < dataLength; i++) {\\n            result = string(abi.encodePacked(result, SVGTemplatesLib.svgStorage().multiPart.data_[i]));\\n        }\\n        output = result;\\n    }\\n\\n    /// @notice get the data as a  bytes array\\n    function data__() internal view returns (bytes[] storage) {\\n        return SVGTemplatesLib.svgStorage().multiPart.data_;\\n    }\\n\\n    /// @notice clear the contents of the data array\\n    function _clear() internal {\\n        delete SVGTemplatesLib.svgStorage().multiPart.data_;\\n    }\\n}\",\"keccak256\":\"0xce66216bd61e1e1552e3ba3bea1d938e579ab254d2da435de6fcac1e19180b61\",\"license\":\"MIT\"},\"contracts/utilities/SVGTemplate.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nimport \\\"../utilities/MultipartData.sol\\\";\\n\\nimport \\\"../libraries/StringsLib.sol\\\";\\nimport \\\"../libraries/SVGTemplatesLib.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\n/// @notice a single SVG image\\ncontract SVGTemplate is MultipartData, Ownable, Initializable {\\n\\n    event SVGImageAdded(address indexed _from, address indexed _to, string _name, string _data);\\n    event SVGImagePartAdded(address indexed _from, address indexed _to, string _name, string _data);\\n\\n    constructor() Ownable(msg.sender) {}\\n\\n    function initialize(string memory _name, string[] memory _svg) external initializer {\\n        MultiPartContract storage ds = SVGTemplatesLib.svgStorage().multiPart;\\n        ds.name_ = _name;\\n        for(uint i = 0; i < _svg.length; i++) {\\n            ds.data_.push(bytes(_svg[i]));\\n        }\\n    }\\n\\n    /// @notice the name of the svg\\n    function svgName() external view returns (string memory _name) {\\n        MultiPartContract storage ds = SVGTemplatesLib.svgStorage().multiPart;\\n        _name = ds.name_;\\n    }\\n\\n    /// @notice the data of the svg\\n    function svgString() external view returns (string memory _data) {\\n        _data = _fromBytes();\\n    }\\n\\n    /// @notice the data of the svg\\n    function svgBytes() external view returns (bytes[] memory _data) {\\n        _data = data__();\\n    }\\n    \\n    /// @notice clear the data of the svg\\n    function clear() external onlyOwner {\\n        _clear();\\n    }\\n\\n    /// @notice add data to the end of the data\\n    function add(string memory _data) external onlyOwner returns (uint256 _index) {\\n        _index = _addData(bytes(_data));\\n        emit SVGImagePartAdded(msg.sender, address(this), SVGTemplatesLib.svgStorage().multiPart.name_, _data);\\n    }\\n\\n    /// @notice add all SVG lines at\\n    function addAll(string[] memory _data) external onlyOwner returns (uint256 _count) {\\n        for(uint256 i = 0; i < _data.length; i++) {\\n            _addData(bytes(_data[i]));\\n        }\\n        _count = _data.length;\\n        MultiPartContract storage ds = SVGTemplatesLib.svgStorage().multiPart;\\n        emit SVGImageAdded(msg.sender, address(this), ds.name_, _fromBytes());\\n    }\\n\\n    /// @notice get the svg, replacing the data with the data from the given replacements\\n    function buildSVG(Replacement[] memory replacements) external view returns (string memory) {\\n        return StringsLib.replace(data__(), replacements);\\n    }\\n}\",\"keccak256\":\"0xfbbefbfb61a11e259228358663627f001b5497ec429573a4f1e760b7c74911f1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122037ab40c82290b7b85e20306eb95dc622f2a7af61066f0e452025271b8374f09864736f6c634300081c0033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122037ab40c82290b7b85e20306eb95dc622f2a7af61066f0e452025271b8374f09864736f6c634300081c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}